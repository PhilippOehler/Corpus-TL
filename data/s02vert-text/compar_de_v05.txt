Herbstsemester 2014
Open-Source-Softwareentwicklung

Free/Libre Open Source Software

Marco Vogt
<marco.vogt@unibas.ch>
23.09.2014

Bekannte Projekte

HS 2014

Free/Libre Open Source Software

2

Bekannte Projekte

HS 2014

Free/Libre Open Source Software

3

Namensstreit zwischen Debian und Mozilla
• Der Streit entstand im Jahr 2006
• offizielle Icons stehen nicht unter einer
freien Lizenz.
• Debian solle alle Änderungen am Quelltext

erst von Mozilla absegnen lassen.
• Debian entschied sich für einen Fork

HS 2014

Free/Libre Open Source Software

4

Firefox vs. Iceweasel und Icecat

HS 2014

Free/Libre Open Source Software

5

Was ist Freie Software?

„Freie Software ist Software, die die
Freiheit und Gemeinschaft der Nutzer
respektiert.“

(Quelle: https://www.gnu.org/philosophy/free-sw.de.html)
HS 2014

Free/Libre Open Source Software

6

Was ist Freie Software?

„Free software is a matter of liberty, not
price. To understand the concept, you
should think of free as in free speech, not

as in free beer."
— Richard Stallman
HS 2014

Free/Libre Open Source Software

7

Was ist Freie Software?
vier wesentliche Freiheiten:
Nutzen: zu jedem Zweck
Verstehen: lernen, erkennen
Teilen: verteilen, verbreiten

Quelle: http://sentience.ch/blog/

Verbessern: modifizieren und weitergeben

HS 2014

Free/Libre Open Source Software

8

Abgrenzung zu Open-Source
Eric S. Raymond, Bruce Perens und Tim O’Reilly
Der Begriff Open-Source wurde aus Marketing Gründen
geschaffen.
FLOSS: Free/Libre Open Source Software

HS 2014

Free/Libre Open Source Software

9

Free Software vs. Open-Source-Software

(von: http://silencebreakers.org/the-open-source-paradox/)
HS 2014

Free/Libre Open Source Software

10

Free Software vs. Open-Source-Software
Open-Source-Enthusiast:
„Ich bin überrascht, dass Sie das Programm, ohne unser
Entwicklungsmodell zu benutzen, so gut machen konnten, aber
haben es geschafft! Wie bekomme ich eine Kopie?“

Freie-Software-Aktivist:
„Ihr Programm ist sehr attraktiv, aber ich schätze meine Freiheit
mehr. Also lehne ich Ihr Programm ab. Stattdessen werde ich
ein Projekt unterstützen, um einen freien Ersatz zu entwickeln.“

(nach: https://www.gnu.org/philosophy/open-source-misses-the-point)
HS 2014

Free/Libre Open Source Software

11

Bekannte Projekte

HS 2014

Free/Libre Open Source Software

12

Bekannte Projekte

HS 2014

Free/Libre Open Source Software

13

FLOSS schafft Transparenz
TrueCrypt ist eine Verschlüsselungssoftware
TrueCrypt wurde/wird einem Audit unterzogen
Vor 3 Monaten abgekündigt
Weiterführung als Fork unter neuem Namen

HS 2014

Free/Libre Open Source Software

14

Transparenz schafft auch gefahren
Heartbleed-Bug
Nicht immer wird die hohe Transparenz
auch genutzt.
Haben kriminelle den Bug schon
früher gefunden?

“Catastrophic is the right word. On the scale of 1 to 10,
this is an 11.”
– Bruce Schneier
HS 2014

Free/Libre Open Source Software

15

Bekannte Projekte

HS 2014

Free/Libre Open Source Software

16

Bekannte Projekte

HS 2014

Free/Libre Open Source Software

17

FLOSS braucht Freiheiten
Sun Microsystems wurde im Januar 2010 von Oracle
übernommen
Unzufriedenheit innerhalb der OpenOffice.org-Gemeinschaft
Oracle liess Zukunft von OpenOffice.org offen
September 2010: Abspaltung Oracle und Gründung von
LibreOffice

HS 2014

Free/Libre Open Source Software

18

Bekannte Projekte

HS 2014

Free/Libre Open Source Software

19

Bekannte Projekte

HS 2014

Free/Libre Open Source Software

20

Open-Source bedeutet nicht kostenlos
Growl und Red Hat verlangen Lizenzgebühren
Die GPL enthält keine Passage, die aussagt, dass keine
Lizenzgebühren verlangt werden dürfen.
Nach offizieller GPL FAQ Liste explizit zulässig.
(http://www.gnu.org/licenses/gpl-faq#DoesTheGPLAllowMoney)

HS 2014

Free/Libre Open Source Software

21

Bekannte Projekte

HS 2014

Free/Libre Open Source Software

22

Bekannte Projekte

HS 2014

Free/Libre Open Source Software

23

Ist die Freiheit gefährdet?
Google zahlt 300 Millionen Dollar jährlich an Mozilla damit
Google die Standard Suchmaschine ist.
(http://allthingsd.com/20111222/google-will-pay-mozilla-almost-300m-per-year-insearch-deal-besting-microsoft-and-yahoo/)

Firefox integriert die Encrypted Media Extensions, einen
Kopierschutz für Multimedia
OpenIPMP: Eine Open-Source DRM (Digital Rights
Management) Lösung

HS 2014

Free/Libre Open Source Software

24

Wer wacht über die Freiheit?
1985 von Richard Stallman gegründet
Förderung von freier Software
Bis Mitte der 90er Jahre, Finanzierung
von Programmierern.
Heute hauptsächlich rechtliche und strukturelle
Angelegenheiten.

HS 2014

Free/Libre Open Source Software

25

Wer wacht über die Freiheit?
Richard Stallman begann 1983 mit der Programmierung an
seinem GNU-Projekt
Für Emacs und den GNU-C-Compiler jeweils eine eigene Lizenz
Lizenzen garantierten Freiheiten der Nutzer
Problem: Austausch von Code zwischen Projekten
„Lizenz als Subroutine“
Copyleft-Prinzip
HS 2014

Free/Libre Open Source Software

26

Wer wacht über die Freiheit?
GPLv3 zu restriktiv (Anti-DRM-Massnahmen)
Linux bleibt unter GPLv2

“I think it's insane to require people to make their private
signing keys available.”
– Linus Torvalds

HS 2014

Free/Libre Open Source Software

27

Wer wacht über die Freiheit?
2007 gegründet
Bezahlung wichtiger Linux-Entwickler wie etwa Linus Torvalds
oder Greg Kroah-Hartman
Förderung der Zusammenarbeit zwischen Linux-Unternehmen
Schutz und Verwaltung der Marke Linux

HS 2014

Free/Libre Open Source Software

28

Bekannte Projekte

HS 2014

Free/Libre Open Source Software

29

Bekannte Projekte

HS 2014

Free/Libre Open Source Software

30

FLOSS schafft Alternativen
Alternative zu Microsoft Server
Seit Samba 4 auch Möglichkeit ein AD bereitzustellen

HS 2014

Free/Libre Open Source Software

31

Gesellschaftliche Akzeptanz von FLOSS

Die Alternativen sind da, aber
werden sie auch genutzt?

HS 2014

Free/Libre Open Source Software

32

Gesellschaftliche Akzeptanz von FLOSS
Open Source Strategie der Schweiz
aus dem Jahr 2005
München: LiMux

Schweizerisches Bundesgericht:
Seit 2011: Linux und OpenJustitia
Rückschritte: Freiburg

HS 2014

Free/Libre Open Source Software

33

Gesellschaftliche Akzeptanz von FLOSS

Hauptargument: Preis

Oder doch nicht?
HS 2014

Free/Libre Open Source Software

34

Gesellschaftliche Akzeptanz von FLOSS

Besser:
Freiheit & Unabhängigkeit

HS 2014

Free/Libre Open Source Software

35

Gesellschaftliche Akzeptanz von FLOSS

HS 2014

Free/Libre Open Source Software

36

FRAGEN / DISKUSSION
HS 2014

Free/Libre Open Source Software

37
<p> Open Source Lizenzmodelle </p>
<p> Transkript </p>
<p> 1 Wissenstransfer leicht gemacht! VERGLEICHSSTUDIE Quelle: Fotolia.de it.eu it.eu it.eu +++ </p>
<p> 2 Wissenstransfer leicht gemacht! Autoren Marco Becker Franka Burmester Julia Schmidt- Löffler Open Source Lizenzmodelle Dr. rer. pol. Marco Becker ist Direktor des Instituts für angewandte Forschung und Dozent für Allgemeine Betriebswirtschaftslehre mit den Schwerpunkten Rechnungswesen und Controlling sowie Wirtschaftsinformatik an der NBS Northern Business School in Hamburg. Der gelernte Bankkaufmann (Deutsche Bank AG) hat nach seiner Ausbildung ein Studium der Betriebswirtschaftslehre an der Universität Hamburg absolviert und Anfang des Jahres 2005 als Diplom- Kaufmann abgeschlossen. Im Anschluss war er sowohl als Führungskraft in mittelständischen Unternehmen als auch als angestellter und selbstständiger Unternehmensberater tätig. Anfang des Jahres 2012 wurde er von der Fakultät für Wirtschaftswissenschaften der Universität Hamburg promoviert, nachdem er nebenberuflich seine Dissertationsschrift erstellt hatte. Neben seinen wissenschaftlichen Veröffentlichungen ist er Autor mehrerer Fachbücher und anerkannter Experte auf den Gebieten Prozess- und Qualitätsmanagement sowie betrieblicher Datenschutz. Franka Burmester arbeitet seit dem Jahr 2007 bei der Kreissparkasse Herzogtum Lauenburg. Dort wurde sie nach erfolgreicher Beendigung ihrer Ausbildung zur Bankkauffrau erst als Serviceberaterin und dann als als Privatkundenberaterin übernommen. Vor Kurzem wurde Ihr die Aufgabe der Geschäftsstellenleiterin der Service Filiale Aumühle übertragen. In den letzten Jahren hat sich Frau Burmester nebenberuflich zum Fachwirt für Anlage- und Finanzberatung an der Sparkassenakademie in Kiel weitergebildet und schließt gerade ein Studium der Betriebswirtschaftslehre ab, das sie ebenfalls nebenberuflich an der NBS- Northern Business School in Hamburg absolviert hat. Copyright by Institut für angewandte Forschung it.eu 1/25 </p>
<p> 3 Julia Schmidt- Löffler hat nach Ihrem Abitur eine zweijährige Ausbildung zur Bankkauffrau bei der Hamburger Sparkasse AG absolviert und im Jahr 2009 erfolgreich abgeschlossen. Nachdem sie ins Angestellten- verhältnis übernommen wurde, hat Frau Schmidt- Löffler im Jahr 2010 den Basislehrgang an der Hanseatischen Sparkassenakademie bestanden. Zur Zeit absolviert Frau Schmidt- Löffler nebenberuflich ein Studium der Betriebswirtschaftslehre an der NBS Northern Business School in Hamburg. Copyright by Institut für angewandte Forschung it.eu 2/25 </p>
<p> 4 Institut für angewandte Forschung Dr. Marco Becker Hunnenbarg 17a Pinneberg Tel.:04101 / Fax:04101 / E- Mail: it.eu Sprechen sie uns einfach an! Das Institut für angewandte Forschung wurde gegründet um den Wissenstransfer aus der Forschung in die Praxis zu beschleunigen. Anfang des Jahres 2014 hat das Institut für angewandte Forschung seine Arbeit aufgenommen und beschäftigt sich zur Zeit neben eigenen Forschungsprojekten im Themenbereich der praktischen Wirtschaftsinformatik in erster Linie mit Auftragsforschung und der Erbringung von Beratungsdienstleistungen. Haftungsausschluss: Die Erläuterungen sowie Interpretationen geben die persönliche Einschätzung und Erfahrung der Autoren wieder. Trotz sorgfältiger Recherche und Prüfung der Inhalte kann eine Garantie oder Haftung für die Richtigkeit oder Vollständigkeit nicht übernommen werden. Copyright: Dieses Werk ist einschließlich aller seiner Teile urheberrechtlich geschützt. Jede Verwertung außerhalb der Grenzen des Urheberrechtsgesetzes ist ohne schriftliche Zustimmung des Instituts für angewandte Forschung unzulässig und strafbar. Weder das Werk noch seine Teile dürfen ohne vorherige schriftliche Einwilligung des Instituts für angewandte Forschung vervielfältigt oder öffentlich gemacht werden. Dieses gilt auch bei einer entsprechenden Nutzung für Schulungszwecke. Hinweis: Soweit Personen- und Funktionsbezeichnungen nicht ausdrücklich in der weiblichen und männlichen Form genannt werden, gelten die sprachlichen Bezeichnungen in der männlichen Form sinngemäß auch in der weiblichen Form. Copyright by Institut für angewandte Forschung it.eu 3/25 </p>
<p> 5 Zusammenfassung Bereits seit dem Ende der 1990er Jahre steigt das Interesse an Open Source Software 1 stetig an. Obwohl die Lizenzen ungewöhnliche Eigentümerrechte umfassen, wird OSS von einigen Experten sogar als Überlegen gegenüber der proprietären Software eingeordnet. 2 Die führenden Anbieter für Betriebssysteme, wie Microsoft, sowie für Softwareanwendungen, wie z. B. Office, beherrschen den Markt. Diese denken aufgrund von Wirtschaftlichkeit immer wieder über neue Einnahmequellen nach, so dass kostengünstige Alternativen auch in Form von OSS immer attraktiver für die Bevölkerung werden. Mittlerweile nutzen sogar der Bund und die Länder OSS. 3 In dieser Vergleichsstudie werden die grundlegenden Open Source- Lizenzmodelle untersucht. Inhaltsverzeichnis 1 Grundlagen Open Source Software Open Source Initiative Free Software Foundation Copyrigt (Urheberrecht) und Copyleft Open Source Softwarelizenzen Unterteilung von Lizenzmodellen Ausgewählte Open Source Lizenzen GNU General Public License GNU Lesser General Public License Berkeley Software Distrubution License Mozilla Public License Artistic License Fazit Wird im Weiteren mit OSS abgekürzt. Vgl. Brügge et al. (2004), S. 1. Vgl. RECO (Regionalcentrum für Electronic Commerce Anwendungen Osnabrück) (Hrgs.) (2010), S. 8. Copyright by Institut für angewandte Forschung it.eu 4/25 </p>
<p> 6 1 Grundlagen 1.1 Open Source Software Wann genau die Geschichte der OSS beginnt, lässt sich nicht exakt bestimmen. Die Entwicklung von UNIX im Jahr 1969 sowie der Zusammenschluss von Richard Stallmann und anderen Programmierern zu einer Gemeinschaft, hieraus entstand später das GNU- Projekt und damit auch die FSF 4, werden als wichtige Ereignisse zur Entstehung der OSS gesehen. 5 Bei OSS handelt es sich um Software, deren Quellcode offen ist und somit von jedem sowohl eingesehen, als auch verändert werden kann. 6 Dabei kann die Software weiterentwickelt und an die eigenen Bedürfnisse angepasst werden. Diese eigenen Änderungen können anschließend veröffentlicht und weitergegeben werden. 7 Die grundlegenden Freiheiten von OSS sind die Möglichkeit der Anpassung an die eigenen Bedürfnisse, das Studieren der Arbeitsweise, die kostenlose Weitergabe sowie die nicht an einen Zweck gebundene Nutzung. Im deutschen wird häufig auch der Begriff Freie Software verwendet. 8 Die FSF sieht allerdings einen deutlichen Unterschied zwischen Open Source 9 und freier Software, da die Namen unterschiedliche Vorstellungen bei den Menschen hervorrufen. 10 Hierbei ist allerdings darauf zu achten, dass freie Software nicht bedeutet, dass diese kostenlos erhältlich ist, sondern der Nutzer lediglich frei ist in u. a. der Vervielfältigung sowie Veränderung der Software. 11 Open Source ist Entstehung von OSS Open Source vs. freie Software 4 FSF steht für Free Software Foundation. 5 Vgl. Ploch et al. (2002), S. 5f. 6 Vgl. Gabler Wirtschaftslexikon (Hrgs.) (2014). 7 Vgl. Groll (2012), S. 23, Vgl. Groll (2012), S Wird im Weiteren mit OS abgekürzt. 10 Vgl. Free Software Foundation (Hrgs.) (2014 a). 11 Vgl. RECO (Regionalcentrum für Electronic Commerce Anwendungen Osnabrück) (Hrgs.) (2010), S. 9. Copyright by Institut für angewandte Forschung it.eu 5/25 </p>
<p> 7 eine Entwicklungsmethodik, Freie Software ist eine soziale Bewegung 12 Diese wird von der FSF gefördert. Freeware ist komplett kostenlos erhältlich, umfasst allerdings nicht das Recht Änderungen und Anpassungen an der Software vorzunehmen. 13 Die Veröffentlichung erfolgt also ohne Quellcode und häufig auch ohne Lizenz. 14 Shareware ist ein Vermarktungsmodell von Software, wobei der volle Funktionsumfang zumeist nur über einen kurzen Zeitraum vollständig genutzt werden kann. Anschließend ist es notwendig Lizenzgebühren zu bezahlen. Die Shareware kann dabei kopiert und auch verbreitet werden. Viele Softwareentwickler nutzen diese Versionen als Testversionen, um so die Software schnell auf dem Markt zu verbreiten und Aufmerksamkeit zu erhalten. 15 Neben OSS existiert noch die proprietäre Software, als Gegenbegriff zur OSS. Unter proprietärer Software wird herkömmlich lizenzierte Software verstanden. 16 Der Urheber kann bei proprietärer Software eigenständig entscheiden, wer, ob und auf welche Art und Weise diese Software verwerten darf. Der Quelltext ist bei dieser Art der Software nicht frei zugänglich, außerdem sind Veränderungen und die Weiterverbreitung nicht erlaubt. Häufig wird bei proprietärer Software der Grund für das nicht Veröffentlichen des Quellcodes bei der Wahrung des Geschäftsgeheimnisses genannt. 17 Freeware Shareware proprietäre Software 12 Free Software Foundation (Hrgs.) (2014 a). 13 Vgl. Groll (2012), S Vgl. Grassmuck (2004), S Vgl. Schaaf (2013), S. 22. (zitiert nach: Groll (2012), S. 22; Hennig (2009), S. 8; Renner et al. (2005), S ; Saleck (2005), S. 8f). 16 Vgl. Institut für Rechtsfragen der Freien und Open Source Software (Hrgs.) (2014 a). 17 Vgl. Schaaf (2013), S. 21. (zitiert nach: Ellmer (2008), S. 3; Groll (2012), S. 21; Hennig (2009), S. 7; Jaeger / Metzger (2011), S. 3; Maaß (2008), S. 48). Copyright by Institut für angewandte Forschung it.eu 6/25 </p>
<p> 8 Die OSS kann weiter nach der Stärke des vorhandenen Copylefts unterteilt werden. Übersicht So#ware Open%Source Proprietär Public%Domain Freie*So#ware Copyle6 Kommerzielle% Vollversionen Strenges% Copyle6 Nur%Binär Beschränktes% Copyle6 Binär%&%Quellcode Non=Copyle6 Shareware kostenlos%verfügbar Freeware Darstellung 1: Einteilung Software 18 Es gibt zahlreiche Vorteile von OSS, die sich in die Gruppen Freiheit, offene Quellen, Qualität und Pragmatismus klassifizieren lassen: Vorteile von OSS Freiheit offene Quellen Qualität Pragmatismus offene Standards Herstellerunabhängigkeit Open- Source- Philosophie Flexibilität durch eigene Anpassungen Zugang zum Quellcode Bugs selbst fixen Leistungsfähigkeit Zuverlässigkeit Sicherheit keine Lizenzkosten vorheriges Testen möglich Support durch Community Intensives Know- How Darstellung 2: Vorteile von OSS Eigene Darstellung in Anlehnung an: Bundesverwaltungsamt (Hrgs.) (2014 a). Copyright by Institut für angewandte Forschung it.eu 7/25 </p>
<p> 9 Allerdings gibt es auch folgende Nachteile, die vorrangig von den Nutzern wahrgenommen werden: 20 Nachteile von OSS Fehlende Treiberunterstützung Uneinheitliche Bedienoberfläche Schwierigkeiten bei Installation/Konfiguration Geringe Bekanntheit Mangelnde Kompatibilität mit anderer Software Fehlender Support Mangelnde Sicherheit Die Wertigkeit dieser Vor- und Nachteile muss von jedem Nutzer individuell beurteilt werden. Bewertung 1.2 Open Source Initiative Die OSI 21 wurde 1998 als Non- Profit- Organisation in Kalifornien gegründet. Der Zweck dieser Initiative ist die Organisation und die Verbreitung frei verfügbarer Software zum Nutzen der Gemeinschaft. 22 Anhand von zehn Kriterien wird über die Lizenzierung der Software als OSS entschieden, anschließend darf diese Software das OSI- Logo tragen. Die zehn Kriterien sind: 1. Freie Weitergabe der Software ohne Lizenzgebühr 2. Offenlegung und Weitergabe des Quellcodes 3. Zulassung von Weiterentwicklungen und Ableitung unter derselben Lizenz wie die Basissoftware 4. Garantie der Unversehrtheit des originären Quellcodes 5. Keine Diskriminierung von Personen oder Gruppen 19 Vgl. Bundesverwaltungsamt (Hrsg.) (2014a), Bundesverwaltungsamt (Hrsg.) (2014b), Dietrich (2009 a). 20 Vgl. Bundesverwaltungsamt (Hrsg.) (2014 c), Dietrich (2009 b), Dietrich (2009 c). 21 OSI steht für open source initative. 22 Vgl. Ronneburg (2014). Copyright by Institut für angewandte Forschung it.eu 8/25 </p>
<p> 10 6. Keine Nutzungseinschränkung für bestimmte Anwendungsgebiete 7. Unmittelbare Lizenzerteilung für alle, die die Software erhalten, ohne zusätzliche Lizenz 8. Produktneutralität der Lizenz 9. Keine Einschränkung anderer Software 10. Neutralität der Weitergabe bezüglich Technologien/Standards 23 Die Definition der OSI umfasst somit neben dem freien Quellcode noch weitere Kriterien, wie z. B. die Nicht- Akzeptanz von Diskriminierung. 24 Während im November 2003 insgesamt 47 Lizenzen mit dem OSI- Logo ausgezeichnet waren 25, sind es 2014 bereits 60 verschiedene Lizenzen. 26 Verbreitung 1.3 Free Software Foundation Die FSF wurde von Richard Stallmann gegründet, um freie Software 28 zu planen und zu entwickeln. 29 Die Entwicklungen in den Anfängen der Computerwelt gingen schnell voran. Dies hing auch damit zusammen, dass damals fast die komplette Software frei erhältlich und zu verwenden war. In den 1980er Jahren wurde die proprietäre Software jedoch immer beliebter, woraufhin die FSF gegründet wurde. 30 Laut der FSF muss eine OSS vier wesentliche Freiheiten erfüllen: Strahringer (2012), S. 116f (zitiert nach: Open Source Initivative (Hrgs.) (2014 b)). 24 Vgl. Steinbring / Hampel (2008): S Vgl. Brügge et al. (2004), S Vgl. Open Source Initivative (Hrgs.) (2014 a). 27 Vgl. Brügge et al. (2004), S Vgl. Jaeger et al. (2005), S Vgl. Brügge et al. (2004), S Vgl. Silberfeld (2014), S Vgl. Free Software Foundation (Hrgs.) (2014 c). Copyright by Institut für angewandte Forschung it.eu 9/25 </p>
<p> 11 1. Zu jedem Zweck ausführbar 2. An eigene Bedürfnisse anpassbar 3. Durch die Verbreitung soll anderen geholfen werden 4. Soll durch Weiterentwicklung und Verbreitung zum Gemeinwohl beitragen Unsere Mission ist die Freiheit zu bewahren, zu schützen und zu fördern, um Rechnersoftware nutzen, untersuchen, kopieren, modifizieren und weiterverbreiten zu können und die Rechte von Freie- Software- Nutzern zu verteidigen. 32 Mission 1.4 Copyrigt (Urheberrecht) und Copyleft Das deutsche Urheberrecht, auch Copyright genannt, schützt Werke und somit geistiges Eigentum. Das Urheberrecht an einem Werk dazu zählt neben Literatur auch Software beginnt bei Entstehung des Werkes. Eine explizite Registrierung, wie früher in den USA, ist nicht notwendig. Nach dem deutschen Recht können nur natürliche Personen als Urheber auftreten, da die Rechte aus dem Urheberrechtsgesetz nicht abgetreten werden können. Allerdings ist es möglich die Nutzungsrechte abzutreten, hierbei spielen Lizenzen eine wichtige Rolle. 33 Copyleft bezeichnet die Umkehrung des Copyrights. Während beim Copyright das Kopieren und Weiterentwickeln ausgeschlossen ist, vergibt der Urheber beim Copyleft Dritten das Recht zur Bearbeitung und Verbreitung. Hieraus ergibt sich anschließend allerdings für den Dritten die Pflicht, seine Weiterentwicklung ebenfalls anderen zugänglich zu machen und Veränderungen und weitere Entwicklungen zuzulassen. Somit wird sichergestellt, dass einmal frei verfügbare OSS auch weiterhin frei bleiben. 34 Richard Stallmann, der Gründer der FSF, bezeichnet das Copyleft als ein Mittel um die Software freizuhalten und Copyright Copyleft 32 Free Software Foundation (Hrgs.) (2014 b). 33 Vgl. Schaaf (2013), S. 18. (zitiert nach: Gläßer (2004), S. 26, 43f; Hennig (2009), S. 17; Jaeger et al. (2005), S. 162; Krumbein (2004), S. 40f; 29, 31 UrhG; BITKOM (Hrgs.) (2005), S. 6f; BITKOM (Hrgs.) (2008), S. 29). 34 Vgl. Strahringer (2012), S Copyright by Institut für angewandte Forschung it.eu 10/25 </p>
<p> 12 somit Software zu privatisieren. 35 Allerdings gibt es verschieden starke Interpretationen des Copylefts. Als Kritikpunkt an Copyleft wird die Untergrabung des Copyrights gesehen, da der Urheber eines Copylefts die Möglichkeit verliert aus seinem Eigentum einen finanziellen Verdienst zu erhalten. 36 Kritik 1.5 Open Source Softwarelizenzen In Lizenzverträgen werden die Nutzungsrechte festgehalten. Dabei geht es vor allen Dingen um die Rechte und Pflichten, die dem Lizenznehmer eingeräumt werden. 37 Durch Lizenzen wird festgesetzt, welcher Personenkreis was genau mit der Software machen darf. 38 Gesetzlich festgehalten ist dies in den 2 Abs. 1 Satz 1 des UrhG. Dadurch kann der Urheber entscheiden, ob und wie seine Software genutzt werden darf. 39 Durch OS- Lizenzen wird ein einheitlicher Rahmen bei der rechtlichen Regelung geschaffen. Hierdurch wird es dem Urheber erleichtert, seine Rechte rechtswirksam auf Dritte zu übertragen. 40 Alle OS- Lizenzen haben gemeinsam, dass es Dritten ermöglicht wird den Quellcode zu nutzen, zu verändern, weiterzugeben und zu lesen. Unterscheiden lassen sich die unterschiedlichen Lizenzen vor allen Dingen bei den Bestimmungen zur Offenlegung der Modifikationen im Distributionsfall, bei den Möglichkeiten der Integration auch in proprietärer Software sowie bei der Einräumung von Rechten des ursprünglichen Entwicklers. 41 Die bereits beschriebenen Organisationen Nutzungsrechte Nutzung des Quellcode 35 Vgl. Brügge et al. (2004), S Vgl. Silberfeld (2014), S Vgl. Schaaf (2013), S. 29. (zitiert nach: Gläßer (2004), S. 25; Groll (2012), S. 20, 35; Jaeger / Metzger (2011), S. 95; Jaeger et al. (2005), S. 6f). 38 Vgl. Evers (2008), S Vgl. Bundesverwaltungsamt (Hrgs.) (2014 a). 40 Vgl. Helmreich / Riehle (2012), S Vgl. Brügge et al. (2004), S. 22. Copyright by Institut für angewandte Forschung it.eu 11/25 </p>
<p> 13 FSF und OSI erkennen nach ihren jeweiligen Bedingungen Lizenzen als OS- Lizenzen an und garantieren damit auch die freie Nutzung. 42 Es existieren über 200 OS- Lizenzen 43, davon sind jedoch nicht alle von der FSF oder OSI anerkannt, da diese Anerkennung kein Pflichtmerkmal ist. 44 Es gibt eine Vielzahl verschiedener OS- Lizenzen, allerdings wird in über 90% auf vier Lizenzmodelle zurückgegriffen. Die vier am meist genutzten Lizenzen sind die GNU General Public License 45, GNU Lesser Public License 46, Mozilla Public License 47 und die Berkley Software Distribution License 48. Verbreitung von OSS GPL&(70%)& LGPL&(13%)& BSD&(8%)& MPL&(2%) Andere&(7%)& Darstellung 3: Verteilung Open Source- Lizenzen bei sourceforge Vgl. Bundesverwaltungsamt (Hrgs.) (2014 a). 43 Vgl. Schaaf (2013), S. 33. (zitiert nach: Hennig (2009), S. 19, 21; Institut für Rechtsfragen der Freien und Open Source Software (Hrgs.) (2014 b); Jaeger et al. (2005), S. 15; Renner et al. (2005), S. 22). 44 Vgl. Schaaf (2013), S Wird im Weiteren mit GPL abgekürzt. 46 Wird im Weiteren mit LGPL abgekürzt. 47 Wird im Weiteren mit MPL abgekürzt. 48 Wird im Weiteren mit BSD abgekürzt. 49 Eigene Darstellung in Anlehnung an: Kleijn (2006). Copyright by Institut für angewandte Forschung it.eu 12/25 </p>
<p> 14 2 Unterteilung von Lizenzmodellen Bei Software, die unter strengem bzw. starkem Copyleft steht, darf die modifizierte Software nur unter der gleichen Lizenz, wie die ursprüngliche Software, weitergegeben werden. 50 Diese Software kann in keiner Weise mit proprietärer Software verbunden werden. Selbst eine Verlinkung ist nicht möglich. Der Grundgedanke, der hinter diesem Copyleft steht ist, dass einmal offene Software auch weiterhin offen bleibt und nicht in proprietäre Projekte mit eingebunden werden kann. Bei Verstößen gegen dieses Copyleft gehen die gewährten Rechte verloren und es verstößt somit auch gegen das Urheberrecht. 51 Bei Lizenzen ohne Copyleft, sogenannte Non- Copyleft- Lizenzen, werden dem Nutzer der Software alle Nutzungsfreihalten eingeräumt. Alle Änderungen und Weiterentwicklungen können unter einer beliebigen, anderen Lizenz weiterverbreitet werden. Dadurch kann eine OSS durch Weiterentwicklungen auch als proprietäre Software vertrieben werden 52, wodurch es möglich ist, dass der offene Quellcode der Ursprungssoftware durch Änderungen unfrei wird. 53 Bei dem eingeschränkten bzw. schwachen Copyleft wird die Verlinkung und Kombination von OSS und proprietärer Software gestattet. So können unabhängige Erweiterungen oder Neuentwicklungen auch unter anderen Lizenzen oder sogar als proprietäre Lizenz weitergegeben werden. 54 Hiermit ist es möglich, Software mit unterschiedlichen Lizenzen zu verknüpfen. 55 Es ist allerdings darauf zu achten, dass diese Modifikationen in einer eigenen Datei zu speichern sind, da die restliche Software unter der bisherigen Lizenz weitergeführt werden muss. Nur strenges Copyleft Non- Copyleft eingeschränktes Copyleft 50 Vgl. Institut für Rechtsfragen der Freien und Open Source Software (Hrgs.) (2014 b). 51 Vgl. Kleijn (2006). 52 Vgl. Teupen (2007), S. 167f. 53 Vgl. Jaeger et al. (2005), S Vgl. Kleijn (2006). 55 Vgl. Institut für Rechtsfragen der Freien und Open Source Software (Hrgs.) (2014 b). Copyright by Institut für angewandte Forschung it.eu 13/25 </p>
<p> 15 die modifizierte Datei darf unter einer anderen Lizenz veröffentlicht werden Ausgewählte Open Source Lizenzen 3.1 GNU General Public License Die GPL ist mit 70% die mit großem Abstand am meist genutzte Lizenz 57, dessen Historie bis ins Jahr 1989 zurück zu verfolgen ist. Besondere Popularität hat die GPL dadurch erhalten, dass große Teile des Linux- Betriebssystemkerns auf diese Lizenz zurückgreifen. 58 Die GPL zählt zu den Lizenzen mit strengem Copyleft. 59 Diese umfasst die Rechte die Software lizenzgebührenfrei zu verbreiten, zu vervielfältigen, zu verändern sowie zu veröffentlichen. Neben diesen Rechten, beinhaltet die GPL allerdings auch Pflichten. Die wichtigste Pflicht betrifft das Copyleft und die Verpflichtung bei Änderungen an unter GPL gestellter Software, diese ebenfalls unter die GPL zu stellen und somit den Quellcode offen zu legen. 60 Im Rahmen von Gesetzen wird bei der GPL die Haftung von Softwareentwicklern ausgeschlossen. 61 Die lizenzgebührenfreie Verbreitung, welche seit der GPL V3 sogar explizit benannt wird 62, bedeutet allerdings nicht, dass überhaupt keine Kosten bei Software unter der GPL anfallen. Beispielsweise können Unternehmen Gebühren für den Vertreib ansetzten. 63 Im Jahr 2007 wurde die 3. Version der GPL, die GPL V3, von der FSF veröffentlicht. Im Vergleich zur 2. Version wurden sowohl rechtliche als auch technische 56 Vgl. Schaaf (2013), S. 17. (zitiert nach: BITKOM (Hrgs.) (2014), S. 11f; Bundesverwaltungsamt (Hrgs.) (2011), S. 55; Gläßer (2004), S. 26). 57 Vgl. Kleijn (2006). 58 Vgl. Jaeger et al. (2005), S Vgl. Jaeger / Metzger (2011), S Vgl. Jaeger et al. (2005), S Vgl. Schaaf (2013), S. 35. (zitiert nach: Hennig (2009), S. 20; Jaeger et al. (2005), S. 15; Jaeger / Metzger (2011), S ). 62 Vgl. Schaaf (2013), S. 57. (zitiert nach: Free Software Foundation (Hrgs.) (2007)). 63 Vgl. Jaeger et al. (2005), S. 15. Copyright by Institut für angewandte Forschung it.eu 14/25 </p>
<p> 16 Neuerungen umgesetzt, ebenso wie eine bessere internationale Anwendung. Bisher wird diese Version jedoch weniger häufig genutzt als die Version Ein Unterschied zwischen GPL V2 und GPL V3 liegt auch in der Begriffsbestimmung. Während in V2 keine Definitionen geliefert wurden, sind in der GPL V3 in Ziffer 0 Begriffsdefinitionen enthalten. Es wird beispielsweise zwischen propagate und convey unterschieden. Während propagate die Nutzung, also das einfache Ausführen der Software ohne Lizenzpflichten beschreibt, wird unter convey auch die Übertragung an weitere Personen verstanden, hierbei entstehen für den Nutzer allerdings weitere Pflichten. 65 Bei genauerer Beleuchtung der GPL ist festzustellen, dass in Ziffer 1 bereits dem Nutzer das Recht eingeräumt wird unveränderte Kopien herzustellen und zu vertreiben. In Ziffer 2 wird anschießend auch das Recht auf Änderung des Quelltextes eingeräumt 66, in GPL V3 wird dieses Recht sogar unwiderruflich eingeräumt. Durch Ziffer 7 ist es bei der GPL V3 möglich weitere Bedingungen zum Vertrieb zu ergänzen. 67 Es wird deutlich, dass die GPL für den internationalen und nicht explizit für den deutschen Markt entwickelt wurde, da auch auf die Übernahme der Rechte bei der Unternehmensnachfolge eingegangen wird. In Deutschland ist dieses durch 34 Abs. 3 Satz 1 UrhG bereits geregelt, und müsste so nicht in der GPL erwähnt werden. 68 Zu den Pflichten gehört, dass der Lizenztext immer mitgeliefert werden muss. Dieses ist entweder als gedruckte Form oder als Datei möglich, ein Verweis auf eine Website ist allerdings nicht ausreichend. 69 Ebenfalls muss der Erwerber immer an den Quelltext gelangen. Seit der GPL V3 muss dieser nicht mehr mitgeliefert werden oder ein Angebot zur Lieferung gegeben werden, sondern es reicht die Möglichkeit des kostenlosen Downloads aus. 70 Der Copyright- bzw. Urhebervermerk Rechte Pflichten 64 Vgl. Jaeger / Metzger (2011), S Vgl. Jaeger / Metzger (2011), S. 52f. 66 Vgl. Jaeger / Metzger (2011), S Vgl. Schaaf (2013), S. 51. (zitiert nach: Free Software Foundation (Hrgs.) (2007); Jaeger / Metzger (2011), S. 53f). 68 Vgl. Schaaf (2013), S. 51. (zitiert nach: Jaeger / Metzger (2011), S. 54; 34 UrhG). 69 Vgl. Jaeger / Metzger (2011), S Vgl. Jaeger et al. (2005), S. 16f. Copyright by Institut für angewandte Forschung it.eu 15/25 </p>
<p> 17 muss bei der Verbreitung von Software mit veröffentlicht werden, wobei vorhandene Vermerke nicht verändert werden dürfen. 71 Bei Veränderungen muss immer ein Hinweis auf diese Modifikation mit Änderungsdatum gegeben werden. Hierbei muss die genaue Veränderung ersichtlich sein. Der Urheber muss seinen Namen dabei aber nicht veröffentlichen, sodass es auch möglich ist anonym zu bleiben. 72 Eine weitere Pflicht besteht darin, dass der unveränderte Haftungsausschluss erkennbar angebracht werden muss. Diese Klausel ist in Deutschland allerdings nicht wirksam. 73 Seit der GPL V3 können in Ziffer 7 weitere Pflichten ergänzt werden 74, in GPL V2 war es unterdessen noch untersagt zusätzliche Beschränkungen zu erteilen. 75 Ebenfalls kann der Lizenzgeber von Pflichten befreien und eine Liste mit Beschränkungen ergänzen GNU Lesser General Public License Nach der GPL ist die am zweit häufigsten genutzte Lizenz die LGPL mit 12,5% Anteil an den über Projekten des OS Hosters sourceforce. 77 Die LGPL wurde speziell für Bibliotheksprogramme entwickelt und stellt eine abgeschwächte Form der GPL dar, um Programme auch mit proprietären Programmen verknüpfen zu können. Aus diesem Grunde wurde die LGPL auch zunächst unter dem Namen Libary General Public License geführt. Da von der FSF seit einiger Zeit allerdings auch für Bibliotheken die GPL empfohlen wird, wurde diese in Lesser General Public License geändert Vgl. Jaeger / Metzger (2011), S. 32f. 72 Vgl. Jaeger / Metzger (2011), S Vgl. Jaeger et al. (2005), S Vgl. Jaeger / Metzger (2011), S. 54f. 75 Vgl. Jaeger / Metzger (2011), S Vgl. Jaeger / Metzger (2011), S. 58f. 77 Vgl. Kleijn (2006). 78 Vgl. Jaeger et al. (2005), S. 3f. Copyright by Institut für angewandte Forschung it.eu 16/25 </p>
<p> 18 Im Zuge der Veröffentlichung der aktuellen Version GPL V3 wurde auch die LGPL Version angepasst wurde die LGPL V3 herausgebracht und ist als Eingrenzung der GPL V3 zu verstehen. Es werden explizit nur die Ausnahmen zur GPL V3 beleuchtet, nicht aber die Gemeinsamkeiten. 79 In Anlehnung an die GPL V2 sind auch in der LGPL V2.1 ähnliche Rechte verbunden. Während in Ziffer 1 die Verbreitung und Herstellung der Software festgehalten wird, befasst sich Ziffer 2 konkret mit dem Kopieren und Verändern der Bibliotheken. In Ziffer 3 wird noch auf die Kompatibilität zur GPL eingegangen und in Ziffer 4 auf die Verbreitung vom Objektcode. 80 Bei der LGPL wird unterschieden zwischen Änderungen an der Bibliothek sowie Änderungen an auf die Bibliothek zugreifende Software. Während bei Änderungen an der Bibliothek quasi das strenge Copyleft greift, findet bei Änderungen an Software die auf die Bibliothek zugreift nur das eingeschränkte Copyleft Anwendung. 81 Insgesamt ist festzuhalten, dass die LGPL V3 die Pflichten im Vergleich zur GPL V3 reduziert, sodass die Softwarebibliothek auch mit Software verwendet werden kann, die als proprietäre Software gilt Berkeley Software Distrubution License Die Universität von Kalifornien in Berkeley hat eine Lizenz definiert und diese zunächst für die Distribution eines UNIX- basierten Betriebssystems verwendet. Mittlerweile wird dieser Lizenztyp allgemein genutzt. Zurzeit sind nur acht Prozent der OSS- Projekte mit einer BSD veröffentlicht 83, obwohl der Vorteil besonders für private Entwickler in dem kurzen und verständlichen Lizenztext liegt Vgl. Jaeger / Metzger (2011), S. 78, Vgl. Jaeger / Metzger (2011), S. 78f. 81 Vgl. Jaeger / Metzger (2011), S. 80f. 82 Vgl. Jaeger / Metzger (2011), S Vgl. Kleijn (2006). 84 Vgl. Schaaf (2013), S 61. Copyright by Institut für angewandte Forschung it.eu 17/25 </p>
<p> 19 Die BSD genehmigt einem Dritten das Programm zu kopieren und zu verändern. Hierbei muss allerdings der Copyright- Vermerk des ursprünglichen Programms beibehalten werden 85, die weiterentwickelte Software kann allerdings auch kommerziell vertrieben werden. 86 Auch bei der BSD gibt es Pflichten des Lizenznehmers. Es muss beispielsweise bei Weitergabe der Lizenztext mitgeliefert werden, allerdings ist dieses beim Quellcode nicht zwangsläufig notwendig. Ebenfalls muss es einen Hinweis auf alle am Programm beteiligten Entwickler geben. 87 Auch wird bei der BSD deutlich, dass auch diese Lizenz nicht explizit für Deutschland geschrieben ist, da z. B. auch das Ausführen der Software in der BSD geregelt ist. Aufgrund des 69d UrhG wäre dieses in Deutschland allerdings notwendig. 88 In der Urfassung der BSD war die Pflicht verankert, dass ein Hinweis auf die Universität Berkeley gegeben werden musste. Aufgrund von Schwierigkeiten wurde diese Pflicht allerdings in aktuellen Fassungen der BSD nicht mehr mit aufgenommen. Ziffer 1 besagt, dass sowohl der Urhebervermerk, die Lizenzbestimmungen sowie der Haftungs- und Gewährleistungsausschluss jeweils mit verbreitet werden müssen. 89 Rechte Pflichten 3.4 Mozilla Public License Die MPL zählt zu den Lizenzen mit eingeschränktem Copyleft. Hierbei müssen Änderungen in der bestehenden Software weiterhin mit der MPL lizenziert werden, während bei neu hinzugefügten Dateien keine Vorgabe für die verwendete Lizenz gemacht wird. Durch dieses eingeschränkte Copyleft ist es möglich Softwarebestandteile mit verschiedenen Lizenzen zu kombinieren. 90 Die MPL ist sowohl eine OSS, 85 Vgl. Wind (2012), S Vgl. Hüttenegger (2006), S Vgl. Schaaf (2013), S. 38. (zitiert nach: Gläßer (2004), S. 30; Jaeger et al. (2005), S. 2; Krumbein (2004), S. 43; Laurent (2004), S. 14, 16; Wichmann (2005), S. 6). 88 Vgl. Jaeger / Metzger (2011), S Vgl. Jaeger / Metzger (2011), S. 84f. 90 Vgl. Jaeger et al. (2005), S. 3. Copyright by Institut für angewandte Forschung it.eu 18/25 </p>
<p> 20 als auch eine Freeware. 91 Rechtlich ist die MPL der LGPL sehr ähnlich, unterscheidet aber z. B. zwischen Werk- und Dateiderivaten. Während Werkderivate Funktionen aufrufen, sind Dateiderivate Änderungen an Dateien. Bei Dateiderivaten schreibt die MPL vor, dass Änderungen weiterhin unter der MPL lizenziert werden. Änderungen an Werkderivaten können auch unter einer anderen Lizenz stehen Artistic License Sowohl die OSI als auch die FSF haben die Artistic License 93 als OS anerkannt und lizenziert. 94 Die AL gibt dem Nutzer das Recht zur Vervielfältigung sowie Verbreitung in jeglicher Vertriebsform. Die Möglichkeiten und Rechte beim Vertrieb sowie bei Modifikationen werden in Ziffer 2 und 3 beleuchtet. Das Verbreiten des Binärcodes wird in Ziffer 4 und 8 geregelt. Besondere Bedeutung der AL hat Ziffer 5. Hierbei wird festgelegt, dass eine angemessene Gebühr sowohl für Dienstleistungen als auch für das alleinige Kopieren verlangt werden kann. Ebenfalls ist es möglich Software mit der AL auch mit Software zu verkaufen, die unter einer anderen Lizenz geführt wird. Hierfür wird in Ziffer 6 und 7 die proprietäre Verwendung und dessen Einbindung erläutert. Die AL unterscheidet die Pflichten nach Umfang der jeweiligen Modifikationen, z. B. bei einer geringen Modifikation besteht nur die Pflicht der Fehlerbeseitigung. In Ziffer 1 und 2 wird auch hier auf den Urhebervermerk und den Haftungsausschluss eingegangen. Im Unterschied zu einigen anderen Lizenzarten muss bei der AL der Lizenztext nicht mitgeliefert werden. 95 Zu beachten ist, dass bei veränderten Versionen ein neuer Name für die Software vergeben werden muss. Allerdings muss das ursprüngliche Programm samt einer Rechte und Pflichten 91 Vgl. Hüttenegger (2006), S Vgl. Schaaf (2013), S. 38. (zitiert nach: Gläßer (2004), S. 31; Spindler (2004), S. 15). 93 Wird im Weiteren mit AL abgekürzt. 94 Vgl. Schaaf (2013), S. 40. (zitiert nach: Gläßer (2004), S. 30; Jaeger / Metzger (2011) S. 93). 95 Vgl. Jaeger / Metzger (2011), S. 90. Copyright by Institut für angewandte Forschung it.eu 19/25 </p>
<p> 21 Beschreibung der gemachten Änderungen mit zur Verfügung gestellt werden Fazit Es gibt eine Vielzahl von OS- Lizenzen, wovon allerdings lange nicht alle von der FSF oder OSI anerkannt sind. 97 In über 90% wird auf die vier größten Lizenzen zurückgegriffen. Dazu gehört die GPL, LGPL, MPL sowie die BSD. 98 Die folgende Übersicht soll einmal die Unterschiede dieser fünf Lizenzmodelle verdeutlichen: Zusammenfassung Vergleich Kriterium GPL LGPL BSD MPL AL Offener Quellcode Verbindung mit proprietärer Software Weiter- entwicklung als proprietäre Software Spezielle Privilegien für den ursprünglichen Copyrightinhaber Darstellung 4: Vergleich Open Source- Lizenzen 99 Welches die vorteilhafteste Lizenz ist, kann nicht eindeutig bestimmt werden. Es kommt auf die Wünsche, Pläne und Ziele des jeweiligen Unternehmens an. Für die reine Ausführung der einzelnen Software ist die Wahl der Lizenz irrelevant. Sind allerdings Anpassungen an Unternehmensbedürfnisse vorgesehen, sollte sich das Unternehmen genauer mit der jeweiligen Lizenz beschäftigten. Auch strategische Ziele Ergebnis 96 Vgl. Schaaf (2013), S. 62. (zitiert nach: Jaeger et al. (2005), S. 91f; Perl Foundation (Hrgs.) (o.j.)). 97 Vgl. Schaaf (2013), S Vgl. Kleijn (2006). 99 Modifiziert entnommen aus: Brügge et al. (2004), S. 23 (in Anlehnung an: Perens (1999)). Copyright by Institut für angewandte Forschung it.eu 20/25 </p>
<p> 22 sollten bei der Entscheidung mit berücksichtigt werden, damit z. B. eine Verbindung mit proprietärer Software bei Bedarf möglich ist. Bereits seit den 1990er Jahren nutzen immer mehr Unternehmen die Vorteile von OSS, wobei diese auf mehr als 200 verschiedene OS- Lizenzen zurückgreifen. U. a. lässt sich die schnelle Zunahme von OSS auf die Verbreitung von Linux zurückführen. Allerdings ist die künftige Entwicklung des Software- Marktes offen und ungewiss. Sollte sich Linux gegen Betriebssysteme wie z. B. Apple und Windows durchsetzen, kann dieses auch zu einer noch höheren Akzeptanz von OSS in der Unternehmenspraxis führen. Auch der weitere technische Fortschritt ist nicht abzusehen und lässt damit die Entwicklung ungewiss erscheinen. Aus diesen Gründen wäre es interessant zu untersuchen, ob sich die OSS gegen die proprietärer Software durchsetzen und diese verdrängen kann. Ebenfalls könnte herausgearbeitet werden, in welchen Bereichen des Marktes sich die OSS besonders behaupten kann, was wiederum das Potenzial von OSS wiederspiegelt. Ob der Software- Markt ausschließlich mit OSS denkbar wäre ist eine weitere interessante Frage, welcher auf den Grund gegangen werden könnte. Ausblick Copyright by Institut für angewandte Forschung it.eu 21/25 </p>
<p> 23 Literaturverzeichnis BITKOM (Hrgs.) (2005): Leitfaden zur Patentierung computer- implementierter Erfindungen, Berlin. BITKOM (Hrgs.) (2008): Der richtige Umgang mit dem Urheberrecht, Berlin. BITKOM (Hrgs.) (2014): Open Source Software: Rechtsliche Grundlagen und Hinweise, Berlin. Brügge, B. / Harhoff, D. / Picot, A. / Creighton, O. / Fiedler, M. / Henkel, J. (2004): Open- Source- Software - Eine ökonomische und technische Analyse, Berlin Heidelberg. Bundesverwaltungsamt (Hrgs.) (2011): Rechtliche Aspekte der Nutzung, Verbreitung und Weiterentwicklung von Open- Source- Software, o.o.. Bundesverwaltungsamt (Hrgs.) (2014 a): Homepage des Bundesverwaltungsamtes, Online- Quelle: Organisation/Abteilungen/Abteilung_BIT/Leistungen/IT_Beratungsleistungen/CCOSS/02_OSS/03_ Open- Source- Lizenzen/node.html, Abruf am Bundesverwaltungsamt (Hrgs.) (2014 b): Homepages des Bundesverwaltungsamtes, Online- Quelle: IT_Beratungsleistungen/CCOSS/02_OSS/01_Vorteile/node.html, Abruf am Bundesverwaltungsamt (Hrgs.) (2014 c): Homepage des Bundesverwaltungsamtes, Online- Quelle: istungen/ccoss/02_oss/02_nachteile/node.html;jsessionid=ff adf, Abruf am Diedrich, O. (2009 a): Homepages des Heise Zeitschriften Verlages, Online- Quelle: Open- Source html, Abruf am Diedrich, O. (2009 b): Homepages des Heise Zeitschriften Verlages, Online- Quelle: fuer- den- Open- Source- Einsatz html?view=zoom;zoom=12, Abruf am Diedrich, O. (2009 c): Homepages des Heise Zeitschriften Verlages, Online- Quelle: html, Abruf am Copyright by Institut für angewandte Forschung it.eu 22/25 </p>
<p> 24 Ellmer, B. (2008): Die Entwicklung von Open Source Software (OSS), Norderstedt. Evers, S. (2008): Ein Modell der Open- Source- Entwicklung, Berlin. Free Software Foundation (Hrgs.) (2007): Homepage der Free Software Foundation, Online- Quelle: 3.0, Abruf am Free Software Foundation (Hrgs.) (2014 a): Homepage der GNU, Online- Quelle: software- for- freedom.de.html #relation ship, Abruf am Free Software Foundation (Hrgs.) (2014 b): Homepage der GNU, Online- Quelle: Abruf am Free Software Foundation (Hrgs.) (2014 c): Homepage der GNU, Online- Quelle: sw.html, Abruf am Gabler Wirtschaftslexikon (Hrgs.) (2014): Wirtschaftslexikon Gabler, Online- Quelle: source. html, Abruf am Gläßer, L. (2004): Open- Source- Software, Erlangen. Grassmuck, V. (2004): Freie Software - Zwischen Privat- und Gemeineigentum, Bonn. Groll, T. (2012): 1x1 des Lizenzmanagements: Praxisleitfaden für Lizenzmanager, München. Helmreich, M. / Riehle, D. (2012): Geschäftsrisiken und Governance von Open Source in Softwareprodukten, in: Strahringer, S. (Hrgs.), Open Source - Konzepte, Risiken, Trends, Heidelberg, S Hennig, S. (2009): Open Source- Software für mittelständische Unternehmen, Hamburg. Hüttenegger, G. (2006): Open Source Knowledge Management, Berlin Heidelberg. Institut für Rechtsfragen der Freien und Open Source Software (Hrgs.) (2014 a): Homepage des Institut für Rechtsfragen der Freien und Open Source Software (ifross), Online- Quelle: proprietaere- software- bzw- closed- source- software, Abruf am Copyright by Institut für angewandte Forschung it.eu 23/25 </p>
<p> 25 Institut für Rechtsfragen der Freien und Open Source Software (Hrgs.) (2014 b): Homepage des Institut für Rechtsfragen der Freien und Open Source Software (ifross), Online- Quelle: center, Abruf am Jaeger, T. / Koglin, O. / Kreutzer, T. / Metzger, A. / Schulz, C. (2005): Die GPL kommentiert und erklärt, Köln. Jaeger, T. / Metzger, A. (2011): Open Source Software, München. Kleijn, A. (2006): Homepages des Heise Zeitschriften Verlages, Online- Quelle: Source- Lizenzen html, Abruf am Krumbein, T. (2004): Open Source einsetzen und integrieren, Bonn. Laurent, A. (2004): Understanding Open Source and Free Software Licensing, Sebastopol. Maaß, C. (2008): Zur Bedeutung des Urheber- und Patentrechts in der quelloffenen Softwareentwicklung, in: Asche, M. / Bauhus, W. / Mitschke, E. / Seel, B. (Hrgs.): Open Source - Kommerzialisierungsmöglichkeiten und Chancen für die Zusammenarbeit von Hochschulen und Universitäten, Münster 2008, S Open Source Initivative (Hrgs.) (2014 a): Homepage der Open Source Initivative, Online- Quelle: Abruf am Open Source Initivative (Hrgs.) (2014 b): Homepage der Open Source Initivative, Online- Quelle: Abruf am Perens, B. (1999): The open source definition, in: DiBona, C. / Ockman, S. / Stone, M. (Hrgs.): Opensources: Voices from the open source revolution, O'Reilly 1999, S Perl Foundation (Hrgs.) (2014): Homepage der Perl Foundation, Online- Quelle: Abruf am Ploch, D. / Stewin, P. / Koch, R. (2002): Einführung in Open Source Software - Skript im Rahmen der Lehrveranstaltung Information Rules 1 Copyright by Institut für angewandte Forschung it.eu 24/25 </p>
<p> 26 RECO (Regionalcentrum für Electronic Commerce Anwendungen Osnabrück) (Hrgs.) (2010): Leitfaden ERP- Lösungen auf Basis Freier Software - Für kleine und mittlere Unternehmen und Handwerksbetriebe - Teil 1 Marktübersicht und Testberichte Lx- Office und openerp, Osnabrück. Renner, T. / Vetter, M. / Rex, S. / Kett, H. (2005): Open Source Software: Einsatzpotenziale und Wirtschaftlichkeit, Stuttgart. Ronneburg, F. (2014): Debian GNU/ Linux Anwenderhandbuch, Online- Quelle: Abruf am Saleck, T. (2005): Chefsache Open Source - Kostenvorteile und Unabhängigkeit durch Open Source, Wiesbaden. Schaaf, A. (2013): Open- Source- Lizenzen - Untersuchung der GPL, LGPL, BSD und Artistic License, Hamburg. Silberfeld, S. (2014): Homepage von Priv. Doz. Dr. Stefan Weber, Online- Quelle: content/uploads/2011/06/ Silberfeld_Free_Software.pdf, Abruf am Spindler, G. (2004): Rechtsfragen bei Open Source, Köln. Steinbring, M. / Hampel, T. (2008): Connecting Babbling Bazaars - Der Open- Source- Gedanke im Wandel zum offenen Service, in: Asche, M.; Bauhus, W. / Mitschke, E. / Seel, B. (Hrgs.) Open Source - Kommerzialisierungsmöglichkeiten und Chancen für die Zusammenarbeit von Hochschulen und Unternehmen, Münster 2008, S Strahringer, S. (Hrgs.) (2012): Open Source - Konzepte, Risiken, Trends, Heidelberg. Teupen, C. (2007): "Copyleft" im deutschen Urheberrecht, Berlin. Urhebergesetz (UrhG): in der Fassung vom 9. September 1965 (BGBI. I S. 1273), das zuletzt durch Artikel 2 Absatz 53 des Gesetzes vom 22. Dezember 2011 (BGBI. I S. 3044) geändert worden ist. Wichmann, T. (2005): Linux- und Open- Source- Strategien, Berlin. Wind, S. (2012): Cloud Management mit Open- Source- Plattformen, in: Stahringer, S. (Hrgs.), Open Source - Konzepte, Risiken, Trends, Heidelberg, S Copyright by Institut für angewandte Forschung it.eu 25/25 </p>
<p> Open Source Software Workshop : Open Source Software 3. Mannheimer Fachtag Medien 23.10.07 Referent : Christopher Wieser (www.opso-it.de) Open Source Software Ablauf Einführung in die Begriffe Open Source, </p>
<p> 02. Februar 2016 Softwarelizenzen und Open Source Juristisches IT-Projektmanagement Vortrag von Michael Woborschil Inhalt 1. Einführung 2. Lizenzen allgemein 3. Open Source 4. Copyleft 4. Beispiele für </p>
<p> FreieSoftwareOG Creative Commons und freie Lizenzen- Ein kurzer Überblick Was bedeutet Creative Commons? Creative Commons ist nicht der Name einer Lizenz Creative Commons ist eine gemeinnützige Organisation, </p>
<p> LibreOffice Konferenz vom 3. September 2014 Professional User Track LibreOffice vs. Apache OpenOffice technische, organisatorische und rechtliche Unterschiede Dr. Wolfgang Straub, Deutsch Wyss & Partner </p>
<p> Open Source in der Unternehmenspraxis Walter Klausberger 25.09.2014 AWS 1 Open Source Definition Software wird als quelloffen (= open source) bezeichnet, wenn ihre Lizenzbedingungen einer der von der Open </p>
<p> Open Source professionell einsetzen 1 Mein Background Ich bin überzeugt von Open Source. Ich verwende fast nur Open Source privat und beruflich. Ich arbeite seit mehr als 10 Jahren mit Linux und Open Source. </p>
<p> future network Open Source Management Forum 3. Dezember 2009 OPEN SOURCE SOFTWARE Ausgewählte Rechtsfragen andréewitch & simon, Wien 1 - OPEN SOURCE MODELLE bedeutet:! Verfügbarkeit des Quellcodes! keine </p>
<p> Freie und Quelloffene Softwarelizenzen im Vergleich Themen Geschichte Idee der Freien und Quelloffenen Software Gesetzeslage in Deutschland Institute Definition von freier Software Definition von quelloffener </p>
<p> Was ist Open Source Software und wem gehört sie? Vortrag am 24. April 2012 im Rahmen der LPI Partnertagung in Kassel Referentin: Sabine Sobola. Rechtsanwältin. Lehrbeauftragte für IT-Recht, Urheber- und </p>
<p> Open Content-Lizenzen für digitale Lernmaterialien von RA Dr. Till Jaeger Integriertes Wissensmanagement an Hochschulen, Hagen, 22. Februar 2007 Agenda 1. Was ist Open Content, Open Access? 2. Das Open </p>
<p> Open Source SIK OSS Forum Rechtliche Fragestellungen bei Freigabe von Open Source Software, 7. Mai 2014 Inhalt Freigabe von Open Source Software mit Open Source Lizenz erteilte Nutzungsbefugnisse Pflichten </p>
<p> IT-Projekt Wirtschaftsinformatik Kursleitung: Dr. Stefan Schiffer Zusammenfassung der Umfrage zu Open Commons Gahleitner David Huber Herbert Pramesberger Christian Stand 27.06.2011 Seite 1 Ziel und Ergebnis </p>
<p> Sabine Nuss: Copyright & Copyriot Aneignungskonflikte um geistiges Eigentum im informationellen Kapitalismus (S. 74 88) Dominik Paulus Hochschule Darmstadt Fachbereich Informatik Informatik und Gesellschaft </p>
<p> Georg August Universität Göttingen Lehrstuhl Prof. Dr. Spindler 1. Juli 2004 1 kurze Wiederholung der Ergebnisse der Seminararbeit Lösungsansatz: rechtlich angepasste Lizenzen 2 3 1 kurze Wiederholung </p>
<p> Freie Software und Open Source Software Seminar Wissen in der modernen Gesellschaft im SS 2009 bei Prof. Dr. Hans-Gert Gräbe Universität Leipzig Referent: Alexander Lust 1 Freie Software oder Open-Source-Software? </p>
<p> 1 1. Urheberrecht beachten Tauschbörsen - Millionen von Usern verwenden täglich Programme wie Kazaa, Limewire oder BitTorrent, um Musik, Videos, Texte oder Software vom Internet herunterzuladen oder zu </p>
<p> Urheberrechtsschutz von Filemaker- Anwendungen RA Christoph Kluss RAe Haaß & Kluss Martorffstr. 5 D 60320 Frankfurt am Main Tel.: +49 69 562095 lawoffice@t-online.de Was ist ein Urheberrecht? Voraussetzung </p>
<p> Roboter programmieren mit NXC für Lego Mindstorms NXT 1. Auflage Roboter programmieren mit NXC für Lego Mindstorms NXT schnell und portofrei erhältlich bei beck-shop.de DIE FACHBUCHHANDLUNG mitp/bhv Verlag </p>
<p> Nutzung von Open Source Software in proprietären Softwareprojekten - eine Analyse aus urheberrechtlicher Sicht Roman Heidinger Abteilung für Informationsrecht und Immaterialgüterrecht, Wirtschaftsuniversität </p>
<p> HintergrÜnde zur Urheberrechtsabgabe. rechnen sie mit uns. Sehr geehrter Geschäftspartner, aufgrund vieler Anfragen und diverser Diskussionen im Markt über die neu erhobene Urheberrechtsabgabe auf Drucker </p>
<p> Open Source Eine kleine Geschichte zum Konzept der freien Software Open Source Definition (1) Freie Weitergabe Die Lizenz darf niemanden darin hindern, die Software zu verkaufen oder sie mit anderer Software </p>
<p> Lizenzierung von System Center 2012 Mit den Microsoft System Center-Produkten lassen sich Endgeräte wie Server, Clients und mobile Geräte mit unterschiedlichen Betriebssystemen verwalten. Verwalten im </p>
<p> Freie Software und ihre Unentbehrlichkeit in der modernen Informationsgesellschaft Torsten Grote Free Software Foundation Europe 10.10.2009 Gliederung 1. Was ist Software und wieso </p>
<p> Rechtliche Aspekte bei der kommerziellen Nutzung von Open Content von RA Dr. Till Jaeger FAZIT-Fachtagung "Open Content Open Access", Stuttgart, 9. Juni 2008 Agenda 1. Nutzungsbefugnisse aus Open Content </p>
<p> Institut für Translationswissenschaft Aufbau Aktuelles Aktuelles Projekt Spezialforschungsbereich (SFB) Deutsch in Österreich Kick-Off-Veranstaltung 14. Jänner 2016, 18:00 Großer Festsaal, Universität </p>
<p> OPEN SOURCE Präsentation von Katharina Boll und Janine Vorfeld Gliederung 1. Definition von Open Source 2. Geschichtlicher Entwicklung 3. Die Open Source-Initiative (OSI) 4. Forderungen der OSI 5. Das </p>
<p> Free League Script Version 5 STABLE 21.10.2010 1. Allgemein 1.1 Vorwort 1.2 Systemvorrausetzungen 1.3 Installation 2. Support 2.1 Allgemeine Supportanfragen 2.2 Kontakt Informationen 3. Lizenz/Rechtliches </p>
<p> Das Persönliche Budget in verständlicher Sprache Das Persönliche Budget mehr Selbstbestimmung, mehr Selbstständigkeit, mehr Selbstbewusstsein! Dieser Text soll den behinderten Menschen in Westfalen-Lippe, </p>
<p> Wissensmanagement mit Neuen Medien Übung Geltungsbereich im Internet Grundsätzlich gilt für das Internet deutsches (Bundes-)Recht im Hoheitsgebiet der Bundesrepublik Deutschland. Dies ergibt sich aus dem </p>
<p> Bedingungen für die Überlassung von Freeware-Software-Produkten von HIPPSOFT c 2012 HIPPSOFT Inhaltsverzeichnis Hinweis II 1 Vertragsbedingungen 1 1.1 Gegenstand des Vertrages............................. </p>
<p> Band 2 herausgegeben von Stefan Haupt Stefan Haupt Urheberrecht in der Schule Was Lehrer, Eltern, Schüler, Medienzentren und Schulbehörden vom Urheberrecht wissen sollten 2., überarbeitete Auflage Verlag </p>
<p> Stand: 28.11.2006»EIDAMO Screenshots«- Bildschirmansichten des EIDAMO Managers Systemarchitektur Die aktuelle EIDAMO Version besteht aus unterschiedlichen Programmteilen (Komponenten). Grundsätzlich wird </p>
<p> Ein Open-Source-Projekt im Überblick 1 Gliederung Gliederung 1. FileZilla 2. Funktionen & Vorteile 3. Versionen 4. Technische Details 5. Lizenz 6. Geschichte & Entwicklerteam 7. filezilla-project.org 8. </p>
<p> crm-now/ps Webforms Webdesigner Handbuch Erste Ausgabe crm-now/ps Webforms: Webdesigner Handbuch Copyright 2006 crm-now Versionsgeschichte Version 01 2006-08-21 Release Version crm-now c/o im-netz Neue </p>
<p> Internet- und Urheberrecht Von den Verwertungsrechten, dem Vervielfältigungsrecht und dem Recht der öffentlichen Zugänglichmachung bis zum elearning Gabriele Beger, SUB Hamburg Informations- und Urheberrecht </p>
<p> Freie Software Karin Kosina Free Software Foundation Europe kyrah@fsfeurope.org Was ist Freie Software? Was ist Freie Software? Frei steht für Freiheit, nicht für gratis. Freie Software ist Software, die </p>
<p> Open Source Software als rechtliches Konzept Mit einem Seitenblick auf die Sonderregelung des URG für Schulen Dr. Christian Laux, LL.M. 1 Urheberrecht Was ist geschützt? Werke der Literatur und Kunst Schutzvoraussetzung: </p>
<p> Die Open Source -Bewegung Christian Klauer 1. Was ist Open Source? (Das GNU-Projekt) GNU: o Abkürzung für: GNU s Not Unix o Das erste mal 1989 von Richard Stallman erwähnt o Betriebssystem, welches vollkommen </p>
<p> Tag des Datenschutzes Datenschutz und Software: Vertrauen ist gut, Kontrolle ist besser Dr. Michael Stehmann Zur Person Rechtsanwalt Dr. Michael Stehmann Studium der Rechtswissenschaft an der Universität </p>
<p> Die Internetseite des LSW Deutschland e.v. hat ein neues Gesicht bekommen. Ab dem 01.01.2012 ist sie in Form eines Content Management Systems (CMS) im Netz. Einleitung: Die Grundlage für die Neuprogrammierung </p>
<p> ITMAGAZINE «Open Source» ist nicht «Open Right» 30. November 2009 - Urheber von Open-Source-Software legen zwar deren Quelltext offen, verlangen aber in der Regel die Einhaltung von Lizenzbedingungen. </p>
<p> Herzlich willkommen! SIEVERS-SNC - IT mit Zukunft. Stärken von Standard ERP- Systemen am Beispiel Microsoft Dynamics NAV Marco Naber SIEVERS-SNC GmbH & Co. KG Computer & Software IT mit Zukunft: Systeme. </p>
<p> Informationen zu Microsoft Lizenzen für Mitarbeiter/innen an der TU Graz Hinweise zur Rechtsverbindlichkeit der Informationen Die Informationen in diesem Dokument sind Hinweise, die das Verständnis hinsichtlich </p>
<p> Die Pattern Design Online Datenbank bietet seinen Kunden rapportierte Musterdesigns in drei verschiedenen Lizenzen an: UNLIMITED License EXCLUSIVE License o EXCLUSIVE limited License o EXCLUSIVE unlimited </p>
<p> M erkblatt D i e n s t e D r i t t e r a u f We b s i t e s 1 Einleitung Öffentliche Organe integrieren oftmals im Internet angebotene Dienste und Anwendungen in ihre eigenen Websites. Beispiele: Eine </p>
<p> Covermount-Rahmenvertrag zwischen Microsoft Deutschland GmbH, Konrad-Zuse-Straße 1, 85716 Unterschleißheim - nachfolgend Microsoft - und - nachfolgend Publisher - 1 Vertragsgegenstand </p>
<p> 21. Chaos Communications Congress, 27.-29. Dezember 2004, Berlin GPL für Anfänger Über Copyright, Lizenzen und den Schutz geistigen Eigentums Hubert Feyrer 9. Dezember 2004 Zusammenfassung </p>
<p> Orville Bennett Übersetzung: Thomas Bögel 2 Inhaltsverzeichnis 1 Einführung 5 2 KNetAttach verwenden 6 2.1 Hinzufügen von Netzwerkordnern............................ 6 3 Rundgang durch KNetAttach 8 4 Danksagungen </p>
<p> Medienrecht Datenschutz Urheberrecht Problemaufriss/Gefahrenlage Unterscheidung Printmedium Internet Gefahren im Internet ungleich höher Datenschutz Personenbezogene Daten Betrifft Mitarbeiter, Gemeindemitglied, </p>
<p> Ihre Lösung zur automatisierten Client-Bereitstellung Die automatisierte Verteilung von Software und die Paketierung von Anwendungen werden in Unternehmen nach wie vor sehr unterschiedlich gehandhabt. </p>
<p> Anleitung zum Computercheck Windows Firewall aktivieren oder eine kostenlose Firewall installieren Ziel der Anleitung Sie möchten ein modernes Firewallprogramm für Ihren Computer installieren, um gegen </p>
<p> Windows 8 Lizenzierung in Szenarien Windows Desktop-Betriebssysteme kommen in unterschiedlichen Szenarien im Unternehmen zum Einsatz. Die Mitarbeiter arbeiten an Unternehmensgeräten oder bringen eigene </p>
<p> E-Government-Standards Seite 1 von 9 ech-0199: ech- Beilage zu Hilfsmittel Cloud Referenzarchitektur für Anwender Name Standard-Nummer Kategorie Reifegrad Beilage zu Hilfsmittel Cloud Referenzarchitekur </p>
<p> Laden! Ausgabe 1 2008 Nokia. Alle Rechte vorbehalten. Nokia, Nokia Connecting People und Nseries sind Marken oder eingetragene Marken der Nokia Corporation. Nokia tune ist eine Tonmarke der Nokia Corporation. </p>
<p> Anleitung für die Registrierung und das Einstellen von Angeboten Das FRROOTS Logo zeigt Ihnen in den Abbildungen die wichtigsten Tipps und Klicks. 1. Aufrufen der Seite Rufen Sie zunächst in Ihrem Browser </p>
<p> Arbeitsgruppe Rechtsrahmen des Cloud Computing Jahreskongress Trusted Cloud Berlin, 3. Juni 2014 Die Arbeitsgruppe Rechtsrahmen des Cloud Computing Teil des Kompetenzzentrums Trusted Cloud Ziel: Entwicklung </p>
<p> Nutzungshinweise (1) Haftungsbeschränkung Inhalte dieser Website Die Inhalte dieser Website werden mit größtmöglicher Sorgfalt erstellt. Der Anbieter übernimmt jedoch keine Haftung für die Richtigkeit, </p>
<p> TeleTrusT Bundesverband IT-Sicherheit e.v. Infrastruktur: Vertrauen herstellen, Zertifikate finden Allgemeines zur TeleTrusT EBCA Seit 2001 Zusammenschluss einzelner, gleichberechtigter n zu -Verbund einfacher, </p>
<p> SANDBOXIE konfigurieren für Webbrowser und E-Mail-Programme Dies ist eine kurze Anleitung für die grundlegenden folgender Programme: Webbrowser: Internet Explorer, Mozilla Firefox und Opera E-Mail-Programme: </p>
<p> EasyWk DAS Schwimmwettkampfprogramm Arbeiten mit OMEGA ARES 21 EasyWk - DAS Schwimmwettkampfprogramm 1 Einleitung Diese Präsentation dient zur Darstellung der Zusammenarbeit zwischen EasyWk und der Zeitmessanlage </p>
<p> Analyse zum Thema: Laufzeit von Support-Leistungen für Axel Oppermann Advisor phone: +49 561 506975-24 mobile: +49 151 223 223 00 axel.oppermann@experton-group.com Januar 2010 Inhalt Summary und Key Findings </p>
<p> Kapitel 1 Die Vorbereitung Vorgängerversionen. Bald darauf folgte dann schon die Version 4, die mit einer kleinen Bearbeitung bis vor Kurzem 15 Jahre unverändert gültig war. All das, was du die letzten </p>
<p> 1 / 26 17. Mai 2008 2 / 26 Worum geht s in diesem Vortrag? Freie Software (...und dem Chef) 3 / 26 Freie Software...im Unterschied zu: Freeware (Skype, Acrobat Reader,...) Proprietäre Software Open Source? </p>
<p> Bremer Lizenz für freie Softwarebibliotheken Version 1.0 Präambel Diese Lizenz ist bestimmt, eine freie Nutzung der OSCI-Bibliothek durch jedermann zu ermöglichen. Die OSCI-Bibliothek dient der Implementierung </p>
<p> Sichere Einbindung von Open Source in kommerzielle Projekte Urs Böhm BU Embedded Juli 2014 Noser Engineering AG 2014, Alle Rechte vorbehalten. Disclaimer: Ich bin kein Jurist! Dies ist keine juristische </p>
<p> [do:index] Open Policies Open Policies bezeichnet jene politischen Maßnahmen und Bestimmungen, die darauf abzielen, im öffentlichen Sektor und darüber hinaus digitale Offenheit und Teilhabe zu fördern. </p>
<p> AUTOMATISCHE DATENSICHERUNG AUF EINEN CLOUDSPEICHER Inhalt 1 Einleitung... 1 2 Einrichtung der Aufgabe für die automatische Sicherung... 2 2.1 Die Aufgabenplanung... 2 2.2 Der erste Testlauf... 9 3 Problembehebung... </p>
<p> Berechtigungen im Kalender Anleitung für die Rechtevergabe im Outlook Kalender 2010 FHNW, Services, ICT Windisch, März 2013 Berechtigungen im Kalender 1 1 Gruppen 3 1.1 Die Gruppe/der Benutzer Standard </p>
<p> Beitrag für Bibliothek aktuell Die Lernumgebung des Projekts Informationskompetenz Von Sandra Merten Im Rahmen des Projekts Informationskompetenz wurde ein Musterkurs entwickelt, der den Lehrenden als </p>
<p> Anleitung 1. Monitoring in CrefoDirect Wie kann Monitoring über CrefoDirect bestellt werden? Bestellung von Monitoring beim Auskunftsabruf Beim Auskunftsabruf kann das Monitoring direkt mitbestellt werden. </p>
<p> September 2008 Windows Small Business Server (SBS) 2008 Produktgruppe: Server Windows Small Business Server (SBS) 2008 Lizenzmodell: Microsoft Server Betriebssysteme Serverlizenz Zugriffslizenz () pro </p>
<p> Lizenzierung von Windows Server 2012 Das Lizenzmodell von Windows Server 2012 Datacenter und Standard besteht aus zwei Komponenten: Prozessorlizenzen zur Lizenzierung der Serversoftware und CALs zur Lizenzierung </p>
<p> C A R L V O N O S S I E T Z K Y Agile Vorgehensmodelle in der Softwareentwicklung: Scrum Johannes Diemke Vortrag im Rahmen der Projektgruppe Oldenburger Robot Soccer Team im Wintersemester 2009/2010 Was </p>
<p> Research Note zum Thema: Laufzeit von Support-Leistungen für Axel Oppermann Advisor phone: +49 561 506975-24 mobile: +49 151 223 223 00 axel.oppermann@experton-group.com November 2009 Inhalt 1 EINFÜHRUNG </p>
<p> Lizenzierung von SharePoint Server 2013 Das Lizenzmodell von SharePoint Server 2013 besteht aus zwei Komponenten: Serverlizenzen zur Lizenzierung der Serversoftware und CALs zur Lizenzierung der Zugriffe </p>
<p> Leibniz-Akademie Hannover Wirtschaftsinformatik B. Sc. Praxisreflexion im Bereich Management im SS 2011 Patch-Management Thomas Beer Abgabedatum: 28.03.2011 Anmerkung: Diese Wissenschaftliche Arbeit ist </p>
<p> Wechselbereitschaft von Stromkunden 2014 Bevölkerungsrepräsentative Umfrage vom 09. Januar 2014 PUTZ & PARTNER Unternehmensberatung AG Telefon: +49 (0)40 35 08 14-0 Seite Telefax: 0 +49 (0)40 35 08 14-80 </p>
<p> Guide DynDNS und Portforwarding Allgemein Um Geräte im lokalen Netzwerk von überall aus über das Internet erreichen zu können, kommt man um die Themen Dynamik DNS (kurz DynDNS) und Portweiterleitung(auch </p>
<p> Anwendungsbeispiele Neuerungen in den E-Mails Webling ist ein Produkt der Firma: Inhaltsverzeichnis 1 Neuerungen in den E- Mails 2 Was gibt es neues? 3 E- Mail Designs 4 Bilder in E- Mails einfügen 1 Neuerungen </p>
<p> Einrichten einer Festplatte mit FDISK unter Windows 95/98/98SE/Me Bevor Sie die Platte zum ersten Mal benutzen können, muss sie noch partitioniert und formatiert werden! Vorher zeigt sich die Festplatte </p>
<p> Einfache und effiziente Zusammenarbeit in der Cloud EASY-PM Office Add-Ins Handbuch Inhaltsverzeichnis 1. Einführung... 3 2. Ribbonmenü... 4 3. Dokument... 5 3.1 Öffnen... 5 3.2 Speichern... 6 3.3 Speichern </p>
<p> MICROSOFT DYNAMICS NAV Inhaltsverzeichnis TECHNISCHE INFORMATION: Einleitung... 3 LESSOR LOHN/GEHALT Beschreibung... 3 Prüfung der Ausgleichszeilen... 9 Zurücksetzen der Ausgleichsroutine... 12 Vorgehensweise </p>
<p> Vertrauen in Banken Bevölkerungsrepräsentative Umfrage PUTZ & PARTNER Unternehmensberatung AG Partner der Befragung Telefon: +49 (0)40 35 08 14-0 Gertrudenstraße 2, 20095 Hamburg Telefax: Seite 0 +49 (0)40 </p>
<p> 6 DriveLock und das Windows Sicherheitsproblem mit LNK Dateien CenterTools Software GmbH 2010 Copyright Die in diesen Unterlagen enthaltenen Angaben und Daten, einschließlich URLs und anderen Verweisen </p>
<p> September 2008 Produktgruppe: Server Lizenzmodell: Microsoft Server Server/ Serverlizenz Zugriffslizenz () pro Gerät Zugriffslizenz () pro Nutzer Produktgruppe: Server Lizenzmodell: Microsoft Server Pro </p>
<p> Abamsoft Finos im Zusammenspiel mit shop to date von DATA BECKER Abamsoft Finos in Verbindung mit der Webshopanbindung wurde speziell auf die Shop-Software shop to date von DATA BECKER abgestimmt. Mit </p>
<p> Widerrufsbelehrung Nutzt der Kunde die Leistungen als Verbraucher und hat seinen Auftrag unter Nutzung von sog. Fernkommunikationsmitteln (z. B. Telefon, Telefax, E-Mail, Online-Web-Formular) übermittelt, </p>
<p> PRESSE DOKUMENTATIONS NUTZUNG PDN Lizenzen für Medienbeobachtung EIN SERVICE DES VERBANDES ÖSTERREICHISCHER ZEITUNGEN WAS IST DAS PDN-SYSTEM? Das Presse Dokumentations Nutzungs-System (PDN-System) wurde </p>
<p> Lizenzierung von SharePoint Server 2013 Das Lizenzmodell von SharePoint Server 2013 besteht aus zwei Komponenten: Serverlizenzen zur Lizenzierung der Serversoftware und CALs zur Lizenzierung der Zugriffe </p>
<p> Gebrauchtsoftware Gutes Geschäft oder Finger weg vom Fehlkauf? Jana Semrau, Wiss. Mitarbeiterin am ITM Münster 1 2 Viel versprechende Werbung... Das Geschäftsmodell: 3 Unternehmen kaufen Softwarelizenzen </p>
<p> SharePoint Demonstration Was zeigt die Demonstration? Diese Demonstration soll den modernen Zugriff auf Daten und Informationen veranschaulichen und zeigen welche Vorteile sich dadurch in der Zusammenarbeit </p>
<p> IT Recht Urheberrecht JA oder NEIN? Das ewige Streitthema über die Daseinsberechtigung des UrhG! von Michael Klement Berlin, 21.05.2013 Beuth Hochschule für Technik Berlin University of Applied Sciences </p>
<p> Was ist clevere Altersvorsorge? Um eine gute Altersvorsorge zu erreichen, ist es clever einen unabhängigen Berater auszuwählen Angestellte bzw. Berater von Banken, Versicherungen, Fondsgesellschaften und </p>
<p> robotron*e count robotron*e sales robotron*e collect Anwenderdokumentation Version: 2.0 Stand: 28.05.2014 Seite 2 von 5 Alle Rechte dieser Dokumentation unterliegen dem deutschen Urheberrecht. Die Vervielfältigung, </p>
<p> NEVARIS Umstellen der Lizenz bei Allplan BCM Serviceplus Kunden von der NEVARIS SP Edition auf NEVARIS Standard/Professional Integrierte Lösungen für das Bauwesen Diese Dokumentation wurde mit der größtmöglichen </p>
<p> Allgemeine Vertragsbedingungen für die Übertragungen von Speicherkapazitäten ( Vertragsbedingungen Kapazitätsübertragung ) Stand: Januar 2016 Vertragsbedingungen Kapazitätsübertragung Seite - 2 1 Gegenstand </p>
<p> Fachbericht zum Thema: Anforderungen an ein Datenbanksystem von André Franken 1 Inhaltsverzeichnis 1 Inhaltsverzeichnis 1 2 Einführung 2 2.1 Gründe für den Einsatz von DB-Systemen 2 2.2 Definition: Datenbank </p>
<p> Kategorien freier und unfreier Software </p>
<p> Dieses Diagramm (ursprünglich von Chao-Kuei und seitdem von mehreren anderen aktualisiert) erläutert verschiedene Softwarekategorien (als category.svg und category.fig unter den Bedingungen der GNU GPLv2 oder neuer, der GNU FDLv1.2 oder neuer oder der CC BY-SA 2.0 oder neuer abrufbar). </p>
<p> Freie Software </p>
<p> Freie Software ist Software, die jedem die Berechtigung gewährt, sie zu nutzen, zu kopieren und/oder zu verbreiten, entweder unverändert oder mit Modifizierungen, gratis oder gegen ein Entgelt. Im Besonderen bedeutet das, dass der Quellcode verfügbar sein muss. Wenn es kein Quellcode ist, ist es keine Software. Das ist eine vereinfachte Beschreibung; siehe auch die vollständige Freie-Software-Definition. </p>
<p> Wenn ein Programm frei ist, dann kann es potenziell in einem freien Betriebssystem wie GNU oder freien Versionen des GNU/Linux-Systems aufgenommen werden. </p>
<p> Es gibt viele verschiedene Möglichkeiten, ein Programm frei zu machen ‑ viele Detailfragen, die auf mehr als eine Art entschieden werden und das Programm immer noch frei machen können. Einige der möglichen Varianten sind unten beschrieben. Weitere Informationen über bestimmte freie Softwarelizenzen finden Sie unter Verschiedene Lizenzen und Kommentare. </p>
<p> Freie Software ist eine Frage der Freiheit, nicht des Preises. Aber proprietäre Softwarehersteller verwenden in der Regel [im Englischen, A. d. Ü.] den Begriff free software1, um sich auf den Preis zu beziehen. Manchmal ist damit gemeint, dass Nutzer eine binäre Kopie kostenlos erhalten können; manchmal eine Kopie, die zusammen mit einem gekauften Rechner gebündelt wird und der Preis beides beinhaltet. So oder so, es hat nichts mit dem zu tun, was beim GNU-Projekt unter Freie Software verstanden wird. </p>
<p> Wegen dieses potentiellen Durcheinanders müssen Sie immer die tatsächlichen Vertriebsbestimmungen überprüfen, ob Nutzern wirklich alle Freiheiten zugestanden werden, die Freie Software impliziert. Manchmal ist es wirklich freie Software; manchmal ist es das nicht. </p>
<p> Viele Sprachen haben zwei verschiedene Worte für frei wie in Freiheit und frei wie in 0 (null) Preis. Im Französischem beispielsweise libre und gratuit. Nicht so im Englischen: Es gibt ein Wort gratis, das sich eindeutig auf den Preis bezieht, aber kein gemeinsames Adjektiv, das sich eindeutig auf Freiheit bezieht. Wenn Sie also eine andere Sprache sprechen, wird empfohlen, free in Ihre Sprache zu übersetzen, um dies zu verdeutlichen. Siehe Übersetzungen des Begriffs Freie Software in verschiedene andere Sprachen. </p>
<p> Der Begriff Open-Source-Software wird von einigen benutzt, um mehr oder weniger die gleiche Kategorie wie freie Software zu meinen. Es ist nicht genau die gleiche Softwarekategorie: einige Lizenzen wurden akzeptiert, die wir als zu restriktiv betrachten, und es gibt freie Softwarelizenzen, die nicht akzeptiert wurden. Jedoch sind die Unterschiede in der Erweiterung der Kategorie klein: sämtliche Freie Software ist öffentlich zugänglicher Quellcode und sämtliche Open-Source-Software ist beinahe frei. </p>
<p> Wir bevorzugen den Begriff Freie Software, weil er sich auf Freiheit bezieht ‑ etwas, dass der Begriff „Open Source“ nicht macht. </p>
<p> Public-Domain-Software ist Software, die nicht dem Urheberrecht unterliegt. Wurde der Quellcode in die Gemeinfreiheit ‚Public Domain‘ entlassen, ist das ein Sonderfall von Freie Software ohne Copyleft, was bedeutet, dass einige Kopien oder modifizierte Versionen überhaupt nicht frei sein können. </p>
<p> In einigen Fällen kann ein ausführbares Programm in die Gemeinfreiheit entlassen sein, aber der Quellcode ist nicht verfügbar. Dies ist nicht Freie Software, weil Freie Software Zugang zum Quellcode erfordert. Inzwischen ist die meiste Freie Software nicht mehr in die Gemeinfreiheit entlassen; sie unterliegt dem Urheberrecht, und die Rechteinhaber haben rechtlich die Berechtigung gegeben, damit sie jeder in Freiheit, mit Hilfe einer freien Softwarelizenz, nutzen kann. </p>
<p> Manchmal wird der Begriff Public Domain in einer lockeren Art und Weise verwendet, um frei oder gratis verfügbar auszudrücken. Allerdings ist Public Domain ein rechtlicher Begriff und bedeutet genau genommen nicht urheberrechtlich geschützt. Aus Gründen der Übersichtlichkeit empfehlen wir die Verwendung von Public Domain lediglich für diese Bedeutung und andere Begriffe, um andere Bedeutungen zu vermitteln. </p>
<p> Unter der Berner Konvention, die die meisten Länder unterzeichnet haben, unterliegt alles niedergeschriebene automatisch dem Urheberrecht. Dies schließt Programme ein. Möchten Sie ein selbst-geschriebenes Programm in die Gemeinfreiheit entlassen, müssen einige rechtliche Schritte ergriffen werden, um auf das darauf befindliche Copyright zu verzichten; andernfalls unterliegt das Programm dem Urheberrecht. </p>
<p> Software mit Copyleft </p>
<p> Software mit Copyleft ist Freie Software, deren Vertriebsbedingungen sicherstellen, dass alle Kopien von allen Versionen mehr oder weniger die gleichen Vertriebsbedingungen haben. Das bedeutet beispielsweise, dass Lizenzen mit Copyleft generell verbieten, der Software zusätzliche Anforderungen hinzuzufügen (obwohl eine begrenzte Anzahl von sicheren Anforderungen zu ergänzen erlaubt sein kann) und erfordern, den Quellcode verfügbar zu machen. Dies schirmt das Programm und seine modifizierten Versionen vor einigen der allgemeinen Möglichkeiten ab, ein Programm proprietär zu machen. </p>
<p> Einige Lizenzen mit Copyleft, wie beispielsweise die GPLv3, verhindern andere Wege der Umwandlung in proprietäre Software, wie z. B. Tivoisierung. </p>
<p> Im GNU-Projekt ist praktisch sämtliche von uns geschriebene Software mit Copyleft, denn unser Ziel ist allen Nutzern die Freiheiten zu gewähren, die der Begriff Freie Software impliziert. Weitere Informationen hierzu, der Funktionsweise und warum wir es verwenden, im Artikel Copyleft. </p>
<p> Copyleft ist ein allgemeines Konzept; um ein konkretes Programm mit Copyleft zu versehen, müssen bestimmte Vertriebsbedingungen beachtet werden. Es gibt viele Möglichkeiten, Vertriebsbedingungen mit Copyleft zu schreiben, so kann es im Prinzip viele freie Softwarelizenzen mit Copyleft geben. In der Praxis nutzt jedoch beinahe jede Software mit Copyleft die GNU General Public License (GPL). Zwei verschiedene Lizenzen mit Copyleft sind meist unvereinbar, was bedeutet, es ist rechtswidrig, den Quellcode der einen Lizenz mit der einer anderen Lizenz zusammenzuführen; deshalb ist es für die Gemeinschaft vorteilhaft, wenn eine einzige Lizenz mit Copyleft verwendet wird. </p>
<p> Freie Software ohne Copyleft </p>
<p> Freie Software ohne Copyleft stammt vom Autor mit der Berechtigung der Weiterverbreitung und Modifizierung, und auch, um zusätzliche Beschränkungen hinzuzufügen. </p>
<p> Wenn ein Programm frei ist, aber nicht unter Copyleft, dann können einige Kopien oder modifizierte Versionen möglicherweise überhaupt nicht frei sein. Ein Softwareunternehmen kann das Programm mit oder ohne Modifikationen kompilieren und die ausführbare Datei als proprietäres Softwareprodukt vertreiben. </p>
<p> Das X Window System (X11) veranschaulicht dies. Das X Consortium hat X11 mit Vertriebsbedingungen freigegeben, die es zu Freie Software ohne Copyleft gemacht haben, und nachfolgende Entwickler folgten größtenteils derselben Praxis. Eine Kopie, die diese Vertriebsbedingungen hat, ist Freie Software. Jedoch gibt es ebenso unfreie Versionen, und es gibt (oder waren zumindest) populäre Grafikkarten für Arbeits- und Einzelplatzrechner, für die unfreie Versionen die einzigen sind, die funktionieren. Wenn Sie diese Hardware verwenden, ist X11 keine freie Software für Sie. Die Entwickler von X11 haben X11 sogar eine Weile unfrei gemacht. Dazu waren sie in der Lage, weil andere ihren Quellcode unter derselben Lizenz ohne Copyleft beigetragen hatten. </p>
<p> Nicht besonders streng, freizügig lizenzierte Software </p>
<p> Zu den nicht besonders strengen, freizügigen Lizenzen zählen die X11-Lizenz und die zwei BSD-Lizenzen. Diese Lizenzen erlauben fast jede Nutzung des Quellcodes, einschließlich der Distribution von proprietären Binärdateien (mit oder ohne Änderung des Quellcodes). </p>
<p> GPL-lizenzierte Software </p>
<p> Die GNU GPL enthält eine Reihe von Vertriebsbedingungen um ein Programm mit Copyleft zu versehen. Das GNU-Projekt nutzt sie für die meisten GNU-Pakete als Vertriebsbedingung. </p>
<p> Freie Software mit GPL-gedeckter Software gleichzusetzen, ist somit ein Fehler. </p>
<p> GNU-Betriebssystem </p>
<p> Das GNU-Betriebssystem ist das unixähnliche Betriebssystem, das vollständig freie Software ist, die wir im GNU-Projekt seit 1984 entwickelten. </p>
<p> Ein unixoides Betriebssystem besteht aus vielen Programmen. Das GNU-System beinhaltet alle offiziellen GNU-Pakete. Es sind auch viele andere Pakete wie das X Window System und TeX, die keine GNU-Software sind, enthalten. </p>
<p> Die erste Testfreigabe des gesamten GNU-Systems war im Jahr 1996. Dies beinhaltete den seit 1990 entwickelten GNU Hurd, unseren Betriebssystemkern. Im Jahr 2001 begann das GNU-System (einschließlich des GNU Hurd) recht zuverlässig zu funktionieren, aber dem Hurd fehlten noch immer einige wichtige Eigenschaften ‑ und ist damit nicht weit verbreitet. Inzwischen ist das GNU/Linux-System, ein Ableger des GNU-Betriebssystems, das Linux als Betriebssystemkern anstelle des GNU Hurd nutzt, seit den 90ern ein großer Erfolg. Dies zeigt, dass das GNU-System kein einzelner statischer Satz von Programmen ist; Benutzer und Distributoren können verschiedene Pakete entsprechend ihren Bedürfnissen und Wünschen auswählen. Das Ergebnis ist immer noch eine Variante des GNU-Systems. </p>
<p> Da der Zweck von GNU darin besteht frei zu sein, ist jede einzelne Komponente im Betriebssystem GNU freie Software. Sie müssen jedoch nicht alle unter Copyleft fallen; jede Art von freier Software ist rechtmäßig geeignet aufgenommen zu werden, wenn es hilft, technischen Zielen zu entsprechen. </p>
<p> GNU-Programm </p>
<p> Der Begriff GNU-Programm, ist gleichbedeutend mit GNU-Software. Ein Programm Fu ist ein GNU-Programm, wenn es GNU-Software ist. Darüber hinaus heißt es auch manchmal GNU-Paket. </p>
<p> GNU-Software </p>
<p> GNU-Software ist Software, die unter der Schirmherrschaft des GNU-Projekt freigegeben wird. Ist ein Programm GNU-Software, wird es auch manchmal GNU-Programm oder -Paket genannt. Die LIESMICH oder das Handbuch eines GNU-Pakets sollte darauf hinweisen; ebenfalls nennt das Freie-Software-Verzeichnis alle GNU-Pakete. </p>
<p> Die meiste GNU-Software ist mit Copyleft, jedoch nicht jede. Jede GNU-Software muss jedoch Freie Software sein. </p>
<p> Einige GNU-Software wurde von MitarbeiterInnen der Free Software Foundation geschrieben, die meiste GNU-Software wird aber von vielen Freiwilligen beigetragen (manche werden von Unternehmen oder Universitäten bezahlt, aber sie sind Freiwillige für das GNU-Projekt). Einige beigetragene Software unterliegt dem Urheberrecht der Free Software Foundation; einige unterliegt dem Urheberrecht der Mitwirkenden, die sie geschrieben haben. </p>
<p> GNU-Software unter Copyright der FSF </p>
<p> Die Entwickler der GNU-Pakete können das Copyright an die FSF übertragen oder es behalten. Die Entscheidung liegt bei ihnen. </p>
<p> Wird das Copyright an die FSF übertragen, ist das Programm GNU-Software unter Copyright der FSF und die FSF kann die Lizenz durchsetzen. Falls sie das Copyright behalten haben, obliegt deren Durchsetzung ihrer Zuständigkeit.4 </p>
<p> Die FSF akzeptiert grundsätzlich keine Copyright-Zuordnungen von Software, die kein offizielles GNU-Paket ist. </p>
<p> Unfreie Software </p>
<p> Unfreie Software ist jede Software, die nicht frei ist. Deren Nutzung, Neuvertrieb oder Modifizierung ist untersagt oder verlangt, dass um Erlaubnis gebeten werden muss, oder ist so sehr eingeschränkt, dass man es wirksam nicht frei tun kann. </p>
<p> Proprietäre Software </p>
<p> Proprietäre Software ist ein anderer Name für unfreie Software. In der Vergangenheit unterteilten wir unfreie Software in halbfreie Software, welche modifiziert und nicht kommerziell weiterverbreitet, und proprietäre Software, die nicht modifiziert und weiterverbreitet werden konnte. Allerdings haben wir diese Unterscheidung fallen lassen und verwenden nun proprietäre Software als Synonym für unfreie Software. </p>
<p> Die Free Software Foundation folgt der Regel, dass wir kein proprietäres Programm auf unseren Rechnern installieren können, außer vorübergehend für den besonderen Zweck, einen freien Ersatz für eben dieses Programm zu schreiben. Abgesehen davon meinen wir, dass es keine Entschuldigung für die Installation eines proprietären Programms gibt. </p>
<p> Beispielsweise fühlten wir uns in den 1980ern zum Installieren von Unix auf unseren Rechner berechtigt, weil wir es dazu benutzten, einen freien Ersatz für Unix zu schreiben. Heutzutage, da freie Betriebssysteme verfügbar sind, ist die Entschuldigung nicht mehr anwendbar; wir nutzen keine unfreien Betriebssysteme und jeder neue Rechner, den wir installieren, muss ein völlig freies Betriebssystem ausführen können. </p>
<p> Wir bestehen nicht darauf, dass Nutzer oder Mitwirkende von GNU nach dieser Regel leben müssen. Es ist eine Regel, die wir für uns selbst machten. Aber wir hoffen, dass Sie ‑ um Ihrer Freiheit Willen ‑ ihr auch folgen werden. </p>
<p> Freeware </p>
<p> Der Begriff Freeware hat keine klare anerkannte Definition, wird aber häufig für Pakete genutzt, die die Weiterverbreitung erlauben, nicht aber deren Modifizierung (und ihr Quellcode ist nicht verfügbar). Diese Pakete sind keine freie Software, verwenden Sie daher bitte nicht den Begriff Freeware, um auf Freie Software zu verweisen. </p>
<p> Shareware </p>
<p> Shareware ist Software, bei der üblicherweise erlaubt ist, Kopien [in unveränderter Form, A. d. Ü.] weiterzuverbreiten, jedoch vorschreibt, dass für jede längerfristig benutzte Kopie eine Lizenzgebühr bezahlt werden muss. </p>
<p> Shareware ist keine freie oder gar halbfreie Software. Dafür gibt es zwei Gründe: </p>
<p> Für die meiste Shareware ist der Quellcode nicht verfügbar; daher können Sie das Programm überhaupt nicht modifizieren. </p>
<p> Shareware enthält, ohne eine Lizenzgebühr bezahlt zu haben, keine Erlaubnis, eine Kopie anzufertigen und zu installieren, nicht einmal für Einzelpersonen, die sich mit gemeinnütziger Aktivitäten engagieren (in der Praxis werden oft die Vertriebsbedingungen missachtet und trotzdem Kopien angefertigt und installiert, aber die Bedingungen erlauben es nicht). </p>
<p> Private Software </p>
<p> Private oder kundenspezifische Software ist für einen Benutzer (normalerweise eine Organisation oder Firma) entwickelte Software. Dieser Benutzer behält und verwendet sie und gibt sie der Öffentlichkeit weder als Quellcode noch Binärdatei frei. </p>
<p> Ein privates Programm ist (in einem etwas trivialen Sinn) freie Software, wenn sein alleiniger Benutzer die vier Freiheiten hat. Insbesondere dann, wenn der Benutzer über die vollen Rechte an dem privaten Programm verfügt, ist das Programm frei. Wenn jedoch der Benutzer Kopien an andere vertreibt und die vier Freiheiten nicht mit jenen Kopien versieht, sind jene Kopien unfreie Software. </p>
<p> Freie Software ist eine Frage der Freiheit, nicht des Zugangs. Im Allgemeinen glauben wir nicht, dass es falsch ist ein Programm zu entwickeln und nicht freizugeben. Es gibt Gelegenheiten, in denen ein Programm für die Menschheit so wichtig ist, dass man behaupten könnte, es der Öffentlichkeit vorzuenthalten, falsch ist. Solche Fälle sind jedoch selten. Die meisten Programme sind nicht derart wichtig und die Freigabe abzulehnen nicht besonders falsch. Somit gibt es zwischen der Entwicklung von privater oder benutzerdefinierter Software und den Prinzipien der Freie-Software-Bewegung keinen Konflikt. </p>
<p> Beinahe alle Tätigkeiten für Programmierer beschäftigen sich mit der Entwicklung kundenspezifischer Software; deshalb sind die meisten Programmieraufträge auf eine Weise mit der Freie-Software-Bewegung vereinbar ‑ oder könnten es. </p>
<p> Kommerzielle Software </p>
<p> Kommerziell und proprietär sind nicht das Gleiche! Kommerzielle Software ist Software, die von einem Unternehmen im Rahmen seiner Geschäftstätigkeit. Die meiste kommerzielle Software ist proprietär, aber es gibt kommerzielle freie Software und unkommerzielle unfreie Software. </p>
<p> GNU Ada wird zum Beispiel unter den Bedingungen der GNU GPL vertrieben und jede Kopie ist freie Software; aber ihre Entwickler verkaufen Betreuungsverträge. Wenn ihre Verkäufer mit potenziellen Kunden sprechen, sagen Kunden mitunter: „Wir würden uns mit einem kommerziellen Compiler sicherer fühlen.“ „GNU Ada ist ein kommerzieller Compiler; zufälligerweise ist er auch freie Software.“, antworten die Verkäufer. </p>
<p> Für das GNU-Projekt liegen die Prioritäten auf der anderen Seite: das Wichtige ist, dass GNU Ada freie Software ist ‑ dass es kommerziell ist, ist nur ein Detail. Allerdings ist die zusätzliche Entwicklung von GNU Ada, die sich aus dem Kommerz ergibt, definitiv vorteilhaft. </p>
<p> Bitte helfen Sie das Bewusstsein zu verbreiten, dass freie kommerzielle Software möglich ist. Sie können dies unterstützen, indem Sie vermeiden kommerziell zu sagen, wenn Sie proprietär meinen. </p>
<p> Anmerkungen des Übersetzungsteams: </p>
<p> 1. In diesem Zusammenhang ist das englische Wort free in free software mehrdeutig und bezieht sich nicht auf Freie Software, sondern auf Software, die frei wie gratis oder kostenlos angeboten wird. Es wird also der Preis angesprochen, nicht die Freiheiten, die Freie Software gewährt. </p>
<p> 2. Open-Source-Software ‚Software mit öffentlich zugänglichen Quellcode‘. </p>
<p> 3. Gemeinfreiheit ‚Public Domain‘ ist in den USA bzw. im angloamerikanischen Raum ein rechtlicher Begriff und bedeutet den vollständigen Verzicht aller Urheberrechte des Rechteinhabers und/oder kein Urheberrecht. Die europäische Gemeinfreiheit ist ähnlich, aber nicht identisch. Das deutsche Urheberrecht ist zu beachten und ein Totalverzicht nicht möglich (UrhG § 29). Gemeinfreiheit bezieht sich immer auf die jeweilige nationale Rechtsordnung (sowohl der des Rechteinhabers als auch der des Nutzers!). </p>
<p> 4. Copyright, zu deutsch etwa Kopier-Urheberrecht am Werk, bezeichnet ein Rechtsgebiet, um geistiges Eigentum zu schützen. US-Recht (das den ökonomischen Aspekt betont) ist dem deutschen Urheberrecht (das Schöpfer und ihre ideelle Beziehung zum Werk in den Mittelpunkt stellt) ähnlich, aber nicht identisch! </p>
<p> Die Free Software Foundation (FSF) ist eine gemeinnützige Organisation mit einer weltweiten Mission die Freiheit von Rechnernutzern zu fördern. Wir verteidigen die Rechte aller Softwarenutzer. </p>
<p> Bei der Übersetzung dieses Werkes wurde mit größter Sorgfalt vorgegangen. Trotzdem können Fehler nicht völlig ausgeschlossen werden. Sollten Sie Fehler bemerken oder Vorschläge, Kommentare oder Fragen zu diesem Dokument haben, wenden Sie sich bitte an unser Übersetzungsteam <web-translators@gnu.org>. </p>
<p> Weitere Informationen über die Koordinierung und Einsendung von Übersetzungen unserer Internetpräsenz finden Sie in der LIESMICH für Übersetzungen. </p>
<p> Bitte beachten Sie: Bei diesem Dokument handelt es sich um eine Übersetzung aus dem Englischen. Die in diesem Dokument enthaltenen Informationen basieren auf der englischsprachigen Artikelfassung. Die Richtigkeit dieser Informationen in Zusammenhang mit der deutschsprachigen Artikelfassung wurde im Rahmen dieser Übersetzung nicht geprüft. Diese Informationen werden ohne Gewähr für Richtigkeit bzw. Funktionalität zur Verfügung gestellt und auch keine Gewähr bezüglich der Vollständigkeit oder Richtigkeit der Übersetzung übernommen. </p>
<p> Übersetzung: Jоегg Kоhпе <www-de>, 2012-2017. Basiert auf einer Übersetzung von Michael Kallas, 2001. </p>
<p> Freie Software ist für die Gemeinschaft nützlicher als proprietäre Software (das ist die komplizierte Bezeichnung für unfreie Software). Außerdem enthält sie mit ihrem Bezug zu individueller Freiheit, freiem Zugang und gemeinschaftlichem Nutzen meiner Ansicht nach eine positive Botschaft, auch aus anarchistischer Sicht. Wäre es da nicht schön (auch schon unter kapitalistischen Bedingungen) von der Entwicklung Freier Software leben zu können? </p>
<p> Geschäftsmodelle mit Freier Software lassen sich grob in zwei Kategorien unterteilen. Die eine Möglichkeit ist es, nicht die Software selbst zu verkaufen, sondern Dienstleistungen darum herum. Da die Software nicht direkt verkauft wird, kann sie auch frei zugänglich gemacht werden. Das Unternehmen profitiert dann vom offenen, gemeinschaftlichen Entwicklungsmodell. </p>
<p> Die zweite Möglichkeit ist die Auftragsentwicklung. Also die Bezahlung für die Entwicklung oder Anpassung von Software, die danach frei zugänglich ist. Auch hier sind meist Auftraggeber die Unternehmen, die die Software für ihr Geschäftsmodell brauchen, sie aber nicht direkt verkaufen. Es gibt viele Freie Software Projekte, die auch private Spenden annehmen und manche bekommen sogar recht viel Geld zusammen. Ich kann mir vorstellen, dass damit auch teilweise Entwickler bezahlt werden. </p>
<p> Grenzen Freier Software </p>
<p> Letztendlich hängen in der professionellen Entwicklung von Software fast immer irgendwelche Unternehmen drin. Was für Software entwickelt wird, richtet sich also nicht primär nach den Bedürfnissen oder Wünschen der Konsument*innen, sondern danach, wie sich damit das meiste Geld verdienen lässt. </p>
<p> Und solange das so bleibt, wird freie Software immer nur die zweite Geige spielen, immer nur die Grundlage für etwas anderes bilden. Grundlage für proprietäre Erweiterungen, Grundlage für Serviceverträge, Grundlage um Informationen zu sammeln und Werbung zu generieren. Sie wird unter dem Zwang der Wirtschaftlichkeit niemals Selbstzweck, niemals entwickelt um der Gemeinschaft zu nutzen. </p>
<p> Weiterhin ist Freie Software zwar eine gute Sache (insofern als dass ich sie proprietärer Software wann immer möglich vorziehen würde), muss aber deshalb nicht per se nützlich oder sinnvoll sein (aus Sicht der Gesellschaft). </p>
<p> Der Blick in eine utopische Zukunft </p>
<p> Insofern das in einer kapitalistischen Gesellschaft möglich ist, würde ich die Entwicklung von Software gerne weitestgehend vom freien Markt abgekoppelt sehen. Da sie (als Freie Software) potentiell der gesamten Gesellschaft nützt, liegt der Gedanke nahe sie auch gemeinschaftlich zu unterstützen. </p>
<p> Software, die sich als Gemeinschaftsprojekt versteht, trägt diesen Geist in sich. Sie hat allerdings oft das Problem, dass aufgrund knapper finanzieller Mittel der größte Teil der anfallenden Arbeit unentgeltlich gemacht werden muss. Auf der anderen Seite wird sie vor allem durch die direkt Beitragenden getragen, das heißt die meisten Konsument*innen beteiligen sich im Allgemeinen nicht. </p>
<p> Viele Projekte bieten wie gesagt die Möglichkeit einer Spende. Für Freie Software, die ich nutze, Geld zu bezahlen halte ich für eine gute Sache, besonders für Gemeinschaftsprojekte. Damit trage ich einen Teil dazu bei, deren Unabhängigkeit und Qualität zu sichern. An der Stelle möchte ich auf die Idee eines monatlichen Free Software Donation Day hinweisen, die einen wichtigen gedanklichen Schritt in Richtung kontinuierlicher Unterstützung geht. </p>
<p> Eine andere interessante Möglichkeit, Geld für professionelle Entwicklung von Freier Software direkt aus der Gemeinschaft zur Verfügung zu stellen, habe ich mit der Seite FreedomSponsors gefunden. Das ist quasi eine gemeinschaftliche Form der Auftragsentwicklung. Wer einen Bugfix oder ein Feature für eine Freie Software möchte, kann dafür einen frei wählbaren Betrag bieten. Wenn genug Menschen genug Geld für ein Feature oder einen Bugfix bieten, kann ein Entwickler * eine Entwicklerin das umsetzen und bekommt hinterher das Geld. </p>
<p> Neben dieser Form des Crowdfunding gibt es noch die klassiche Variante für größere Projekte wie zum Beispiel die Neuentwicklung einer Software. Dabei stellt ein Team von Entwickler*innen ihre Ideen und Entwürfe der Community vor und jede*r kann dann einen beliebigen Betrag dazu beisteuern. Wenn ein gewisser Betrag zusammengekommen ist, wechselt das Geld den Besitzer * die Besitzerin und das Entwicklerteam setzt das Projekt um. </p>
<p> Fazit </p>
<p> Freie Software ist eine gute Sache. Damit Software der Gemeinschaft nutzt, muss diese aber auch von der Gemeinschaft unterstützt werden. Ansätze gibt es dazu, diese sind aber bisher Randerscheinungen. Es fehlt meiner Meinung nach ein breites Bewusstsein dafür, warum die Entwicklung von Software nicht dem freien Markt überlassen werden darf und darauf aufbauend das Bewusstsein für die Notwendigkeit einer nicht nur punktuellen Unterstützung, sondern eines kontinuierlichen Geldflusses in Freie Software Projekte. </p>
<p> Meta </p>
<p> Datenschutz & Cookies: Diese Website verwendet Cookies. Wenn du die Website weiterhin nutzt, stimmst du der Verwendung von Cookies zu. Weitere Informationen, beispielsweise zur Kontrolle von Cookies, findest du hier: Cookie-Richtlinie </p>
<p> definition - Freie Software </p>
<p> Freie Software </p>
<p> Freie Software (englisch free software) ist Software, die für jeden Zweck ausgeführt, untersucht, modifiziert und in ursprünglicher oder modifizierter Form weiterverbreitet werden darf. Das schließt auch die kommerzielle Nutzung ein. Freie-Software-Lizenzen können eine Copyleft-Klausel enthalten, die besagt, dass bearbeitete und wiederveröffentlichte Versionen der Software ebenfalls frei sein müssen. Aber auch die BSD-artigen Lizenzen, die kein Copyleft erfordern, sind Freie-Software-Lizenzen. </p>
<p> Freier Software steht die unfreie und/oder proprietäre Software gegenüber, die diese Freiheiten nicht oder nicht in vollem Umfang bietet. Diese Unterscheidung wurde von der Free Software Foundation (FSF) geprägt.[1] </p>
<p> Abgrenzungen </p>
<p> Freiheit 0: Das Programm zu jedem Zweck auszuführen. </p>
<p> Freiheit 1: Das Programm zu untersuchen und zu verändern. </p>
<p> Freiheit 2: Das Programm zu verbreiten. </p>
<p> Freiheit 3: Das Programm zu verbessern und diese Verbesserungen zu verbreiten, um damit einen Nutzen für die Gemeinschaft zu erzeugen. </p>
<p> Für die Freiheiten (1) und (3) ist der Zugang zum Quelltext Voraussetzung, da sonst das Verändern eines Programms schwierig bis unmöglich ist. Sind eine oder mehrere dieser Bedingungen nicht erfüllt, wird die Software als proprietär oder „unfrei“ bezeichnet. </p>
<p> Freeware </p>
<p> In der englischen Sprache bedeutet free nicht nur „frei“, sondern auch „kostenlos“ oder „kostenfrei“. Englischsprachige Entwickler und Aktivisten machen die Unterscheidung mit Free as in Freedom („Frei wie in Freiheit“) und free as in free beer („frei wie Freibier“) deutlich. Bei Freie Software (engl. Originalausdruck: free software) bezieht sich „frei“ auf die erste Definition, auf die Freiheiten für den Nutzer der Software. Zu den garantierten Freiheiten gehört auch, freie Software zu einem beliebigen Preis verkaufen zu dürfen. Freie-Software-Lizenzen enthalten oft auch eine Copyleft-Regelung (auch: share alike), das heißt, die Freiheiten dürfen bei der Verbreitung der Software nicht eingeschränkt werden. </p>
<p> Freeware hingegen bezieht sich auf die zweite Bedeutung, „kostenlos“. Diese Software räumt dem Benutzer nicht die von der Free Software Foundation aufgelisteten Freiheiten ein, sondern die der individuellen Lizenzvereinbarung mit dem Urheber. Daher gilt sie als „unfreie“ Software. </p>
<p> Open Source </p>
<p> Der Begriff Open Source (zu deutsch „quelloffen“) wurde von Eric S. Raymond, Bruce Perens und Tim O’Reilly, Gründer der Open Source Initiative (OSI), eingeführt. Sie glaubten, dass das unangenehme Thema Freiheit potentielle Geldgeber für entsprechende Projekte abschrecken könnte. In der Darstellung der Open-Source-Bewegung wird die Freiheit, die freie Software den Benutzern gibt, daher nicht erwähnt. Sie betont, dass Open Source zu besserer und preisgünstigerer Software führt als geschlossene, proprietäre Konstruktionen. </p>
<p> Die Free Software Foundation hingegen meint, dass proprietäre Software allein schon aus moralischen Gründen abzulehnen sei, selbst wenn sie besser als quelloffene wäre. Software soll transparent und überprüfbar sein. Richard Stallman von der FSF lehnt die Bezeichnung Open Source und den dahinterstehenden Standpunkt grundsätzlich ab. </p>
<p> Dennoch arbeiten Anhänger beider Lager bei Projekten zusammen. Auch ist die GNU GPL die beliebteste Lizenz selbst bei Projekten, die von Open-Source-Anhängern dominiert werden. Alternative Kompromissbezeichnungen wie „Free/Libre Open Source Software“ (FLOSS), die von Anhängern beider Positionen (einschließlich Richard Stallman) akzeptiert werden, sollen diese Gemeinsamkeiten betonen. Der Begriff „Open-Source-Software“ scheint mit der Betonung der Überlegenheit des Entwicklungsprozesses eher aus Sichtweise der Entwickler wiederzugeben, während der Begriff „Freie Software“ auch die Sicht der Anwender einbezieht. </p>
<p> In ihren konkreten Forderungen an Softwarelizenzen unterscheiden sich die beiden Bewegungen ebenfalls kaum: „Open Source“ bezieht sich darauf, dass der Quellcode eines Programmes offenliegt. Nicht nur das Programm wird verbreitet, sondern auch der Quellcode, auf Grundlage dessen das Programm erstellt wurde. Wer den Quellcode kennt, kann ihn, wie bei Freie Software, untersuchen („studieren“), ändern und neue Programme daraus generieren. Das Bekanntsein des Quellcodes ist wichtig dafür, dass Software frei verbreitet werden kann. </p>
<p> Bisweilen wird zwar auch Software, deren Quellcode nur eingesehen, aber nicht verändert oder weitergegeben werden darf, als „Open Source“ vermarktet. Dies entspricht jedoch nicht der Open Source Definition der OSI. </p>
<p> Halbfreie Software </p>
<p> Aus Angst vor kommerzieller Ausnutzung oder amoralischem Gebrauch der eigenen Software gab und gibt es Bestrebungen, nicht alle Freiheiten aus der Definition freier Software in seiner Lizenz zu gewähren. Die Programmierer des Amiga-Emulators WinUae z. B. ärgerten sich darüber, dass das Unternehmen Cloanto den Emulator in einer Kollektion mit diversen Spielen und Hilfsprogrammen als Amiga Forever Pack für ungefähr 60 Dollar verkaufte. Die eMule-Entwickler sahen sich mit Unternehmen wie 3PO Web-Invest konfrontiert, die eine neue proprietäre Version (eMcrypt-Emule) erstellten und kommerziell vertrieben, die sich vom Original nur durch hinzugefügte Spyware unterschied. Solche Vorfälle führen zu Erwägungen eines Modells, das die Freiheiten der freien Software um die kommerzielle Weiterverbreitung vermindert (aber die sonstigen unverändert beibehält). Von der FSF wird so etwas als halbfreie Software (semi-free software) abgelehnt. </p>
<p> Geschichte </p>
<p> Entwicklungen im Vorfeld </p>
<p> 1931 gründete Thomas J. Watson Sr. von IBM ein Methods Research Department um das Wissen zum Betrieb seiner Datenverarbeitungsverfahren zu sammeln und effektiv mit seinen Kunden zu teilen[2], was IBM mit den Nutzergruppen SHARE (Society to Help Avoid Redundant Effort) und GUIDE für seine Mainframe-Programmierung fortführte[3]. Bis 1970 wurde Software von IBM kostenlos und inklusive Quellcode zur Verfügung gestellt.[4] Zwischen 1960 und 1970 etablierte sich unter anderem an akademischen US-Einrichtungen (Stanford, Berkeley, Carnegie Mellon und MIT) eine „Hacker-Kultur“, für die es selbstverständlich war, eigene Software-Verbesserungen mit anderen Programmierern zu teilen. Programmierer tauschten die Software frei untereinander aus und gaben häufig den entsprechenden Quelltext weiter. Insbesondere in großen Benutzergruppen wie der DEC User Group (DECUS) war dies üblich. Es war auch gängige Praxis, den Quelltext der mit Computersystemen ausgelieferten Software mitzuliefern. Dadurch kamen viele Vorschläge für Verbesserungen und Fehlerkorrekturen zu den Computerherstellern zurück. Software wurde als Zugabe zu Computern gesehen, um diese nutzbar zu machen. </p>
<p> Am 23. Juni 1969[5] kündigte IBM neue Regeln für die Nutzung und Wartung seiner Software, getrennt von den Hardware-Nutzungsbedingungen an. Für Software wurde urheberrechtlicher Schutz in Verbindung mit Lizenzverträgen eingeführt.[6] Die bislange freie Dienstleistung zur Wartung und Weiterentwicklung von Software wurde gesondert berechnet, was einen eigenen Wirtschaftsmarkt für diesen Dienstleistungssektor begründete. In den späten 1970er Jahren begannen auch andere Unternehmen, „Softwarelizenzen“ einzuführen, welche den Nutzen, die Weitergabe und die Möglichkeit der Veränderung der Programme einschränkte. Außerdem wurden viele Programme nicht mehr im Quelltext geliefert, sondern nur noch in maschinenlesbarer Form, zum Schutz der Software als Geschäftsgeheimnis, was eine Veränderung nahezu unmöglich machte. Zusätzlich wurde es mit dem Aufkommen von finanzierbaren Mikrocomputern von IBM, Apple, Atari oder Commodore üblich, Software getrennt von Computer-Hardware zu verkaufen und den Quelltext vor der Konkurrenz zu verbergen, die Software wurde somit proprietär. Immer mehr Hacker wurden von den Softwareunternehmen angestellt, und die bisher wahrgenommenen Freiheiten wurden stark eingeschränkt, Software wurde zu einem künstlich verknappten Gut. </p>
<p> In diese Zeit fiel die Arbeit von Richard Stallman am „AI Lab“ (Abteilung für Künstliche Intelligenz) des Massachusetts Institute of Technology. Als dort ebenfalls proprietäre Software in den Laboren eingeführt wurde, bemühte Stallman sich darum, durch das Programmieren alternativer Software eine Monopolstellung proprietärer Anbieter zu verhindern. Er folgte damit seinen Prinzipien einer wissenschaftlichen Zusammenarbeit, die einen freien und ungehinderten Austausch von Software vorsahen. </p>
<p> „Mit dem Verlust meiner Gemeinschaft war es unmöglich, weiterzumachen wie zuvor. Stattdessen stand ich vor einer gänzlich moralischen Entscheidung. Die einfache Wahl wäre es gewesen, der proprietären Software-Welt beizutreten, Vertraulichkeitsvereinbarungen zu unterzeichnen und zu versprechen, meinen Mit-Hackern nicht zu helfen. Sehr wahrscheinlich würde ich auch Software entwickeln, die unter Vertraulichkeitsvereinbarungen ausgegeben würde, und so den Druck auf andere Leute erhöhen, ihre Kameraden auch zu verraten. Ich hätte auf diese Art Geld verdienen und mich vielleicht mit dem Schreiben von Code vergnügen können. Aber ich wusste, dass ich am Ende meiner Karriere auf Jahre zurückblicken würde, in denen ich Wände gebaut habe; Wände, welche die Menschen voneinander trennen. Ich würde dann das Gefühl haben, dass ich mein Leben damit verbracht hatte, die Welt zu einem schlechteren Ort zu machen. […] Eine andere Wahlmöglichkeit, die direkt, aber unerfreulich gewesen wäre, war, mich überhaupt nicht mehr mit Computern zu befassen. Auf diese Art wären meine Fähigkeiten nicht missbraucht worden, aber sie wären andererseits auch verschwendet worden. Ich wäre dann zwar nicht schuld daran, dass Computer-Nutzer voneinander getrennt und eingeschränkt werden, aber ich hätte es auch nicht verhindert. Also suchte ich nach einem Weg, auf dem ein Programmierer etwas Gutes tun kann. Ich fragte mich selbst: Gibt es ein Programm oder Programme, die ich schreiben könnte, um wieder eine Gemeinschaft möglich zu machen?“ </p>
<p> Die Geburt „Freie Software“ </p>
<p> Das Unternehmen AT&T entschied sich 1983, eine proprietäre Version seines UNIX auf den Markt zu bringen: UNIX System V. Im September 1983 gründete Richard Stallman das GNU Projekt mit dem Ziel, ein freies, UNIX-ähnliches Betriebssystem mit Namen GNU zu entwickeln.[8] </p>
<p> Damit die Idee der Freiheit auch rechtlich abgesichert sein würde, mussten freie Lizenzen erdacht werden. Stallman entwarf das Copyleft-Prinzip, das bedeutet, dass alle, die die Software (mit oder ohne Änderungen) weiter verteilen, auch die Freiheit zum Weitergeben und Verändern mitgeben müssen. Das Copyleft garantiert, dass alle Benutzer Freiheit haben. Auf diesem Prinzip beruhen die Lizenzen der GNU-Software. </p>
<p> Eine organisatorische Basis für GNU und freie Software überhaupt ist die 1985 gegründete, gemeinnützige Stiftung Free Software Foundation (FSF). Für Softwareprojekte bestanden in den frühen und mittleren achtziger Jahren noch jeweils individuelle Lizenzen. Stallman verband die Rahmenpunkte zu einer einzelnen Lizenz und veröffentlichte 1989 die GNU General Public License (GNU GPL). Diese ist die heute am stärksten verbreitete Lizenz für freie Software. </p>
<p> 1991 war das GNU Betriebssystem bis auf den Betriebssystemkern (Kernel) vollständig. Einige Leute erkannten, dass Linux, ein damals proprietärer Betriebssystemkern für Minix, sich für GNU eignen könnte. Nachdem die Entwickler den Betriebssystemkern Linux unter die GNU GPL stellten, konnte man zum ersten Mal ein vollständig freies Betriebssystem einsetzen. Mit der darauffolgenden rasanten Entwicklung und Verbreitung von GNU und Linux, also GNU/Linux, wurde freie Software von immer mehr Menschen genutzt. </p>
<p> Software </p>
<p> Im Juli 2007 waren über 5000 Software-Pakete im „FSF/UNESCO Free Software Directory“ eingetragen,[9] welches 1999 ebenfalls als ein Projekt der FSF startete. </p>
<p> Geschäftsmodelle </p>
<p> Freie Software kann, gemäß den vier Freiheiten, meist nahezu beliebig kopiert und weitergegeben werden. Freie Software darf zwar zu einem beliebig hohen Preis verkauft werden, doch ist sie fast immer auch kostenlos im Internet erhältlich, und so ist ihr Verkaufswert auf Datenträgern meist nicht viel höher als die Selbstkosten. Eine bemerkenswerte Ausnahme ist das GNU-Projekt, das freie Software mit deutlicher Profitspanne anbietet und in den 1980er-Jahren auch einen erheblichen Teil seiner Einnahmen aus dem Verkauf von Software bestritt. Das GNU-Projekt hatte damals jedoch wegen seiner zentralen Rolle bei der Entwicklung freier Software und der damals geringen Verbreitung und Leistungsfähigkeit des Internets eine besondere Rolle, die es heute nicht mehr gibt. </p>
<p> Einige Geschäftsmodelle, die mit freier Software zu tun haben, konzentrieren sich deswegen auf den Dienstleistungsaspekt der Softwareentwicklung, -weiterentwicklung und -anpassung. Wartung und individuelle Anpassung der Software sowie Schulung und technische Unterstützung sind für die Kunden vorrangig. Unternehmen, die allein diese Dienstleistungen als Geschäftsstrategie gewählt haben, sind zum Beispiel MySQL AB, Red Hat und Qt Development Frameworks. Freie Software unterliegt keiner Rivalität und auch nicht der Ausschließbarkeit, ist somit ein reines öffentliches Gut und kann per Definition nicht einem üblichen Marktgeschehen unterliegen. Dennoch betrachten die Herausgeber proprietärer Software sie als eine ernste Bedrohung für ihr Geschäftsmodell der Lizenzierung und versuchen deshalb, potenzielle Kunden von der Benutzung freier Software abzuhalten. Trotzdem sind Hersteller proprietärer Software auch aktive Nutzer von freier Software und unterstützen z. B. die Verfügbarkeit von proprietärer Software auf Plattformen, die auf freier Software basieren. </p>
<p> Als Argumente für ihre Produkte führen Hersteller proprietärer Software unter anderem mehr Garantien, bessere Qualität – besonders im Hinblick auf Benutzerfreundlichkeit und bessere Dienstleistungen – an. Solche Argumente, die auf Versprechungen von Open Source, nicht von freier Software kontern, hat Richard M. Stallman wiederholt als tendenziös und thematisch verfehlt angegriffen; in seinen Augen ist die Entscheidung für oder gegen freie Software primär eine ethische und soziale Entscheidung, von der nicht durch Qualitätsdiskussionen abgelenkt werden darf. </p>
<p> Lizenzen </p>
<p> Es gibt verschiedene Typen von Lizenzen, die die Kriterien freier Software erfüllen: </p>
<p> Copyleft-Lizenzen, die GNU General Public License (GNU GPL) ist die am häufigsten verwendete. Der Autor behält das Copyright, und es sind Klauseln enthalten, dass veränderte und weitergegebene Software frei bleibt. Auch der Quellcode muss zur Verfügung gestellt werden. </p>
<p> Bei BSD-artigen Lizenzen behält der Autor das Copyright. Diese dem Grundsatz „Ehre, wem Ehre gebührt“ folgende Lizenz enthält den Namen des Autors und oft auch eine Haftungsbeschränkung. Veränderung und Weitergabe in jeder Form ist erlaubt, das heißt sie darf auch in proprietäre Software eingebaut werden. In diese Klasse fallen die Apache-Lizenz und die MIT-Lizenz. </p>
<p> Gemeinfreiheit. Der Autor verzichtet auf das Copyright. Damit kann jeder alles mit der Software machen, sie etwa in eigene Programme einbauen, verkaufen oder sie selbst wieder zu proprietärer Software machen. Gemeinfreiheit ist jedoch keine Lizenz, sondern ein gemeinfreies Werk ist besitzlos. In Staaten, in denen keine Gemeinfreiheit von Software möglich ist (etwa in Teilen der Europäischen Union), weil etwa die Urheberrechtsgesetze eine bewusste Übergabe in die Gemeinfreiheit nicht zulassen und die Schutzfristen nach dem Tod eines Autors so lang sind, dass noch keine Gemeinfreiheit jemals geschriebener Software eingetreten ist, wird statt der Gemeinfreiheit eine Lizenzierung verwendet, die dem Lizenznehmer keinerlei Verpflichtungen auferlegt und ihn von allen durch die allgemeinen Copyright-Regelungen auferlegten Beschränkungen befreit (zum Beispiel die Do What The Fuck You Want To Public License (WTFPL)). </p>
<p> Freie Software aus gesellschaftlicher Sicht </p>
<p> Beitrag zur Diskussion über die Wirtschaftsordnung </p>
<p> Einige Menschen sehen in der Freie-Software-Bewegung Ansätze, die Möglichkeiten zur Überwindung des Kapitalismus zu zeigen. In Deutschland beschäftigt sich unter anderem das Projekt Oekonux mit dieser Thematik. Andere sehen in freier Software lediglich einen weiteren Wettbewerber innerhalb der marktwirtschaftlichen Ordnung. Die Freiheit, die Software in andere Sprachen zu übersetzen, kommt besonders denjenigen Sprachgruppen zugute, für die eine Übersetzung bisher kommerziell nicht interessant war. </p>
<p> Beitrag zur Reduktion der digitalen Kluft </p>
<p> Die Freiheit der Software wird vom UNO-Weltgipfel zur Informationsgesellschaft (WSIS) als schützenswert anerkannt. Sie gehört zu den elementaren Forderungen der Zivilgesellschaft, mit der die „Digitale Kluft“ überwunden werden soll. Unter „digitaler Kluft“ wird die Spaltung in Regionen der Erde bezeichnet, die sich die Schaffung von IT-Infrastruktur und damit vor allem die Teilnahme am Internet leisten können, und solchen, die dies nicht können. Anders als bei proprietärer Software fließt bei der Verwendung freier Software kein Geld in fremde Länder ab, wo die Anbieter proprietärer Software ihren Unternehmenshauptsitz haben. Alle Mittel, die vor Ort für die IT bereitstehen, können daher unmittelbar in die IT-Wirtschaft vor Ort einfließen. </p>
<p> „Durch Freie Software haben Entwickler in anderen Kulturräumen die Freiheit, Programme an ihre Sprache und Gegebenheiten anzupassen, um sie dann kommerziell oder nichtkommerziell weiterzugeben. Bei proprietärer Software ist dies generell verboten und von der Gnade des Herstellers abhängig“ </p>
<p> – Georg Greve, damaliger Präsident der Free Software Foundation Europe und Vertreter des zivilgesellschaftlichen WSIS Koordinierungskreises in der deutschen Regierungsdelegation, 2003[10] </p>
<p> Gefahren für freie Software </p>
<p> Proprietäre Schnittstellen </p>
<p> Hardware-Hersteller gehen immer mehr dazu über, die Schnittstellenspezifikationen geheim zu halten, um der Konkurrenz die Nachahmung technischer Lösungsansätze zu verwehren. Der Grund hierfür liegt im zunehmenden Wettbewerbsdruck und darin, dass es billiger ist und schneller geht, einen solchen Schutz technisch einzubauen, als das errungene geistige Gut durch ein Patent für sich zu reservieren. Wenn nicht öffentlich dokumentiert ist, wie die Geräte anzusteuern sind, erleidet die Hardwareunterstützung freier Betriebssysteme mittels freier Treiber einen schweren Rückschlag, da sie allenfalls noch durch Reverse Engineering in Gang gebracht werden kann. </p>
<p> Andererseits haben die Hersteller die Benutzer der wichtigeren freien Betriebssysteme (vor allem GNU/Linux – wobei insbesondere Linux und der X.Org-Server relevant sind) als Kundengruppe erkannt. Viele von ihnen stellen jedoch proprietäre Treiber zur Verfügung. Diese Treiber stoßen unter den Anhängern freier Software auf höchst geteilte Meinungen: einige sind glücklich darüber, dass sie die „Unterstützung“ der Hardware-Hersteller gewonnen haben und deren Hardware durch das von ihnen bevorzugte Betriebssystem nun mehr oder weniger unterstützt wird, andere lehnen proprietäre Treiber grundsätzlich ab. </p>
<p> Von einer generellen Schnittstellenfreigabe würden die Benutzer freier Betriebssysteme sicherlich profitieren. Neben den ideologischen kommen hier auch Fragen der Systemstabilität zum Tragen: sollte beispielsweise ein proprietärer Linux-Netzwerkkartentreiber regelmäßig zu Abstürzen des Systems führen, wären die Linux-Entwickler dagegen machtlos und es hinge vom Gutdünken des Herstellers ab, ob der Fehler behoben wird. </p>
<p> Softwarepatente </p>
<p> Die regelmäßig in den Schlagzeilen auftauchenden Softwarepatente haben auf freie Software einen besonders schwerwiegenden Einfluss, denn es ist zum Teil rechtlich noch nicht einmal möglich, mit freier Software die Patentauflagen zu erfüllen. Diese bestehen nämlich in einigen Fällen auf einer Gebühr pro in Umlauf gebrachter Kopie, aber freie Software verlangt gerade, dass der Herausgeber darauf keinen Einfluss haben darf. Selbst wenn er die Lizenzgebühren zum Beispiel durch Spenden zahlen würde, müsste er eine genaue Zahl der Kopien, die im Umlauf sind, vorlegen können, womit es keine freie Software mehr wäre. </p>
<p> Trusted Computing </p>
<p> Trusted Computing kann Veränderungen an einer Computer-Plattform eindeutig erkennen und damit sowohl externe Software-Angriffe als auch Veränderungen durch den Benutzer, Konfigurationen, Fehlfunktionen, Sicherheitslücken oder von Anwendungsprogrammen eindeutig identifizieren. Die Reaktion auf eine solche Veränderung kann (aber muss nicht) durch ein entsprechendes, sicheres Betriebssystem erfolgen. Trusted Computing kann daher auch zur Absicherung von Digital Rights Management (DRM) und zum Kopierschutz verwendet werden. </p>
<p> Politisch gesehen muss freie Software immer vom Benutzer ersetzbar und veränderbar sein. Software, die in binärer Form zertifiziert sein muss, ist dies nicht. Technisch gesehen kann in freier Software vor dem Benutzer nichts im Binärcode verheimlicht werden, weil der Quellcode für jeden zugänglich sein muss. Somit kann die Verschlüsselung, mit der die Daten vor dem Benutzer „bewahrt“ werden, einfacher hintergangen werden. </p>
<p> Eine weitere Inkompatibilität tut sich mit dem Kopierschutz von DVDs auf: Die Umgehung wirksamer Kopierschutzmaßnahmen ist seit den um die Jahrtausendwende weltweit nach und nach etablierten Reformen zum Copyright (in den USA der Digital Millennium Copyright Act (DMCA)) gesetzlich nur noch mit Zustimmung des Rechteinhabers erlaubt. Dieses Verbot erstreckt sich auch auf die Herstellung oder Verbreitung von Programmen, die diese Maßnahmen umgehen können, so dass freie Abspielsoftware für kopiergeschützte DVDs nicht legal geschrieben werden kann – aus ihren natürlichen Interessen heraus würden die Rechteinhaber ihre Zustimmung dazu niemals erteilen, weil dadurch der Sinn der Maßnahmen ad absurdum geführt würde. </p>
<p> Falls Hardwarehersteller wie Intel oder AMD funktionseinschränkende Verfahren in Chipsätze oder Prozessoren implementieren sollten, könnte freie Software den vollen Funktionsumfang möglicherweise nur noch auf freier Hardware entfalten. </p>
<p> Literatur </p>
<p> Stefan Meretz: Linux & Co. Freie Software – Ideen für eine andere Gesellschaft. AG SPAK Bücher, Neu-Ulm 2000, ISBN 3-930830-16-7. </p>
<p> Bernhard E. Reiter: Wandel der IT: Mehr als 20 Jahre Freie Software. In: HMD, Heft 238, August 2004, S. 83–91, ISSN 1436-3011 (online). </p>
<p> Edward Viesel: Freiheit statt Freibier. Geschichte und Praxis der freien digitalen Welt – mit einer Einführung in Linux. Unrast Verlag, Münster 2006, ISBN 3-89771-450-7. </p>
<p> ↑ Grad, B. A personal recollection: IBM’s unbundling of software and services IEEE Annals of the History of Computing, Bd. 24, Nr. 1, Jan.–März 2002 Seiten 64–71 DOI 10.1109/85.988583 </p>
<p> ↑ Humphrey, W.S. Software unbundling: a personal perspective IEEE Annals of the History of Computing, Bd. 24, Nr. 1, Jan.-März 2002 Seiten 59–63 DOI 10.1109/85.988582 </p>
<p> ↑ Richard Stallman: Das GNU Projekt auf gnu.org, 22. Oktober 2006 </p>
<p> ↑ Richard Stallman: Initial Announcement auf net.unix-wizards, net.usoft, 27. September 1983 </p>
<p> A windows (pop-into) of information (full-content of Sensagent) triggered by double-clicking any word on your webpage. Give contextual explanation and translation from your sites ! </p>
<p> Der Vortrag war überaus interessant und inspirierend. Dort wurde unter anderem darauf hingewiesen, dass Linux ja unter der GNU Public License läuft und somit ein wichtiger Bestandteil des GNU Projekts ist. Man sollte daher nicht immer nur von Linux, sondern von GNU / Linux reden, weil es die korrektere Bezeichnung ist. Die Philosophie von freier Software wird ausführlich hier diskutiert. </p>
<p> In dem Vortrag wurde zunächst der Begriff der Freiheit genauer untersucht und beschrieben, um ein Verständnis für seinen Wert zu bekommen. In Kürze geht es bei Freiheit um Kontrolle. Wenn ich frei sein möchte, soll niemand Kontrolle über mich haben. Freiheit ist also etwas sehr Wertvolles und Schönes. Bei freier Software soll es keinen Hersteller der Software geben, der für mich entscheidet, was mit der Software zu passieren hat. </p>
<p> Kurz gesagt geht es bei freier Software um vier wesentliche Freiheiten: </p>
<p> (0) das Programm ausführen, </p>
<p> (1) den Quellcode untersuchen und abändern, </p>
<p> (2) exakte Kopien redistribuieren </p>
<p> (3) modifizierte Varianten distribuieren </p>
<p> Es lohnt sich, über diese Freiheiten genauer nachzudenken. Freiheit 0 bedeutet insbesondere, das Programm beliebig oft auf beliebigen Rechnern auszuführen. Die vier Freiheiten schließen übrigens nicht aus, dass man mit der Software Geld verdient. Hier muss sich freie Software genau gegen Open Source Software abgrenzen. Denn Open Source bedeutet nicht automatisch frei. Der Begriff Open Source ist ein Begriff, der aus einem Teil der Gemeinde der Freien Software heraus entstanden ist. Bei diesem Begriff wird die lizenztechnische Seite der freien Software im Hintergrund gelassen, um mehr Zuspruch zu bekommen. </p>
<p> Es wurde bereits mehrfach versucht, diese Freiheiten der GNU Public License zu umgehen. Daher gibt es diese Lizenz mittlerweile in der 3. Version. Die bekannten Linux Distributionen sind allesamt keine freie Software, weil sie sämtlich um nicht freie Teile ergänzt wurden. Freie Linux Distributionen findet man hier. </p>
<p> Die vier Freiheiten lassen sich auch auf Hardware übertragen. Allerdings ist die Entwicklung noch lange nicht so weit, dass freie Computer Hardware in größerem Maße verfügbar ist. Aber das ist auf jeden Fall auch ein Ziel. </p>
<p> Richard Stallman ist Begründer der Bewegung der freien Software und lebt freie Software. Er setzt nur ganz freie Software ein: Also kein Handy, kein Windows, kein MacOS, kein Hotel, kein soziales Netzwerk und einige andere Dinge auch nicht. </p>
<p> Der Vortrag war toll. Es lohnt sich auf jeden Fall, die Free Software Foundation zu unterstützen. </p>
<p> Kommentare </p>
<p> danke für den Bericht, leider gibt es mehrere inhaltliche Unstimmigkeiten: </p>
<p> Die Lizenz heißt “GNU General Public License”, kurz GNU GPL </p>
<p> Linux (der Kernel) ist kein Bestandteil des GNU-Projekts, sondern steht nur unter GPL 2.0-Lizenz. Die Liste an GNU-Projekten: https://www.gnu.org/manual/blurbs.html </p>
<p> GNU/Linux ist der korrekte Terminus für ein Betriebssystem, weil es überlicherweise eine Verbindung des Linux-Kernel mit dem GNU-Softwaresatz ist. </p>
<p> Bei Open Source ging es ursprünglich eher darum, einen Begriff für Business-Kunden zu erstellen, weil “Free” im Englischen zu sehr nach “kostenlos” klingt. Daher legten die Begründer des Begriffs den Fokus auf die Offenheit des Quellcodes. Die Freie-Software-Bewegung allerdings bleibt bei dem Begriff der “Freien Software”, weil damit die Freiheit betont wird und nicht nur eine der vier Freiheiten. </p>
<p> Es ist nicht korrekt, dass alle bekannten Linux-Distributionen unfreie Software sind. So ist Debian – das am weitesten verbreitete Serverbetriebssystem – per se Freie Software. Die nordamerikanische FSF kritisiert Debian allerdings deswegen, weil es recht leicht ist, unfreie Software zu installieren. Andere Freie-Software-Organisationen wie etwa die europäische FSFE (fsfe.org) sehen Debian aber als 100% Freie Software. </p>
<p> Disclaimer: Ich arbeite für die Free Software Foundation Europe, die finanziell und strukturell unabhängig von ihrer Schwesterorganisation FSF ist. </p>
<p> Hallo Max, vielen Dank für deinen Kommentar und deine Zusatzinformationen. Ich war davon ausgegangen, dass Debian auch nicht frei ist, weil es nicht in der Liste der freien Distributionen auf gnu.org auftaucht. Richard Stallman vertritt Ansichten, die, vorsichtig ausgedrückt, durchaus polarisierend wirken. Ich habe mich bemüht, den Vortrag möglichst so wiederzugeben, wie ich ihn erlebt habe und dadurch kommt die polarisierende Wirkung evtl. auch in meinem Artikel etwas rüber. In dem Vortrag hat Richard Stallman durchaus klar gemacht, dass er den Begriff Open Source nicht mag und nicht vertritt, weil er im Sinne es Freiheitsgedankens irreführend wirkt. </p>
<p> Ihre E-Mail-Adresse wird nicht öffentlich angezeigt. Verbindlich einzugebende Felder werden mit diesem Zeichen kenntlich gemacht: * </p>
<p> Flaschenpost </p>
<p> Diese Website benutzt Cookies. Wenn du die Website weiter nutzt, gehen wir von deinem Einverständnis aus.OKWeitere Informationen </p>
<p> Freie Software ist jetzt sogar noch wichtiger </p>
<p> Eine im Wesentlichen gleiche Fassung dieses Artikels ist in der Zeitschrift Wired im September 2013 erschienen. </p>
<p> Seit 1983 setzt sich die Free Software Foundation (FSF) für die Freiheit von Rechnernutzern ein, damit diese die von ihnen genutzte Software kontrollieren, und nicht umgekehrt. Wenn ein Programm Freiheit und Gemeinschaft von Nutzern respektiert, nennen wir es “Freie Software.” </p>
<p> Manchmal nennen wir sie auch Libre Software, um hervorzuheben, dass wir über Freiheit sprechen, nicht über den Preis. Einige proprietäre ‑ unfreie ‑ Programme, wie Photoshop, sind sehr teuer; andere, wie Flash Player, sind gratis verfügbar ‑ aber das ist nur ein unwichtiges Detail. So oder so geben sie dem Programmentwickler Macht über die Nutzer, Macht, die niemand haben sollte. </p>
<p> Diese beiden unfreien Programme haben noch etwas anderes gemein: beide sind Schadsoftware. Das heißt, beide verfügen über Funktionen, um den Nutzer schlecht zu behandeln. Proprietäre Software ist heutzutage häufig Schadsoftware, weil die Macht der Entwickler sie dazu verleitet. Diese Übersicht führt rund 400 verschiedene bösartige Funktionen auf (Stand: April 2019), aber es ist sicherlich nur die Spitze des Eisbergs. </p>
<p> Mit freier Software kontrollieren Nutzer das Programm sowohl individuell als auch kollektiv. Damit kontrollieren sie also, was ihre Rechner tun (vorausgesetzt diese Rechner verhalten sich loyal und tun das, was die Programme der Nutzer ihnen vorgeben). </p>
<p> Bei proprietärer Software kontrolliert das Programm die Nutzer und eine andere Entität (der Entwickler oder „Eigentümer“) kontrolliert das Programm. Somit gibt das proprietäre Programm seinen Entwicklern Macht über deren Nutzer. Das an sich ist schon ungerecht und verleitet Entwickler außerdem dazu, Nutzer auch auf andere Weise schlecht zu behandeln. </p>
<p> Selbst wenn proprietäre Software nicht gerade bösartig ist, haben ihre Entwickler einen Anreiz, sie süchtig, kontrollierend und manipulativ.zu machen. Man kann sagen, wie der Autor dieses Artikels, dass die Entwickler eine ethische Verpflichtung haben das nicht zu tun, aber im Allgemeinen folgen sie eigenen Interessen. Damit das nicht geschieht, sollte man sicherstellen, dass das Programm von seinen Nutzern kontrolliert wird. </p>
<p> Freiheit bedeutet, die Kontrolle über das eigene Leben zu haben. Wenn man ein Programm verwendet, um damit Aktivitäten im Leben zu verrichten, hängt die eigene Freiheit davon ab, dass man die Kontrolle über das Programm hat. Jeder verdient die Kontrolle über genutzte Programme, und das umso mehr, wenn sie für wichtige Lebensbereiche benutzt werden. </p>
<p> (0) Die Freiheit, das Programm auszuführen wie man möchte, für welchen Zweck auch immer. </p>
<p> (1) Die Freiheit, den Quellcode des Programms zu untersuchen und zu ändern, sodass das Programm die Datenverarbeitung so vornimmt wie man möchte. Programme werden von Programmierern in einer Programmiersprache geschrieben ‑ wie Englisch in Verbindung mit Algebra ‑ und diese Programmform ist der Quellcode. Wer sich mit Programmierung auskennt und das Programm in Form von Quellcode vorliegen hat, kann den Quellcode lesen, seine Funktionsweise verstehen und ebenso ändern. Wenn alles, was man erhält, die ausführbare Form ist, eine Zahlenreihe, für den Betrieb des Rechners effizient, für einen Menschen jedoch extrem schwer verstehbar, sind Verstehen und Programmänderung unerhört schwer. </p>
<p> (2) Die Freiheit, exakte Kopien zu erstellen und zu verteilen, wenn man möchte. (Das ist keine Verpflichtung, es ist Ihre Entscheidung. Wenn das Programm frei ist, bedeutet das noch lange nicht, dass jemand eine Verpflichtung hat, Ihnen eine Kopie anzubieten, oder dass Sie eine Verpflichtung haben, jemanden eine Kopie anzubieten. Ein Programm an Benutzer ohne Freiheit zu verteilen, behandelt sie schlecht. Allerdings kann die Entscheidung, das Programm nicht zu verteilen ‑ es privat zu benutzen ‑ niemanden schlecht behandeln. </p>
<p> (3) Die Freiheit, Kopien eigener modifizierter Versionen zu erstellen und zu verteilen, wenn man möchte. </p>
<p> Die ersten beiden Freiheiten bedeuten, dass jeder Nutzer individuelle Kontrolle über das Programm ausüben kann. Mit den anderen beiden Freiheiten kann jede Nutzergruppe zusammen kollektive Kontrolle über das Programm ausüben. Mit allen vier Freiheiten kontrollieren die Nutzer das Programm gänzlich. Falls irgendeine von ihnen fehlt oder unzureichend ist, ist das Programm proprietär (unfrei) und ungerecht. </p>
<p> Andere Arten von Werken werden auch für praktische Tätigkeiten benutzt, einschließlich Kochrezepte, pädagogische Werke wie Lehrbücher, Nachschlagewerke wie Wörterbücher und Enzyklopädien, Schriftarten zum Anzeigen von Textpassagen, Schaltpläne von Hardware zum Nachbauen und Muster zur Herstellung nützlicher (nicht nur dekorativer) Objekte mit einem 3D-Drucker. Da es sich nicht um Software handelt, erstreckt sich die Freie-Software-Bewegung streng genommen nicht auf sie, doch die gleiche Überlegung gilt und führt zu dem gleichen Ergebnis: diese Werke sollten die vier Freiheiten mit sich bringen. </p>
<p> Ein freies Programm ermöglicht es daran herumzubasteln, damit es tut, was man möchte (oder aufhört etwas zu tun, was man nicht mag). An Software herumzubasteln mag sich lächerlich anhören, wenn man proprietäre Software als versiegelten Kasten gewohnt ist, doch in der freien Welt ist es üblich und ein guter Weg das Programmieren zu lernen. Sogar der traditionelle amerikanische Zeitvertreib, an Autos basteln, ist gehemmt, da Autos nun unfreie Software enthalten. </p>
<p> Die Ungerechtigkeit von Proprietät </p>
<p> Wenn die Nutzer nicht das Programm kontrollieren, kontrolliert das Programm die Nutzer. Bei proprietärer Software gibt es immer jemanden, den Entwickler oder „Eigentümer‘ des Programms, der das Programm kontrolliert ‑ und dadurch Macht über seine Nutzer ausübt. Ein unfreies Programm ist ein Joch, ein Instrument der ungerechten Macht. </p>
<p> In ausschreitenden Fällen (obwohl diese Ausschreitungen ganz normal geworden sind) werden proprietäre Programme entworfen, um die Nutzer auszuspähen, sie einzuschränken, sie zu zensieren und sie zu missbrauchen. Das Betriebssystem der Apple iDinger zum Beispiel tut all dies, und Windows macht es ebenso mit ARM-Chips auf mobilen Geräten. Windows-Smartphone-Firmware und Google Chrome für Windows beinhalten eine universelle Hintertür, die einem Unternehmen erlaubt, das Programm aus der Ferne zu ändern, ohne um Erlaubnis zu fragen. Der Amazon Kindle hat eine Hintertür, die Bücher löschen kann. </p>
<p> Die Nutzung unfreier Software im „Internet der Dinge“ macht sie sowohl zum „Internet der Telefonverkäufer“ als auch zum „Internet der Schnüffler“. </p>
<p> Mit der Absicht, die Ungerechtigkeit von unfreier Software zu beenden, entwickelt die Freie-Software-Bewegung freie Programme, so dass Nutzer sich befreien können. Wir begannen 1984 mit der Entwicklung des freien Betriebssystems GNU. Heute führen Millionen von Rechnern GNU aus, vor allem in Kombination mit dem Systemkern Linux, allseits als GNU/Linux bekannt. </p>
<p> Ein Programm an Nutzer ohne Freiheit weiterzugeben, behandelt diese schlecht; die Entscheidung jedoch, das Programm nicht weiterzugeben, behandelt niemanden schlecht. Wenn man ein Programm schreibt und es privat benutzt, tut man anderen gegenüber nichts Falsches (man verpasst eine Gelegenheit etwas Gutes zu tun, doch das ist nicht das selbe wie etwas Falsches zu tun). Wenn wir demnach sagen, dass jede Software frei sein muss, meinen wir, dass jede Kopie mit den vier Freiheiten ausgestattet sein muss, doch wir meinen nicht, dass jemand die Pflicht hat, Ihnen eine Kopie anzubieten. </p>
<p> Unfreie Software und SaaSS </p>
<p> Unfreie Software war für Unternehmen der erste Weg, Kontrolle über die Datenverarbeitung der Menschen zu erlangen. Heutzutage gibt es einen anderen Weg namens Service-as-a-Software-Substitute (SaaSS). Das bedeutet, eigene Datenverarbeitungsaufgaben auf einem Server von jemand anderem zu erledigen. </p>
<p> SaaSS bedeutet nicht, dass die Programme auf dem Server unfrei sind (obwohl sie es oft sind). Vielmehr verursacht SaaSS die gleichen Ungerechtigkeiten wie ein unfreies Programm: es sind zwei Pfade zum selben schlechten Ort. Nehmen wir das Beispiel eines SaaSS-Übersetzungsdienstes: der Nutzer sendet Text an einen Server, der Server übersetzt es (etwa aus dem Englischen ins Spanische) und sendet die Übersetzung an den Nutzer zurück. Jetzt ist die Aufgabe des Übersetzens unter der Kontrolle des Serverbetreibers anstatt beim Nutzer. </p>
<p> Wenn man SaaSS benutzt, kontrolliert der Serverbetreiber die Datenverarbeitung. Es erfordert, dem Serverbetreiber alle relevanten Daten anzuvertrauen, welcher gezwungen sein wird, es dem Staat ebenso zu zeigen ‑ wem dient dieser Server letztendlich wirklich? </p>
<p> Primäre und sekundäre Ungerechtigkeiten </p>
<p> Wenn man proprietäre Programme oder SaaSS benutzt, schadet man sich in erster Linie selbst, weil es irgendjemanden ungerechte Macht über einen gibt. Um seiner selbst Willen sollte man dem entfliehen. Es schadet auch anderen, wenn man ein Versprechen gibt, nicht zu teilen. Solch ein Versprechen ist ein Übel und das geringere Übel ist, es zu brechen. Für wahrhafte Aufrichtigkeit sollte man das Versprechen erst gar nicht geben. </p>
<p> Es gibt Fälle, in denen das Benutzen unfreier Software direkten Druck auf andere ausübt es gleichzutun. Skype ist ein gutes Beispiel: wenn eine Person die unfreie Skype-Client-Software nutzt, erfordert es eine andere Person, die auch diese Software benutzt ‑ folglich treten beide ihre Freiheit ab (Google Hangouts hat das gleiche Problem). Es ist sogar falsch die Nutzung solcher Programme zu empfehlen. Wir sollten uns weigern, sie auch nur kurzzeitig, sogar auf dem Rechner einer anderen Person, zu benutzen. </p>
<p> Ein weiterer Schaden durch unfreie Programme und SaaSS ist, dass der Übeltäter den Lohn erntet, die Weiterentwicklung des Programms oder des „Dienstes‘ ermutigend, was wiederum zu noch mehr Personen führt, die unter dem Daumen des Unternehmens beherrscht werden. </p>
<p> Alle Formen des indirekten Schadens werden verstärkt, wenn der Nutzer eine öffentliche Einrichtung oder eine Schule ist. </p>
<p> Freie Software und der Staat </p>
<p> Öffentliche Einrichtungen gibt es für die Menschen, nicht für sich selbst. Wenn sie Daten verarbeiten, tun sie es für die Menschen. Sie haben die Pflicht, die vollständige Kontrolle über die Datenverarbeitung aufrechtzuerhalten, so dass sie versichern können, dass sie richtig für die Menschen erledigt wird (hierbei handelt es sich um die Souveränität des Staates bei der Datenverarbeitung). Man darf auf keinen Fall zulassen, dass die Kontrolle des Staates über die Datenverarbeitung in private Hände fällt. </p>
<p> Um die Kontrolle über die Datenverarbeitung der Menschen zu behalten, dürfen öffentliche Einrichtungen dies nicht mit proprietärer Software tun (Software, die unter der Kontrolle eines anderen als dem Staat ist). Und sie dürfen sie nicht einem Dienst anvertrauen, der von einem anderen als dem Staat programmiert und betrieben wird, denn das wäre SaaSS. </p>
<p> In einem entscheidenden Fall bietet proprietäre Software überhaupt keine Sicherheit ‑ gegen seinen Entwickler. Und der Entwickler könnte anderen zu Angriffen verhelfen. Microsoft zeigt Windows-Programmfehler der NSA (der digitalen Spionagagentur der US-Regierung), bevor es sie behebt. Wir wissen nicht, ob gleiches für Apple gilt, aber sie stehen unter dem gleichen Druck der US-Regierung wie Microsoft. Wenn die Regierung irgendeines anderen Landes solche Software benutzt, gefährdet es die nationale Sicherheit. Möchten Sie, dass die NSA in die Rechner Ihrer Regierung einbricht? Siehe unsere Maßnahmen die Regierungen ergreifen können, um Freie Software zu fördern. </p>
<p> Freie Software und Bildung </p>
<p> Schulen (und dazu gehören alle Aktivitäten im Bildungsbereich) beeinflussen die Zukunft der Gesellschaft durch das, was sie lehren. Sie sollten ausschließlich freie Software lehren, um ihren Einfluss für das Gute zu verwenden. Ein proprietäres Programm zu lehren bedeutet, Abhängigkeit einzuimpfen, was gegen den Bildungsauftrag verstößt. Durch Schulung beim Gebrauch von freier Software werden Schulen die Zukunft der Gesellschaft in Richtung Freiheit leiten und damit talentierten Programmierern helfen, das Handwerk zu meistern. </p>
<p> Sie werden Schülern auch die Gewohnheit zur Zusammenarbeit lehren, anderen helfend. Jede Klasse sollte diese Regel haben: “Liebe Schülerschaft, diese Klasse ist ein Ort, an dem wir unser Wissen teilen. Wenn zum Unterricht Software mitgebracht wird, darf sie nicht für sich behalten. Vielmehr müssen Programmkopien einschließlich -quellcodes mit dem Rest der Klasse geteilt werden, falls jemand anderes davon lernen möchte. Daher ist das Mitbringen proprietärer Software zum Unterricht nicht erlaubt, es sei denn, sie wird zur Nachkonstruktion benötigt.” </p>
<p> Proprietäre Entwickler würden uns die Schülerschaft bestrafen lassen, die im Innersten gut genug sind, um Software zu teilen, und diejenigen zu durchkreuzen, die neugierig genug sind, um es ändern zu wollen. Dies bedeutet eine schlechte Bildung. Siehe https://www.gnu.org/education/ für mehr Diskussionen über die Freie-Software-Nutzung an Schulen. </p>
<p> Freie Software: Mehr als “Vorteile” </p>
<p> Ich werde oft darum gebeten, die „Vorteile“ freier Software zu beschreiben. Doch das Wort Vorteile ist nicht aussagekräftig genug, wenn es um Freiheit geht. Ein Leben ohne Freiheit heißt Unterdrückung, und das gilt für die Datenverarbeitung genauso wie auch für jede andere Tätigkeit in unserem Leben. Wir müssen uns dagegen wehren, den Programmentwicklern oder Datenverarbeitungsdiensten die Kontrolle über unsere Datenverarbeitung zu überlassen. Aus egoistischen Gründen ist das der richtige Schritt, aber nicht nur aus egoistischen Gründen. </p>
<p> Freiheit schließt die Freiheit ein, mit anderen zusammenzuarbeiten. Diese Freiheit leugnen bedeutet sie gespalten zu halten, welches der Anfang eines Schemas ist, sie zu unterdrücken. In der Freie Software-Gemeinschaft ist uns die Wichtigkeit der Freiheit zur Zusammenarbeit deutlich bewusst, weil unsere Arbeit aus organisierter Zusammenarbeit besteht. Wenn ein Freund oder eine Freundin zu Besuch kommt und Sie ein Programm benutzen sieht, könnte er oder sie um eine Kopie bitten. Ein Programm, das davon abhält es weiterzugeben oder „eigentlich nicht“ sagt, ist unsozial. </p>
<p> In der Datenverarbeitung schließt Zusammenarbeit die Weitergabe exakter Kopien eines Programms an andere Nutzer ein. Es schließt auch die Verteilung von selbst geänderten Versionen ein. Freie Software fördert diese Formen der Zusammenarbeit, während proprietäre Software sie verbietet. Sie verbietet die Weitergabe von Kopien und dadurch, dass sie Nutzern den Quellcode versagt, hindert es sie, Änderungen vorzunehmen. SaaSS hat die gleichen Auswirkungen: erfolgt die Datenverarbeitung über das Internet auf dem Server bei jemand anderem, durch eine von jemand anderem gemachte Kopie eines Programms, ist die Software dahinter, die die Datenverarbeitung vornimmt, weder einseh- noch greifbar, man kann sie also nicht weitergeben oder ändern. </p>
<p> Fazit </p>
<p> Wir verdienen es, Kontrolle über unsere eigene Datenverarbeitung zu haben. Wie können wir diese Kontrolle gewinnen? Durch Zurückweisen unfreier Software auf den Rechnern, die wir besitzen oder regelmäßig benutzen, und Zurückweisen von SaaSS. Durch das Entwickeln freier Software (für diejenigen unter uns, die Programmierer sind). Durch die Weigerung, unfreie Software oder SaaSS zu entwickeln oder zu fördern. Durch das Verbreiten dieser Ideen an Andere. </p>
<p> Wir und Tausende von Nutzern haben dies seit 1984 gemacht, so wie wir nun das freie GNU/Linux-Betriebssystem haben, das jedermann ‑ Programmierer oder nicht ‑ benutzen kann. Schließen Sie sich unserer Sache an, als Programmierer oder Aktivist! Machen wir alle Rechnernutzer frei. </p>
<p> Die Free Software Foundation (FSF) ist eine gemeinnützige Organisation mit einer weltweiten Mission die Freiheit von Rechnernutzern zu fördern. Wir verteidigen die Rechte aller Softwarenutzer. </p>
<p> Bei der Übersetzung dieses Werkes wurde mit größter Sorgfalt vorgegangen. Trotzdem können Fehler nicht völlig ausgeschlossen werden. Sollten Sie Fehler bemerken oder Vorschläge, Kommentare oder Fragen zu diesem Dokument haben, wenden Sie sich bitte an unser Übersetzungsteam <web-translators@gnu.org>. </p>
<p> Weitere Informationen über die Koordinierung und Einsendung von Übersetzungen unserer Internetpräsenz finden Sie in der LIESMICH für Übersetzungen. </p>
<p> Bitte beachten Sie: Bei diesem Dokument handelt es sich um eine Übersetzung aus dem Englischen. Die in diesem Dokument enthaltenen Informationen basieren auf der englischsprachigen Artikelfassung. Die Richtigkeit dieser Informationen in Zusammenhang mit der deutschsprachigen Artikelfassung wurde im Rahmen dieser Übersetzung nicht geprüft. Diese Informationen werden ohne Gewähr für Richtigkeit bzw. Funktionalität zur Verfügung gestellt und auch keine Gewähr bezüglich der Vollständigkeit oder Richtigkeit der Übersetzung übernommen. </p>
<p> Warum Freie Software besser ist als „Open-Source-Software“ </p>
<p> Obwohl Freie Software unter einem anderen Namen einem dieselbe Freiheit geben würde, macht es einen großen Unterschied, welchen Namen wir gebrauchen: unterschiedliche Wörter vermitteln unterschiedliche Vorstellungen. </p>
<p> Im Jahr 1998 begannen einige in der Freie-Software-Gemeinschaft den Begriff „Open-Source-Software” anstelle von Freie Software zu benutzen, um zu beschreiben, was sie sich widmen. Der Begriff „Open Source” wurde schnell in Verbindung mit einem anderen Ansatz, einer anderen Philosophie, mit anderen Werten und sogar anderen Kriterien, für die Lizenzen akzeptabel sind, gebracht. Die Freie-Software- und die Open-Source-Bewegung sind heute eigenständige Bewegungen mit unterschiedlichen Ansichten und Zielen, obwohl wir an einigen Projekten zusammenarbeiten. </p>
<p> Der wesentliche Unterschied zwischen den beiden Bewegungen liegt in ihren Werten, ihrer Sichtweisen auf die Welt. Für die Open-Source-Bewegung ist die Frage, ob Software quelloffen sein sollte, eine praktische Frage, keine ethische. Jemand drückte es so aus: „Open Source ist eine Entwicklungsmethodik, Freie Software ist eine soziale Bewegung.“ Für die Open-Source-Bewegung ist unfreie Software eine suboptimale Lösung. Für die Freie-Software-Bewegung ist unfreie Software ein soziales Problem, und Freie Software die Lösung. </p>
<p> Beziehung zwischen Freie-Software- und Open-Source-Bewegung </p>
<p> Die Freie-Software- und die Open-Source-Bewegung sind so etwas wie zwei politische Lager innerhalb der Freie-Software-Gemeinschaft. </p>
<p> Radikale Gruppen waren in den 1960er Jahren berüchtigt für Fraktionsbildung: Organisationen spalteten sich wegen Meinungsverschiedenheiten über Strategiedetails und betrachteten sich einander als Feinde. Oder zumindest ist das das Bild, das Menschen von ihnen haben, ungeachtet dessen ob es wahr war. </p>
<p> Die Beziehung zwischen der Freie-Software- und der Open-Source-Bewegung ist genau das Gegenteil davon. Wir sind unterschiedlicher Meinung über die Grundsätze, aber stimmen mehr oder weniger bei den praktischen Empfehlungen überein. Deshalb können wir an vielen konkreten Projekten zusammenarbeiten. Bei der Open-Source-Bewegung sprechen wir nicht von einem Feind. Der Feind ist proprietäre Software. </p>
<p> Wir sind nicht gegen die Open-Source-Bewegung, aber wir möchten nicht mit ihnen in einen Topf geworfen werden. Wir erkennen an, dass sie zu unserer Gemeinschaft beigetragen haben, aber wir haben diese Gemeinschaft geschaffen, und wir wollen, dass das die Menschen auch wissen. Wir möchten, dass sie unsere Leistungen mit unseren Werten und unserer Philosophie verbinden, nicht mit ihren. Wir wollen gehört werden, nicht hinter einer Gruppe mit unterschiedlichen Ansichten verstecken. Um zu verhindern, dass man denkt wir wären ein Teil von ihnen, bemühen wir uns im Gespräch die Wörter „offen“, um Freie Software zu beschreiben, oder dessen Gegenteil „geschlossen“, um unfreie Software zu beschreiben, zu vermeiden. </p>
<p> Deshalb erwähnen Sie bitte die Freie-Software-Bewegung, wenn Sie über unsere geleistete Arbeit und über die von uns entwickelte Software sprechen – wie beispielsweise das GNU/Linux-Betriebssystem. </p>
<p> Vergleich der beiden Begriffe </p>
<p> Der restliche Artikel vergleicht die beiden Begriffe Freie Software und „Open Source“. Er zeigt, warum der Begriff „Open Source“ keine Probleme löst, sondern in der Tat welche schafft. </p>
<p> Zweideutigkeit </p>
<p> Der Begriff Freie Software hat ein Mehrdeutigkeitsproblem: die unbeabsichtigte Bedeutung ‚Software, die man kostenlos erhalten kann‘ passt genau so gut wie die beabsichtigte Bedeutung ‚Software, die dem Benutzer bestimmte Freiheiten gewährt‘. Wir haben uns diesem Problem angenommen und eine genauere Definition verfasst, Freie Software. Was ist das? Die Lösung ist jedoch nicht perfekt und kann das Problem nicht vollständig beseitigen. Ein eindeutig richtiger Begriff wäre besser, wenn dies nicht andere Probleme mit sich brächte. </p>
<p> Unglücklicherweise haben alle Alternativen im Englischen ihre eigenem Probleme. Wir haben uns viele andere vorgeschlagene Alternativen angesehen, aber keine davon ist so richtig eindeutig, dass ein Wechsel eine gute Idee wäre. Jede vorgeschlagene Ersetzung für Freie Software hat ein ähnliches semantisches Problem oder noch schlimmer – und dazu gehört auch Open-Source-Software. </p>
<p> Die offizielle Definition von Open-Source-Software (OSS), wie von der Open Source Initiative (OSI) veröffentlicht, kommt unserer von Freie Software sehr nahe. Allerdings ist sie in mancherlei Hinsicht etwas lockerer und es wurden ein paar Lizenzen für Nutzer akzeptiert, die wir als unzumutbar einschränkend betrachten. Doch die offensichtliche Bedeutung für „Open-Source-Software“ ist: ‚Man kann sich den Quellcode ansehen.‘ Das ist ein viel schwächeres Kriterium als es Freie Software hat. Es schließt zwar freie Software ein, aber auch einige proprietäre Programme, einschließlich Xv und Qt unter ihren ursprünglichen Lizenzen (vor der Q Public License). </p>
<p> Diese offensichtliche Bedeutung von „Open Source” ist nicht die Bedeutung, die ihre Befürworter beabsichtigen. Das Ergebnis ist, dass die meisten Personen missverstehen, was jene Befürworter befürworten. So definiert der Autor Neal Stephenson „Open Source”: </p>
<p> „Linux ist ‚Open Source‘-Software bedeutet einfach, dass jemand Kopien der Quellcodedateien bekommen kann.“ </p>
<p> Ich denke nicht, dass er die „offizielle“ Definition absichtlich ablehnt oder bestreitet. Ich denke, dass er einfach die Konventionen der englischen Sprache anwandte, um sich eine Bedeutung für den Begriff einfallen zu lassen. Der US-Bundesstaat Kansas veröffentlichte eine ähnliche Definition: </p>
<p> „Benutzen Sie Open-Source-Software (OSS). OSS ist Software, deren Quellcode frei und öffentlich verfügbar ist, obgleich einzelne Lizenzvereinbarungen variieren können, was man mit diesem Quellcode machen darf.“ </p>
<p> Natürlich haben die Open-Source-Leute versucht, sich diesem Problem durch die Veröffentlichung einer genaueren Definition für den Begriff zu stellen, so wie wir es für Freie Software getan haben. </p>
<p> Aber die Erklärung für Freie Software ist einfach – eine Person, die die Idee von Redefreiheit, nicht Freibier verstanden hat, macht es nicht wieder falsch. Es gibt keine prägnante Art, die offizielle Bedeutung von „Open Source“ zu erklären und deutlich zu zeigen, warum die natürliche Definition falsch ist. </p>
<p> Furcht vor Freiheit </p>
<p> Das Hauptargument für den Begriff „Open-Source-Software“ ist, dass Freie Software manche Leute beunruhigt. Ganz recht, über Freiheit, ethische Fragen, Verantwortung sowie Bequemlichkeit zu sprechen, fordert dazu auf über Dinge nachzudenken, die man lieber ignorieren würde. Dies kann Unbehagen auslösen, und einige lehnen die Votstellung deswegen vielleicht ab. Daraus folgt jedoch nicht, dass die Gesellschaft besser aufgehoben wäre, wenn wir damit aufhören würden über diese Themen zu sprechen. </p>
<p> Vor Jahren schon bemerkten Freie-Software-Entwickler diese Reaktion des Unbehagens, und einige begannen einen Weg zu suchen, um dies zu vermeiden. Sie dachten, würden sie nicht über Ethik und Freiheit sprechen und nur über die unmittelbaren praktischen Vorzüge bestimmter freier Software, dann könnten sie bestimmten Nutzern die Software noch erfolgreicher verkaufen, vor allem an Firmen. Der Begriff „Open Source“ bietet sich an, um genau das verstärkt zu tun – als Möglichkeit, um „für Firmen akzeptabler“ zu sein. Die Ansichten und Werte der Open-Source-Bewegung ergeben sich aus dieser Entscheidung. </p>
<p> Dieser Ansatz hat sich in seinen eigenen Bedingungen als wirksam erwiesen. Heute steigen viele aus rein praktischen Überlegungen auf Freie Software um. Das ist bis zu einem gewissen Grad gut, aber das ist nicht alles, was wir tun müssen! Anwender für Freie Software zu interessieren ist nicht die ganze Arbeit, sondern nur der erste Schritt. </p>
<p> Früher oder später werden diese Anwender aufgefordert, aus irgendeinem praktischen Überlegungen wieder auf proprietäre Software umzusteigen. Unzählige Unternehmen bemühen sich solche Versuchungen anzubieten, und warum sollten Anwender auch ablehnen? Nur wenn sie den Wert der Freiheit kennen den Freie Software gibt, um ihrer selbst Willen. Es liegt an uns, diesen Gedanken zu verbreiten – und um das zu tun, müssen wir über Freiheit sprechen. Ein gewisses Maß des „Schweigens“ gegenüber Unternehmen kann für die Gemeinschaft nützlich sein, aber wir müssen auch verstärkt von Freiheit sprechen. </p>
<p> Derzeit haben wir jede Menge „schweigen“, aber nicht genug Gespräche über Freiheit. Die meisten, die sich mit Freie Software beschäftigen, sprechen wenig über Freiheit – weil sie normalerweise versuchen „für Firmen akzeptabler“ zu sein. Dieses Muster zeigen im Besonderen Softwaredistributoren. Einige Distributoren des Betriebssystems GNU/Linux fügen dem freien Basissystem grundsätzlich proprietäre Pakete hinzu und fordern Anwender auf, dies als Vorteil zu betrachten und nicht als einen Rückschritt der Freiheit. </p>
<p> Wir schaffen es nicht, mit dem Zustrom von Freie-Software-Anwendern Schritt zu halten, um den Menschen, so schnell wie sie hinzukommen, etwas über die Freiheit und über unsere Gemeinschaft zu lehren. Deshalb finden unfreie Software (was Qt, bevor es populär wurde, war) und teilweise Distributionen unfreier Betriebssysteme so fruchtbaren Boden. Jetzt aufzuhören, das Wort Freiheit zu benutzen, wäre ein Fehler. Wir müssen mehr, nicht weniger über Freiheit reden. </p>
<p> Wenn der Gebrauch des Begriffs „Open Source“ mehr Benutzer in unsere Gemeinschaft bringt, ist das ein Beitrag, aber der Rest von uns wird sich sogar noch mehr anstrengen müssen, um diese Benutzer auf das Thema Freiheit aufmerksam zu machen. Wir müssen sagen: „Es ist Freie Software und sie gibt Dir Freiheit!“ – mehr und lauter als je zuvor. </p>
<p> Würde ein Warenzeichen helfen? </p>
<p> Die Befürworter von „Open-Source-Software“ wollten daraus ein Warenzeichen machen, weil sie sagten, das würde Missbrauch verhindern. Diese Initiative wurde später fallen gelassen, weil der Begriff zu sprechend war, um sich als Warenzeichen zu eignen. Daher ist der rechtliche Status von „Open Source“ der gleiche wie der von Freie Software: es gibt keine rechtliche Einschränkung für den Gebrauch. Ich habe Berichte über eine Reihe von Unternehmen gehört, die Softwarepakete „Open Source“ nannten, obwohl diese nicht die offizielle Definition erfüllten; einige habe ich selbst beobachtet. </p>
<p> Aber hätte es einen großen Unterschied gemacht, einen Begriff zu verwenden, der ein Warenzeichen ist? – Nicht unbedingt! </p>
<p> Manchmal treffen Firmen auch Aussagen die bloß den Eindruck erwecken, ein Programm sei „Open-Source-Software“, ohne es ausdrücklich zu nennen. So stand beispielsweise folgendes in einer Ankündigung von IBM zu einem Programm, das die offizielle Definition nicht erfüllte: </p>
<p> „Wie es in der Open-Source-Gemeinschaft üblich ist, werden Benutzer der […] Technologie auch mit IBM zusammenarbeiten können …“ </p>
<p> Das bedeutet eigentlich nicht, dass das Programm „Open Source“ war, aber viele Leser bemerkten dieses Detail nicht. [Ich sollte anmerken, dass sich IBM aufrichtig bemühte, aus diesem Programm Freie Software zu machen und später eine Lizenz übernommen haben, mit der das Programm tatsächlich Freie Software und „quelloffen“ wurde. Aber als die Ankündigung gemacht wurde, konnte man das Programm weder als das eine noch als das andere bezeichnen.] </p>
<p> Und so bewarb Cygnus Solutions, welche als Freie-Software-Firma gegründet wurde und später den Markt für proprietäre Software erschloss (wie man so sagt), einige proprietäre Softwareprodukte: </p>
<p> „Cygnus Solutions ist führend im Open-Source-Markt und hat soeben zwei Produkte in den [GNU/]Linux-Markt eingeführt.“ </p>
<p> Anders als IBM hat Cygnus nicht versucht aus diesen Paketen Freie Software zu machen, und als solche konnte man die Pakete nicht annähernd bezeichnen. Aber Cygnus hat eigentlich nicht gesagt, es wäre „Open-Source-Software“, sie haben den Begriff nur benutzt, um bei unaufmerksamen Lesern diesen Eindruck zu erwecken. </p>
<p> Diese Beobachtungen legen nahe, dass ein Warenzeichen das Durcheinander, das durch den Begriff „Open Source“ entsteht, nicht wirklich verhindert hätte. </p>
<p> Missverständnisse(?) von „Open Source“ </p>
<p> Die Open-Source-Definition ist deutlich genug, und es liegt auf der Hand, dass sie nicht das typische unfreie Programm qualifiziert. Man würde also meinen, dass ein „Open-Source-Unternehmen“ ein Unternehmen bezeichnet, dessen Produkte Freie Software (oder nahe dran) sind, nicht wahr? Leider versuchen viele Firmen, dem Begriff eine andere Bedeutung zu geben. </p>
<p> Beim „Open Source Developers Day“-Treffen im August 1998 sagten einige der eingeladenen kommerziellen Entwickler, sie wollen nur einen Teil ihrer Arbeit zu Freie Software (bzw. „Open Source“) machen. Der Schwerpunkt ihrer Geschäftstätigkeit läge bei der Entwicklung proprietärer Erweiterungen (Software oder Handbücher), um sie Benutzern freier Software zu verkaufen. Sie forderten uns auf, dies als legitim zu betrachten, als Teil unserer Gemeinschaft, weil ein Teil des Geldes für die Freie-Software-Entwicklung gespendet wird. </p>
<p> Tatsächlich bemühen sich diese Unternehmen nur mit dem positiven Stempel von „Open Source“ für ihre proprietären Softwareprodukte zu umgeben – obwohl diese nicht „quelloffen“ sind – nur weil sie irgendeine Beziehung zu freier Software haben oder weil dieselbe Firma auch Freie Software betreut. [Ein Firmengründer sagte recht deutlich, dass sie für das von ihnen betreute Freie-Software-Paket nur so wenig Arbeit investieren wie es die Gemeinschaft durchgehen lässt.] </p>
<p> Im Laufe der Jahre haben viele Firmen zur Freie-Software-Entwicklung beigetragen. Einige dieser Firmen haben in erster Linie unfreie Software entwickelt, aber diese beiden Aktivitäten waren unabhängig voneinander. So konnten wir ihre unfreien Produkte ignorieren und mit ihnen an Freie-Software-Projekten zusammenarbeiten. Danach konnten wir ihnen aufrichtig für die Freie Software danken, die sie beisteuerten, ohne darüber zu sprechen, was sie anderweitig noch taten. </p>
<p> Mit diesen jungen Unternehmen können wir nicht das gleiche tun, weil sie uns nicht lassen. Diese Unternehmen fordern die Öffentlichkeit aktiv dazu auf, alle ihre Aktivitäten über einen Kamm zu scheren. Sie wollen, dass wir ihre unfreie Software ebenso positiv bewerten wie wir einen echten Beitrag bewerten würden, auch wenn es keiner ist. Sie stellen sich selbst als „Open-Source-Unternehmen“ dar, in der Hoffnung wir würden wohlwollende Gefühle für sie entwickeln und diese uns dazu bringen, inkonsequent zu werden. </p>
<p> Diese Beeinflussung wäre nicht weniger schädlich, wenn sie mit dem Begriff Freie Software betrieben würde. Aber Firmen scheinen den Begriff Freie Software nicht auf diese Weise zu benutzen – vielleicht weil die Assoziation mit Idealismus ungeeignet erscheint. Der Begriff „Open Source“ öffnete die Tür dafür. </p>
<p> Bei einer Fachmesse Ende 1998, die dem oft „Linux“ nachgesagten Betriebssystem gewidmet war, war der Hauptredner Führungskraft einer prominenten Softwarefirma. Er wurde wahrscheinlich wegen der Entscheidung seiner Firma eingeladen, dieses System „zu unterstützen“. Leider besteht deren Form der „Unterstützung“ darin unfreie Software zu veröffentlichen, die auf dem System ausgeführt werden kann ‑ mit anderen Worten darin, unsere Gemeinschaft als Markt zu benutzen, aber nichts dazu beizutragen. </p>
<p> Er sagte: „Wir werden unser Produkt auf gar keinen Fall quelloffen machen, aber vielleicht werden wir es „intern“ quelloffen machen. Wenn wir unseren Mitarbeitern zur Kundenunterstützung erlauben auf den Quellcode zuzugreifen, dann können sie für Kunden Fehler beheben und ein besseres Produkt und bessere Dienstleistung anbieten.“ [Das ist kein wörtliches Zitat, weil ich mir seine Worte nicht aufgeschrieben habe, aber sinngemäß stimmt es.] </p>
<p> Personen im Publikum sagten danach zu mir: „Er versteht einfach nicht den Punkt.“ Aber ist das so? Welchen Punkt hat er nicht verstanden? </p>
<p> Den Punkt der Open-Source-Bewegung hat er nicht missverstanden. Diese Bewegung besagt nicht, dass Anwender die Freiheit haben, sondern nur mehr Menschen ermöglicht den Quellcode anzusehen und dazu beizutragen, die Entwicklung schneller und besser zu machen. Diesen Punkt hat die Führungskraft voll und ganz verstanden – widerwillig, diesen Ansatz vollends umzusetzen, einschließlich der Benutzer, erwägte er es teilweise innerhalb des Unternehmens. </p>
<p> Den Punkt, den er verfehlte vorzubringen, ist der, wofür „Open Source“ entworfen wurde: den Punkt, dass Benutzer Freiheit verdienen. </p>
<p> Die Verbreitung des Freiheitsgedanken ist eine große Aufgabe – sie benötigt auch Ihre Hilfe. Darum halten wir im GNU-Projekt am Begriff Freie Software fest, um bei dieser Aufgabe zu unterstützen. Wenn Sie das Gefühl haben, dass Freiheit und Gemeinschaft um ihrer selbst willen wichtig sind – nicht nur aus Zweckdienlichkeit – dann verwenden Sie bitte mit uns den Begriff Freie Software. </p>
<p> Die von Lakhani und Wolf 2005 veröffentlichte Ausarbeitung Why Hackers Do What They Do: Understanding Motivation and Effort in Free/Open Source Software Projects geht davon aus, dass ein beträchtlicher Teil der Entwickler von der Sichtweise motiviert wird, Software müsse frei sein. Dies trotz der Tatsache, obwohl Entwickler auf SourceForge befragt wurden, einer Internetpräsenz, die nicht die Auffassung teilt, dass dies eine ethische Frage sei. </p>
<p> Die Free Software Foundation (FSF) ist eine gemeinnützige Organisation mit einer weltweiten Mission die Freiheit von Rechnernutzern zu fördern. Wir verteidigen die Rechte aller Softwarenutzer. </p>
<p> Bei der Übersetzung dieses Werkes wurde mit größter Sorgfalt vorgegangen. Trotzdem können Fehler nicht völlig ausgeschlossen werden. Sollten Sie Fehler bemerken oder Vorschläge, Kommentare oder Fragen zu diesem Dokument haben, wenden Sie sich bitte an unser Übersetzungsteam <web-translators@gnu.org>. </p>
<p> Weitere Informationen über die Koordinierung und Einsendung von Übersetzungen unserer Internetpräsenz finden Sie in der LIESMICH für Übersetzungen. </p>
<p> Bitte beachten Sie: Bei diesem Dokument handelt es sich um eine Übersetzung aus dem Englischen. Die in diesem Dokument enthaltenen Informationen basieren auf der englischsprachigen Artikelfassung. Die Richtigkeit dieser Informationen in Zusammenhang mit der deutschsprachigen Artikelfassung wurde im Rahmen dieser Übersetzung nicht geprüft. Diese Informationen werden ohne Gewähr für Richtigkeit bzw. Funktionalität zur Verfügung gestellt und auch keine Gewähr bezüglich der Vollständigkeit oder Richtigkeit der Übersetzung übernommen. </p>
<p> Übersetzung: Richard Steuer und Michael Fötsch, 2006. Jоегg Kоhпе <www-de>, 2011, 2016. </p>
<p> Die Free Software Foundation (FSF, deutsch Stiftung für freie Software) ist eine nichtstaatliche Stiftung, die als gemeinnützige Organisation 1985 von Richard Stallman mit dem Zweck gegründet wurde, freie Software zu fördern und für diese Arbeit Kapital zusammenzutragen. Executive Director der Free Software Foundation ist seit 2011 John Sullivan (Stand: 30. Dezember 2016). </p>
<p> Bis Mitte der 1990er wurden die Finanzmittel der FSF im Wesentlichen dazu verwendet, Programmierer für die Entwicklung freier Software anzustellen. Seitdem viele Unternehmen und Privatpersonen begonnen haben, selbständig freie Software zu schreiben, konzentriert sich die Arbeit der FSF zunehmend auf rechtliche und strukturelle Belange der Freie-Software-Gemeinschaft. </p>
<p> Die Hauptaufgabe der FSF ist die finanzielle, personelle, technische und juristische Unterstützung des GNU-Projekts (und damit neben der Software auch der Lizenzen GPL, LGPL, AGPL und GFDL). Neben dieser Arbeit bemüht sich die FSF gleichzeitig um allgemeine Beratung, Berichterstattung und Aufklärung rund um freie Software. </p>
<p> Das GPLv3.fsf.org-Projekt beinhaltet die Ausarbeitung und die Kommunikation rund um die Schaffung der neuen Version der GNU-Lizenzen. </p>
<p> Das Projekt GPL Compliance Lab bemüht sich, rechtliche Verstöße gegen die GNU General Public License, aber auch gegen andere GNU-Lizenzen zu ahnden bzw. Rechteinhabern bei Verstößen gegen die Lizenzen rechtlichen Beistand zu gewähren und entsprechend zu beraten. In diesem Rahmen werden auch Fragen bezüglich der Lizenzierung von Software beantwortet. </p>
<p> Die Software des GNU-Projekts wird dabei neben anderer Software vom GNU-Savannah-Projekt gehostet, das eine Infrastruktur zur Entwicklung und Koordination freier Software bietet. </p>
<p> Die FSF hat die Kampagne Defective by Design gestartet, die sich gegen die Digitale Rechteverwaltung (englisch Digital Rights Management, DRM, von der FSF als Digital Restrictions Management bezeichnet) wehrt.[1] In DRM sieht die Free Software Foundation die Gefahr der „Zerstörung der digitalen Zukunft“. </p>
<p> Mit der Kampagne Badvista gegen das Microsoft-Betriebssystem Windows Vista soll der Computernutzer über die Nachteile des proprietären Betriebssystems aufgeklärt werden. Zudem werden freie Betriebssysteme, welche dem Nutzer mehr Freiheiten lassen, als Alternativen präsentiert. Kritisiert wird unter anderem, dass die Gerätetreiber bei jeder Aktualisierung deaktiviert werden können, wenn Microsoft sich dazu entschließt. Das soll mit den Geräten jener Hersteller geschehen, von denen Microsoft meint, es schützt unzulänglich vor dem Umgehen der vorgesehenen Nutzungsbeschränkungen.[2] </p>
<p> Die FSF unterhält ein „Respects Your Freedom“ (RYF) Produkt-Zertifizierungsprogramm, um die Herstellung und den Verkauf von Hardware zu fördern, die Freiheit und Privatsphäre des Nutzers respektiert. Um den Anforderungen zu entsprechen, muss ein Produkt 100 % Freie Software nutzen, frei von Hintertüren sein und andere Anforderungen erfüllen.[3] </p>
<p> Am 10. März 2001 wurde die Free Software Foundation Europe gegründet, um die Belange freier Software im europäischen Raum zu vertreten. Da es bisher keine allgemeine europaweit gültige Regelung für gemeinnützige Organisationen gibt, agiert die FSFE als Schirm-Organisation für die so genannten Chapters in den unterschiedlichen Ländern Europas. Als Schwesterorganisation der Free Software Foundation in den USA konzentriert sie ihre Aktivitäten im Umkreis des GNU-Projekts, beschränkt sich aber nicht darauf. Präsident der FSFE ist Matthias Kirschner. </p>
<p> Die FSFE versteht es als ihre Hauptaufgabe, Initiativen freier Software in Europa zu koordinieren, ein Kompetenzzentrum für Politiker, Anwälte und Journalisten bereitzustellen und die Infrastruktur für freie Softwareprojekte und speziell das GNU-Projekt zur Verfügung zu stellen. </p>
<p> Am 25. November 2002 startete die FSF das FSF Associate Membership Programm für Einzelpersonen. Im März 2005 hatten sich mehr als 3400 Mitglieder angemeldet. </p>
<p> Am 5. März 2003 wurde das Corporate Patron Programm für Unternehmen ins Leben gerufen. Mittlerweile unterstützen 45 Firmen dieses Projekt. </p>
<p> Advertising Enquiry </p>
<p> We always like to be transparent on pricing but we customise each campaign specifically for each client so pricing can differ in many ways , so we highly suggest you complete this form below and one of our campaign specialists will contact you to discuss all your requirements. </p>
<p> If your enquiring about a personal page just leave the company details blank. </p>
<p> Advertising Enquiry </p>
<p> We always like to be transparent on pricing but we customise each campaign specifically for each client so pricing can differ in many ways , so we highly suggest you complete this form below and one of our campaign specialists will contact you to discuss all your requirements. </p>
<p> If your enquiring about a personal page just leave the company details blank. </p>
<p> Die Free Software Foundation (FSF, deutsch Stiftung für freie Software) ist eine nichtstaatliche Stiftung, die als gemeinnützige Organisation 1985 von Richard Stallman mit dem Zweck gegründet wurde, freie Software zu fördern und für diese Arbeit Kapital zusammenzutragen. Executive Director der Free Software Foundation ist seit 2011 John Sullivan (Stand: 30. Dezember 2016). </p>
<p> Bis Mitte der 1990er wurden die Finanzmittel der FSF im Wesentlichen dazu verwendet, Programmierer für die Entwicklung freier Software anzustellen. Seitdem viele Unternehmen und Privatpersonen begonnen haben, selbständig freie Software zu schreiben, konzentriert sich die Arbeit der FSF zunehmend auf rechtliche und strukturelle Belange der Freie-Software-Gemeinschaft. </p>
<p> Die Hauptaufgabe der FSF ist die finanzielle, personelle, technische und juristische Unterstützung des GNU-Projekts (und damit neben der Software auch der Lizenzen GPL, LGPL, AGPL und GFDL). Neben dieser Arbeit bemüht sich die FSF gleichzeitig um allgemeine Beratung, Berichterstattung und Aufklärung rund um freie Software. </p>
<p> Das GPLv3.fsf.org-Projekt beinhaltet die Ausarbeitung und die Kommunikation rund um die Schaffung der neuen Version der GNU-Lizenzen. </p>
<p> Das Projekt GPL Compliance Lab bemüht sich, rechtliche Verstöße gegen die GNU General Public License, aber auch gegen andere GNU-Lizenzen zu ahnden bzw. Rechteinhabern bei Verstößen gegen die Lizenzen rechtlichen Beistand zu gewähren und entsprechend zu beraten. In diesem Rahmen werden auch Fragen bezüglich der Lizenzierung von Software beantwortet. </p>
<p> Die Software des GNU-Projekts wird dabei neben anderer Software vom GNU-Savannah-Projekt gehostet, das eine Infrastruktur zur Entwicklung und Koordination freier Software bietet. </p>
<p> Die FSF hat die Kampagne Defective by Design gestartet, die sich gegen die Digitale Rechteverwaltung (englisch Digital Rights Management, DRM, von der FSF als Digital Restrictions Management bezeichnet) wehrt.[1] In DRM sieht die Free Software Foundation die Gefahr der „Zerstörung der digitalen Zukunft“. </p>
<p> Mit der Kampagne Badvista gegen das Microsoft-Betriebssystem Windows Vista soll der Computernutzer über die Nachteile des proprietären Betriebssystems aufgeklärt werden. Zudem werden freie Betriebssysteme, welche dem Nutzer mehr Freiheiten lassen, als Alternativen präsentiert. Kritisiert wird unter anderem, dass die Gerätetreiber bei jeder Aktualisierung deaktiviert werden können, wenn Microsoft sich dazu entschließt. Das soll mit den Geräten jener Hersteller geschehen, von denen Microsoft meint, es schützt unzulänglich vor dem Umgehen der vorgesehenen Nutzungsbeschränkungen.[2] </p>
<p> Die FSF unterhält ein „Respects Your Freedom“ (RYF) Produkt-Zertifizierungsprogramm, um die Herstellung und den Verkauf von Hardware zu fördern, die Freiheit und Privatsphäre des Nutzers respektiert. Um den Anforderungen zu entsprechen, muss ein Produkt 100 % Freie Software nutzen, frei von Hintertüren sein und andere Anforderungen erfüllen.[3] </p>
<p> Am 10. März 2001 wurde die Free Software Foundation Europe gegründet, um die Belange freier Software im europäischen Raum zu vertreten. Da es bisher keine allgemeine europaweit gültige Regelung für gemeinnützige Organisationen gibt, agiert die FSFE als Schirm-Organisation für die so genannten Chapters in den unterschiedlichen Ländern Europas. Als Schwesterorganisation der Free Software Foundation in den USA konzentriert sie ihre Aktivitäten im Umkreis des GNU-Projekts, beschränkt sich aber nicht darauf. Präsident der FSFE ist Matthias Kirschner. </p>
<p> Die FSFE versteht es als ihre Hauptaufgabe, Initiativen freier Software in Europa zu koordinieren, ein Kompetenzzentrum für Politiker, Anwälte und Journalisten bereitzustellen und die Infrastruktur für freie Softwareprojekte und speziell das GNU-Projekt zur Verfügung zu stellen. </p>
<p> Am 25. November 2002 startete die FSF das FSF Associate Membership Programm für Einzelpersonen. Im März 2005 hatten sich mehr als 3400 Mitglieder angemeldet. </p>
<p> Am 5. März 2003 wurde das Corporate Patron Programm für Unternehmen ins Leben gerufen. Mittlerweile unterstützen 45 Firmen dieses Projekt. </p>
<p> Der Text ist unter der Lizenz „Creative Commons Attribution/Share Alike“ verfügbar; Informationen zu den Urhebern und zum Lizenzstatus eingebundener Mediendateien (etwa Bilder oder Videos) können im Regelfall durch Anklicken dieser abgerufen werden. Möglicherweise unterliegen die Inhalte jeweils zusätzlichen Bedingungen. Durch die Nutzung dieser Website erklären Sie sich mit den Nutzungsbedingungen und der Datenschutzrichtlinie einverstanden. Wikipedia® ist eine eingetragene Marke der Wikimedia Foundation Inc. </p>
<p> Freie Software. Was ist das? </p>
<p> Freie-Software-Definition </p>
<p> Haben Sie eine hier nicht beantwortete Frage bezüglich Freie-Software-Lizenzierung? Siehe auch unsere weiteren Ressourcen zur Lizenzierung, bei unbeantworteten Anliegen wenden Sie sich bitte unter licensing@fsf.org an das FSF Compliance Lab. </p>
<p> Die Freie-Software-Definition soll verdeutlichen, welche Kriterien ein einzelnes Softwareprogramm erfüllen muss um als Freie Software betrachtet zu werden. Von Zeit zu Zeit wird diese Definition überarbeitet, um dies zu verdeutlichen oder Fragen zu subtilen Problemen zu lösen. Weitere Informationen zu gemachten Änderungen sind unter Historie zu finden. </p>
<p> Die „Open-Source“-Definition ist etwas anderes: eine ganz andere Philosophie, die auf anderen Werten beruht. Auch die praktische Definition ist anders, jedoch sind alle quelloffenen Programme in der Tat beinahe frei. Den Unterschied erklären wir in Warum „Open Source“ das Ziel Freie Software verfehlt. </p>
<p> Freie Software ist Software, die die Freiheit und Gemeinschaft der Nutzer respektiert. Ganz allgemein bedeutet das, dass Nutzer die Freiheit haben Software auszuführen, zu kopieren, zu verbreiten, zu untersuchen, zu ändern und zu verbessern. Freie Software ist daher eine Frage der Freiheit, nicht des Preises. Um das Konzept zu verstehen sollte man an frei wie in Redefreiheit denken, nicht wie in Freibier. Manchmal nennen wir sie auch Libre Software, dem französischen bzw. spanischen Wort für frei wie in Freiheit entlehnt, um deutlich zu machen, dass wir uns keinesfalls auf Software beziehen die gratis sei. </p>
<p> Wir kämpfen für diese Freiheiten, weil sie jedermann verdient. Mit diesen Freiheiten kontrollieren Nutzer (sowohl einzeln als auch gemeinsam) das Programm und was es für sie ausführt. Wenn nicht Nutzer das Programm kontrollieren, nennen wir es ein unfreies bzw. proprietäres Programm. Das unfreie Programm kontrolliert die Nutzer, und der Entwickler kontrolliert das Programm. Dies macht das Programm zu einem Instrument ungerechter Macht. </p>
<p> Vier wesentliche Freiheiten </p>
<p> Ein Programm ist Freie Software, wenn Nutzer eines Programms über vier wesentliche Freiheiten[1] verfügen: </p>
<p> Die Freiheit, das Programm auszuführen wie man möchte, für jeden Zweck (Freiheit 0). </p>
<p> Die Freiheit, die Funktionsweise des Programms zu untersuchen und eigenen Datenverarbeitungbedürfnissen anzupassen (Freiheit 1). Der Zugang zum Quellcode ist dafür Voraussetzung. </p>
<p> Die Freiheit, das Programm zu redistribuieren und damit Mitmenschen zu helfen (Freiheit 2). </p>
<p> Die Freiheit, das Programm zu verbessern und diese Verbesserungen der Öffentlichkeit freizugeben, damit die gesamte Gesellschaft davon profitiert (Freiheit 3). Der Zugang zum Quellcode ist dafür Voraussetzung. </p>
<p> Ein Programm ist freie Software, wenn es Nutzern adäquat all diese Freiheiten gewährt. Ansonsten ist es unfrei. Solange wir verschiedene unfreie Vertriebsschemata in Bezug darauf unterscheiden können, inwieweit sie dahinter zurückbleiben frei zu sein, betrachten wir sie alle gleichermaßen als unethisch. </p>
<p> In jedem angenommenen Szenario müssen diese Freiheiten zutreffen ‑ welchen Quellcode auch immer wir beabsichtigen zu benutzen (oder andere bewegen zu benutzen). Betrachten wir beispielsweise ein Programm namens A, das automatisch ein Programm namens B startet um irgendetwas zu verarbeiten. Wenn wir beabsichtigen A unverändert zu distribuieren, impliziert das, dass dessen Nutzer B ebenfalls benötigen ‑ wir müssen somit entscheiden ob sowohl A als auch B frei sind. Wenn wir beabsichtigen A so zu modifizieren, damit es B nicht mehr benötigt, muss nur A frei sein, B ist für dieses Vorhaben nicht relevant. </p>
<p> Freie Software ist nicht gleichbedeutend mit unkommerziell. Ein freies Programm muss für die kommerzielle Nutzung, die kommerzielle Entwicklung und den kommerziellen Vertrieb verfügbar sein. Die kommerzielle Entwicklung von freier Software ist nicht mehr unüblich. Solche freie kommerzielle Software ist sehr wichtig. Möglicherweise hat man Geld für Kopien freier Software ausgegeben oder Kopien unentgeltlich erhalten. Aber egal wie man die Kopien erhalten hat, man hat immer die Freiheit die Software zu kopieren und zu ändern, sogar Kopien zu verkaufen. </p>
<p> Der weitere Text erläutert, was bestimmte Freiheiten adäquat macht oder nicht. </p>
<p> Die Freiheit, das Programm auszuführen wie man möchte </p>
<p> Die Freiheit, das Programm auszuführen bedeutet für jegliche Person oder Organisation die Freiheit zu haben, es auf jedem beliebigen Rechner für jede Art von Aufgabe und Zweck nutzen zu dürfen, ohne darüber mit dem Entwickler oder irgendeinem Unternehmen kommunizieren zu müssen. In dieser Freiheit ist der Nutzer das Ziel, nicht der Entwickler! Dem Nutzer steht es frei das Programm für eigene Zwecke auszuführen, und wenn man es an jemand anderen weitergibt, steht es dieser Person dann frei es für eigene Zwecke auszuführen, aber man ist nicht berechtigt, ihr eigene Absichten aufzuerlegen. </p>
<p> Die Freiheit, das Programm auszuführen wie man möchte bedeutet, dass einem nicht untersagt oder davon abgehalten wird, es auszuführen. Dies hat nichts mit der Funktionalität des Programm zu tun, ob es technisch dazu in der Lage ist in einer bestimmten Umgebung zu funktionieren oder ob es für einen bestimmten Bereich der Datenverarbeitung sinnvoll ist. </p>
<p> Die Freiheit, den Quellcode zu untersuchen und Änderungen vorzunehmen </p>
<p> Damit Freiheit 1 und 3 (die Freiheiten, Änderungen vorzunehmen und geänderte Versionen zu veröffentlichen) sinnvoll sind, müssen Nutzer Zugang zum Quellcode des Programms haben. Daher ist die Zugänglichkeit des Quellcodes eine notwendige Bedingung für Freie Software. Verschleierter „Quellcode“ ist nicht wirklich Quellcode und zählt nicht als solcher. </p>
<p> Freiheit 1 umfasst die Freiheit, die eigene geänderte Version anstelle des Originals zu verwenden. Kommt das Programm in einem Produkt zum Einsatz, in dem die modifizierte Version eines Dritten, nicht jedoch die eigene ‑ eine als Tivoisierung bzw. Abriegelung (engl. ‚Lockdown‘) oder (in seiner praktizierenden perversen Terminologie) als „Secure Boot“[*] bekannte Praxis ‑ ausgeführt wird, wird Freiheit 1 eher zu einem fadenscheinigen Vorwand anstatt einer praktischen Realität. Diese Binärdateien sind nicht freie Software, selbst wenn der Quellcode, von dem sie kompiliert werden, frei ist. </p>
<p> Die Zusammenführung der verfügbaren freien Unterroutinen und -modulen ist eine wichtige Möglichkeit ein Programm zu modifizieren. Wenn die Programmlizenz eines entsprechend lizenzierten vorhandenen Moduls die Zusammenführung untersagt ‑ beispielsweise wenn man nicht der Copyrightinhaber des hinzuzufügenden Quellcodes ist ‑ dann ist die Lizenz zu restriktiv, um sich als frei zu qualifizieren. </p>
<p> Ob eine Änderung eine Verbesserung darstellt, ist eine subjektive Angelegenheit. Wenn das Recht ein Programm zu modifizieren im Wesentlichen auf Änderungen beschränkt wird, die jemand anderes als Verbesserung betrachtet, ist das Programm unfrei. </p>
<p> Die Freiheit zu redistribuieren, wenn man möchte: grundlegende Anforderungen </p>
<p> Die Freiheit, das Programm zu redistribuieren und […] der Öffentlichkeit freizugeben (Freiheit 2 und 3) bedeutet, dass man die Freiheit hat Kopien an jedermann überall weiterzugeben (entweder mit oder ohne Modifikationen, gratis oder gegen Gebühr für den Vertrieb). Frei sein bedeutet, diese Dinge (unter anderem) vornehmen zu können, ohne fragen oder für die Berechtigung zahlen zu müssen. </p>
<p> Außerdem sollte man auch die Freiheit haben Modifikationen vorzunehmen und privat im eigenen Werk oder Spiel zu nutzen, ohne auch nur deren Existenz zu erwähnen. Veröffentlicht man die Änderungen, sollte es nicht erforderlich sein, irgendjemand im Besonderen oder auf irgendeine bestimmte Weise zu benachrichtigen. </p>
<p> Freiheit 3 umfasst die Freiheit, eigene modifizierte Versionen als Freie Software freizugeben. Eine freie Lizenz kann auch andere Möglichkeiten der Freigabe zulassen. Mit anderen Worten muss es sich nicht um eine Lizenz mit Copyleft handeln. Allerdings qualifiziert sich eine Lizenz, die von modifizierten Versionen verlangt unfrei zu sein, nicht als freie Lizenz. </p>
<p> Die Freiheit, Programmkopien aufs neue zu distribuieren muss binäre oder ausführbare Formen des Programms als auch den Quellcode für modifizierte und unmodifizierte Versionen beinhalten (die Distribution von Programmen in ausführbarer Form ist für bequem installierbare freie Betriebssysteme notwendig). Es ist in Ordnung, wenn es für bestimmte Anwendungen keine Möglichkeit gibt eine Binärdatei oder ausführbare Form zu erstellen (da einige Programmiersprachen diese Funktion nicht unterstützen), aber man muss die Freiheit haben solche Formen an Dritte weiterzugeben, sollte man eine Möglichkeit finden oder entwickeln, sie zu erstellen. </p>
<p> Copyleft </p>
<p> Bestimmte Richtlinien über die Art und Weise Freie Software zu distribuieren sind akzeptabel, sofern sie nicht den wesentlichen Freiheiten widersprechen. Copyleft ist beispielsweise (sehr vereinfacht) eine Richtlinie, die verhindert, dass bei einer Redistribution des Programms keine Restriktionen hinzugefügt werden können, um Anderen wesentliche Freiheiten zu versagen. Diese Richtlinie widerspricht nicht den wesentlichen Freiheiten ‑ vielmehr schützt es sie. </p>
<p> Richtlinien über Verpackungs- und Distributionsinformationen </p>
<p> Richtlinien, wie man eine modifizierte Version verpacken kann, sind allerdings akzeptabel, sofern sie nicht substantiell die Freiheit einschränken, modifizierte Versionen freizugeben oder modifizierte Versionen privat herzustellen und zu nutzen. Somit ist es akzeptabel, wenn die Lizenz verlangt den Namen der modifizierten Version zu ändern, ein Logo zu entfernen oder eigene Modifikationen als eigene zu identifizieren. Solange diese Bedingungen nicht so aufwändig sind, dass sie die Freigabe der Änderungen effektiv behindern, sind sie zulässig; man nimmt bereits andere Programmänderungen vor, ein paar mehr sollten kein Problem darstellen … </p>
<p> Richtlinien wie ‚wenn Sie Ihre Version auf diese Weise zur Verfügung stellen, müssen Sie sie auch auf diese Weise zur Verfügung stellen‘, können unter derselben Bedingung ebenfalls akzeptabel sein. Solch eine akzeptable Richtlinie wäre beispielsweise dem früheren Entwickler auf dessen Bitte hin eine Kopie der modifizierten und distribuierten Version zukommen lassen zu müssen. [Hinweis: Eine solche Richtlinie lässt immer noch die Wahl, ob man seine Version überhaupt distribuierten möchte.] Ebenfalls sind Richtlinien akzeptabel, die die Freigabe des Quellcodes für öffentlich einsetzbare Programmversionen an Nutzer verlangen. </p>
<p> Ein besonderes Problem ergibt sich, wenn eine Lizenz die Änderung des Namens erfordert, durch den das Programm aus anderen Programmen aufgerufen wird. Das behindert wirksam die Freigabe der eigenen geänderten Version, um das Original, wenn durch jenen anderen Programmen aufgerufen, zu ersetzen. Diese Art von Anforderung ist nur dann akzeptabel, wenn es eine geeignete Alias-Funktion gibt, die erlaubt, den Namen des Originalprogramms als Decknamen für die modifizierte Version anzugeben. </p>
<p> Ausfuhrbestimmungen </p>
<p> Mitunter können staatliche Ausfuhrkontrollbestimmungen und Handelssanktionen die Freiheit einschränken, Programmkopien international zu distribuieren. Softwareentwickler haben nicht die Macht, diese Restriktionen zu beseitigen oder außer Kraft zu setzen, aber sie können und müssen sich widersetzen sie als Nutzungsbedingungen des Programms aufzuerlegen. Dadurch betreffen die Restriktionen keine Aktivitäten und Menschen außerhalb der Rechtsordnungen dieser Regierungen. Daher dürfen freie Softwarelizenzen keinen Gehorsam gegenüber allen nicht trivialen Ausfuhrbestimmungen als Bedingung für die Ausübung einer der wesentlichsten Freiheiten verlangen. </p>
<p> Lediglich die bloße Existenz von Ausfuhrbestimmungen ‑ ohne diese zu einer Bedingung der Lizenz selbst zu machen ‑ ist akzeptabel, da dies keine Nutzer beschränkt. Ist eine Ausfuhrbestimmung tatsächlich für Freie Software trivial, dann ist die erforderliche Bedingung kein tatsächliches Problem; jedoch ist sie ein potenzielles Problem, da eine spätere Änderung im Exportgesetz die Erfordernis trivial und damit die Software unfrei machen könnte. </p>
<p> Rechtliche Hinweise </p>
<p> Damit diese Freiheiten wirklich gelten, müssen diese dauerhaft und unwiderruflich sein ‑ solange man nichts Unrechtes anstellt. Sofern Softwareentwickler die Macht haben, die Lizenz zu ihren Bedingungen zu widerrufen oder rückwirkend Restriktionen hinzuzufügen, ohne dafür Anlass gegeben zu haben, ist die Software unfrei. </p>
<p> Eine freie Lizenz darf nicht die Einhaltung einer Lizenz eines unfreien Programms erforderlich machen. Dementsprechend, wenn beispielsweise eine Lizenz die Einhaltung mit den Lizenzen aller genutzten Programme erfordert, würde dies im Falle eines Nutzers, der unfreie Programme ausführt, die Einhaltung mit den Lizenzen dieser unfreien Programme erfordern. Das macht die Lizenz unfrei. </p>
<p> Bei einer freien Lizenz ist die Angabe zulässig, welches Recht anwendbar oder wo Rechtsstreitigkeiten durchgeführt werden müssen oder beides.[**] </p>
<p> Auftragsbezogene Lizenzen </p>
<p> Die meisten freien Softwarelizenzen beruhen auf dem Urheberrecht, und es gibt Restriktionen, welche Arten von Anforderungen durch das Urheberrecht auferlegt werden können. Wenn eine auf dem Urheberrecht beruhende Lizenz Freiheit auf die oben beschriebene Weise respektiert, ist es unwahrscheinlich eine andere Art von Problem zu haben, dass nicht voraussehbar war (obwohl dies gelegentlich vorkommt). Einige freie Softwarelizenzen beruhen allerdings auf Verträgen, und Verträge können eine viel größere Bandbreite möglicher Beschränkungen auferlegen. Das bedeutet, es gibt viele Möglichkeiten wie solch eine Lizenz inakzeptabel restriktiv und unfrei sein könnte. </p>
<p> Es ist unmöglich alle Möglichkeiten aufzuführen, die auftreten könnten. Wenn eine vertragsbasierte Lizenz den Nutzer auf eine ungewöhnliche Weise beschränkt, was auf Urheberrecht beruhende Lizenzen nicht können und welches hier als nicht legitim erwähnt wird, werden wir darüber nachdenken müssen und wahrscheinlich zu dem Schluss kommen, dass sie unfrei ist. </p>
<p> Die richtigen Wörter, wenn es um Freie Software geht </p>
<p> Spricht man über Freie Software, empfiehlt es sich Begriffe wie verschenken oder kostenlos zu vermeiden, weil diese Begriffe implizieren, es würde um den Preis gehen, nicht um Freiheit. Einige gebräuchliche Begriffe wie „Piraterie“ stellen Meinungen dar, von denen wir hoffen, dass Sie diese nicht unterstützen. Weitere voreingenommene oder irreführende Begriffe unter Zu vermeidende Wörter, ebenso verschiedene Übersetzungen des Begriffs Freie Software. </p>
<p> Interpretation diese Kriterien </p>
<p> Abschließend noch der Hinweis, dass die in dieser Freie-Software-Definition angegeben Kriterien sorgfältige Überlegungen bei ihrer Interpretation erfordern. Um zu entscheiden, ob sich eine bestimmte Softwarelizenz als freie Softwarelizenz qualifiziert, beurteilen wir basierend auf diesen Kriterien, ob ihr Geist sowie der genaue Wortlaut passt. Enthält eine Lizenz übertriebene Restriktionen, wird sie abgelehnt, auch wenn wir das Problem in diesen Kriterien nicht erwarteten. Manchmal spricht eine Lizenzanforderung ein Punkt an, der umfangreiche Überlegungen erfordert, einschließlich Diskussionen mit einem Rechtsanwalt, bevor entschieden werden kann, ob diese Anforderung annehmbar ist. Wird ein Punkt zum Abschluss gebracht, werden diese Kriterien aktualisiert, um verständlicher zu machen, warum sich bestimmte Lizenzen qualifizieren oder nicht. </p>
<p> Hilfe zu freien Lizenzen </p>
<p> Weitere Informationen, ob sich eine bestimmte Lizenz als freie Softwarelizenz qualifiziert, sind unter Verschiedene Lizenzen und Kommentare zu finden. Sollte die betreffende Lizenz nicht aufgeführt sein, kontaktieren Sie uns bitte unter <licensing@gnu.org>. </p>
<p> Wenn Sie daran denken eine neue Lizenz zu schreiben, wenden Sie sich bitte zuvor an die Free Software Foundation. Die nur noch schwer überschaubare Ausuferung verschiedener freier Softwarelizenzen bedeutet für Nutzer einen erhöhten Aufwand, die Lizenzen überhaupt zu verstehen. Vielleicht können wir bei der Suche nach einer bereits vorhandenen freien Softwarelizenz behilflich sein, die ihren Bedürfnissen entspricht. </p>
<p> Ist das nicht möglich, wenn tatsächlich eine neue Lizenz benötigt wird, können Sie mit unserer Hilfe sicherstellen, dass die Lizenz wirklich eine freie Softwarelizenz ist und verschiedene praktische Probleme vermeiden. </p>
<p> Jenseits von Software </p>
<p> Software-Handbücher müssen frei sein, aus den gleichen Gründen, warum Software frei sein muss und weil Handbücher in der Tat Bestandteil der Software sind. </p>
<p> Die gleichen Argumente sind auch für andere Arten von Werken von praktischem Nutzen sinnvoll ‑ also Werke, die nützliches Wissen verkörpern wie etwa pädagogische Werke und Nachschlagewerke. Wikipedia ist das wohl bekannteste Beispiel. </p>
<p> Jegliches Werk kann frei sein, und die Freie-Software-Definition ist zu einer Definition von freien kulturellen Werken erweitert worden, die auf Werke jeglicher Art anwendbar sind. </p>
<p> „Open Source“, offener Quellcode? </p>
<p> Eine andere Gruppierung verwendet den Begriff „Open Source“ um etwas ähnliches (aber nicht identisches) wie Freie Software zu meinen. Die Freie-Software-Gemeinschaft bevorzugt den Begriff Freie Software, denn, sobald man gehört hat, dass sich dieser auf Freiheit statt auf den Preis bezieht, ruft es Freiheit in Erinnerung. Das Wort offen bezieht sich niemals auf Freiheit. </p>
<p> Historie </p>
<p> Von Zeit zu Zeit wird diese Freie-Software-Definition überarbeitet. Diese substanziellen Änderungen sowie Verweise veranschaulichen genau, was geändert wurde. </p>
<p> Version 1.153: Klarstellung, dass die Freiheit, das Programm auszuführen, bedeutet, dass einen nichts davon abhält es auszuführen. </p>
<p> Version 1.41: Klarstellung, welcher Quellcode unter einer freien Lizenz stehen muss. </p>
<p> Version 1.135: Freiheit 0 ist die Freiheit, das Programm beliebig auszuführen. </p>
<p> Version 1.134: Freiheit 0 hat nichts mit der Zweckmäßigkeit des Programm zu tun. </p>
<p> Version 1.131: Eine freie Lizenz darf nicht die Einhaltung einer unfreien Lizenz eines anderen Programms verlangen. </p>
<p> Version 1.129: Klarstellung, dass die Wahl des anwendbaren Rechts und des Gerichtsstandes zulässig sind. (Das war immer unser Grundsatz.) </p>
<p> Version 1.122: Eine Ausfuhrkontrollbestimmung ist ‑ wenn die Bedingung nicht trivial ist ‑ ein echtes Problem; andernfalls nur ein potenzielles Problem. </p>
<p> Version 1.118: Klarstellung, dass sich die Angelegenheit auf das Recht beschränkt modifizieren zu dürfen, nicht darauf welche Modifizierungen vorgenommen wurden. Und Modifizierungen sind nicht auf „Verbesserungen“ beschränkt. </p>
<p> Version 1.111: Klarstellung von 1.77, dass alle rückwirkenden Restriktionen inakzeptabel sind. Die Urheberrechtsinhaber können jederzeit zusätzliche Berechtigung für die Nutzung des Werks dadurch einräumen, das Werk auf eine andere Weise parallel freizugeben. </p>
<p> Version 1.105: Spiegelt in einer kurzen Darstellung den Punkt von Freiheit 1 wider (bereits in 1.80 erwähnt), dass man tatsächlich die eigene modifizierte Version für die eigene Datenverarbeitung nutzen darf. </p>
<p> Version 1.92: Klarstellung, dass sich verschleierter Code nicht als Quellcode qualifiziert. </p>
<p> Version 1.90: Klarstellung, dass Freiheit 3 ​​das Recht einräumt, Kopien der eigenen modifizierten oder verbesserten Version zu distribuieren, nicht jedoch die Beteiligung an einem Entwicklungsprojekt bei Dritten. </p>
<p> Version 1.89: Freiheit 3 gewährt das Recht, modifizierte Versionen als Freie Software freizugeben. </p>
<p> Version 1.80: Freiheit 1 muss nicht nur theoretisch, sondern praktisch umsetzbar sein; d. h. keine Tivoisierung. </p>
<p> Version 1.77: Klarstellung, dass alle nachträglichen Lizenzänderungen inakzeptabel sind, auch wenn nicht als vollständiger Ersatz beschrieben. </p>
<p> Version 1.74: Vier Klarstellungen von Punkten, die nicht explizit genug oder an einigen Stellen angegebenen sind, aber nicht überall reflektiert werden: </p>
<p> „Verbesserungen“ bedeutet nicht, dass die Lizenz substantiell einschränken kann, welche Arten von modifizierten Versionen freigegeben werden können. Freiheit 3 enthält die Verbreitung modifizierter Versionen, nicht nur deren Änderungen. </p>
<p> Das Recht, vorhandene Module zusammenzufügen, bezieht sich auf entsprechend lizenzierte Module. </p>
<p> Ausdrücklich die Schlussfolgerung des Punktes über Exportkontrolle. </p>
<p> Einführung einer Lizenzänderung führt zur Aufhebung der alten Lizenz. </p>
<p> Version 1.57: Abschnitt Jenseits von Software hinzugefügt. </p>
<p> Version 1.46: Klarstellung des für die Freiheit bedeutsamen Ziels, das Programm für jeden Zweck auszuführen. </p>
<p> Version 1.41: Klarstellung zum Wortlaut vertraglich geregelter Lizenzen. </p>
<p> Version 1.40: Erklärung, dass eine freie Lizenz erlauben muss, andere verfügbare Freie Software zu verwenden, um eigene Modifizierungen vorzunehmen. </p>
<p> Version 1.39: Es ist akzeptabel, wenn eine Lizenz erfordert, den Quellcode für von Ihnen für die öffentliche Nutzung bereitgestellte Softwareversionen zur Verfügung zu stellen. </p>
<p> Version 1.31: Es ist akzeptabel, wenn eine Lizenz erfordert, sich als Autor von Modifikationen zu identifizieren sowie weitere geringfügige Klarstellungen. </p>
<p> Version 1.23: Potenzielle Probleme im Zusammenhang mit vertragsbasierten Lizenzen. </p>
<p> Version 1.16: Erklärung, warum der Vertrieb von Binärdateien wichtig ist. </p>
<p> Version 1.11: Hinweis, dass eine freie Lizenz vorschreiben kann, auf Nachfrage früherer Entwickler eine Kopie der von Ihnen distribuierten Varianten zu übersenden. </p>
<p> Aufgrund anderer Änderungen an diesem Dokument, die die Definition oder deren Interpretationen selbst nicht beeinflussen, gibt es Lücken in den Versionsnummern. Beispielsweise sind keine Änderungen wie Nebenbemerkungen, Formatierung, Rechtschreibung, Zeichensetzung oder andere aufgeführt. Eine vollständige Übersicht aller Änderungen sind mit Hilfe der CVSweb-Oberfläche zu finden. </p>
<p> Anmerkung </p>
<p> [1] Der Grund, warum die vier Freiheiten mit 0, 1, 2 und 3 nummeriert sind, ist historisch bedingt. Um 1990 gab es drei Freiheiten, nummeriert mit 1, 2 und 3. Dann wurde klar, dass die Freiheit, das Programm für jeglichen Zweck auszuführen, explizit erwähnt werden musste. Diese Freiheit war deutlich elementarer als die anderen drei, sollte also entsprechend vorangestellt sein. Anstatt die anderen nun umzubenennen, wurde sie dem folgend Freiheit 0 benannt. </p>
<p> Anmerkungen des Übersetzungsteams: </p>
<p> [*] Secure Boot soll Rechner bereits vor dem Start des eigentlichen Betriebssystems mit kryptografischen Methoden gegen Angriffe „schützen“. So sollen etwa ausschließlich digital signierte Gerätetreiber mittels vereinheitlichter erweiterbarer Firmware-Schnittstelle (engl. ‚Unified Extensible Firmware Interface, kurz UEFI) bzw. dessen Vorgänger EFI zwischen den einzelnen Komponenten eines Rechners und dem Betriebssystem geladen und ausgeführt werden können. </p>
<p> [**] Dies bezieht sich auf US-Recht. Bei der Zuständigkeit von deutschen Gerichten handelt es sich um die Frage, welches Gericht im Einzelfall die Gerichtsbarkeit ausüben muss, in diesem Sinne also örtlich, sachlich und funktionell zuständig ist. </p>
<p> Die Free Software Foundation (FSF) ist eine gemeinnützige Organisation mit einer weltweiten Mission die Freiheit von Rechnernutzern zu fördern. Wir verteidigen die Rechte aller Softwarenutzer. </p>
<p> Bei der Übersetzung dieses Werkes wurde mit größter Sorgfalt vorgegangen. Trotzdem können Fehler nicht völlig ausgeschlossen werden. Sollten Sie Fehler bemerken oder Vorschläge, Kommentare oder Fragen zu diesem Dokument haben, wenden Sie sich bitte an unser Übersetzungsteam <web-translators@gnu.org>. </p>
<p> Weitere Informationen über die Koordinierung und Einsendung von Übersetzungen unserer Internetpräsenz finden Sie in der LIESMICH für Übersetzungen. </p>
<p> Bitte beachten Sie: Bei diesem Dokument handelt es sich um eine Übersetzung aus dem Englischen. Die in diesem Dokument enthaltenen Informationen basieren auf der englischsprachigen Artikelfassung. Die Richtigkeit dieser Informationen in Zusammenhang mit der deutschsprachigen Artikelfassung wurde im Rahmen dieser Übersetzung nicht geprüft. Diese Informationen werden ohne Gewähr für Richtigkeit bzw. Funktionalität zur Verfügung gestellt und auch keine Gewähr bezüglich der Vollständigkeit oder Richtigkeit der Übersetzung übernommen. </p>
<p> Freie Software </p>
<p> Dieser Artikel erläutert das Lizenzkonzept, das nicht mit dem Lizenzkonzept Freeware zu verwechseln ist. </p>
<p> Freie Software (freiheitsgewährende Software, englisch free software oder auch libre software) bezeichnet Software, die die Freiheit von Computernutzern in den Mittelpunkt stellt. Freie Software wird dadurch definiert, dass ein Nutzer mit dem Empfang[Anm. 1] der Software die Nutzungsrechte mitempfängt und diese ihm nicht vorenthalten oder beschränkt werden.[1][2][3][4] </p>
<p> Insbesondere bedeutet es, </p>
<p> die Freiheit der Kontrolle über die Software (und zwar uneingeschränkte Freiheit der Kontrolle und Unabhängigkeit durch Erhalt des genauen Quellcodes, um Analysen und Änderungen der Software zu erlauben[Anm. 2]), </p>
<p> die soziale Freiheit der Kollaboration, um aktiv mit beliebigen anderen Nutzern und Entwicklern kooperieren zu können (die Software darf kopiert und weitergegeben werden,[Anm. 3] im Original oder mit Veränderung). </p>
<p> Man darf hinsichtlich der Software wahlweise kommerzielle Tätigkeiten anbieten (Softwareanpassungen, Wartungsverträge, Support, Service- und Garantieleistungen usw.).[5] Gewünschte Analyse und Änderungen (siehe Freiheit der Kontrolle) darf wegen gewährter Kollaboration von jedem – auch unabhängigen Dritten seiner eigenen Wahl – durchgeführt werden. </p>
<p> Durch diese Freiheitsrechte wird es dem Nutzer erlaubt, Eigenkontrolle und Privatsphäre[6] über die Software und die eigene Datenverarbeitung zu haben oder Teil einer (öffentlichen oder eigenen[Anm. 4]) Gruppe von Nutzern (Gemeinschaft) zu werden, welche die Software kontrollieren (Kollaboration ist möglich) und für sich nutzen. </p>
<p> Dies steht im Gegensatz zu proprietärer Software (freiheitsentziehender Software), bei der die Entwickler und Distributoren der Software den Endnutzern die genannten Freiheitsrechte explizit entziehen, beispielsweise durch absichtliche Nicht-Auslieferung von Quelltext oder Verbote und Einschränkungen per Vertragsregelungen oder Geheimhaltungsvertrag. </p>
<p> Die 1985 von Richard Stallman gegründete Free Software Foundation (FSF) definiert Software als Freie Software, wenn dem Empfänger per Lizenz folgende Freiheiten eingeräumt werden:[7] </p>
<p> „Freiheit 0“: Die Freiheit, das Programm auszuführen, wie man möchte, für jeden Zweck. </p>
<p> „Freiheit 1“: Die Freiheit, die Funktionsweise des Programms zu untersuchen und eigenen Bedürfnissen der Datenverarbeitung anzupassen.* </p>
<p> „Freiheit 2“: Die Freiheit, das Programm weiterzuverbreiten und damit seinen Mitmenschen zu helfen. </p>
<p> „Freiheit 3“: Die Freiheit, das Programm zu verbessern und diese Verbesserungen der Öffentlichkeit freizugeben, damit die gesamte Gemeinschaft davon profitiert.* </p>
<p> * Für die Freiheiten 1 und 3 ist der Zugang zum Quelltext Voraussetzung, da sonst das Verändern eines Programms schwierig bis unmöglich ist. </p>
<p> Für weitere Informationen dazu siehe den Abschnitt „Definition“. </p>
<p> Die Freie-Software-Bewegung ist aus der Hacker-Gemeinschaft hervorgegangen.[8][9][10] Deren Freiheitsvision[11] manifestiert sich in dem seit September 1983 existierenden GNU-Projekt, der Freien-Software und der 15 Jahre später entstandenen Open-Source-Bewegung. Ein Merkmal eines Hackers ist nicht die Aktivität selbst, sondern die Art wie sie durchgeführt wird. Jemand der beispielsweise für ein Freie-Software-Projekt entwickelt, ist nicht automatisch ein Hacker, aber die Hackergemeinschaft ist eng verknüpft mit diesen Bewegungen. Innerhalb der frühen Hackergemeinschaft der 1960er- und 1970er-Jahre war es an akademischen US-Einrichtungen wie MIT, Stanford, Berkeley und Carnegie Mellon, selbstverständlich, Quellcodes offenzulegen und eigene Softwareverbesserungen mit anderen Programmierern zu teilen. Software wurde damals als Beigabe zu der (teuren) Hardware betrachtet. Ende der 1970er und Anfang der 1980er Jahre fingen IT-Unternehmen an, Software zu kommerzialisieren und den Quelltext geheimzuhalten. Richard Stallman ist ein prominenter Hacker, der wesentliche Beiträge zum Selbstverständnis der akademischen Hackerkultur geleistet hat, unter anderem indem er dieser Entwicklung etwas entgegenstellte.[8][9] </p>
<p> Bis in die 1980er Jahre gab es Freie Software als Public domain Software.[12] Daneben wurde Software frei als gedruckter Quelltext in Computermagazinen und Büchern verbreitet.[13] Die Hackergemeinschaft und das intellektuelle Klima rund um den „AI“-Rechner des MIT inspirierten Richard Stallman maßgeblich zur Schaffung des GNU-Projekts.[10] Das hatte zunächst die Erstellung eines freien Betriebssystems zum Ziel. 1985 folgte die Gründung der FSF, einer Stiftung zur Förderung derartiger Projekte, die im Februar 1986 die erste Definition der Freien Software veröffentlichte. Wobei „frei“ die Freiheiten für die Gesellschaft meint, die ein derart lizenziertes Produkt bietet. </p>
<p> Free-Beer-Verkauf beim Isummit 2008 illustriert Free as in Freedom, not free as in free beer: Rezept und Label des Biers sind unter der CC-BY-SA, also frei wie in Freiheit, es ist aber nicht kostenlos wie Freibier, da es für 500 Yen verkauft wird.[14] </p>
<p> Das englische Wort free hat zwei unterschiedliche Bedeutungen und steht in dem seit 1982 gebräuchlichen Begriff Freeware für „kostenfrei“ (genauer für „kostenlose Software“); in Freie Software (englisch Free Software) steht es für „Freiheit“ (genauer für „freiheitsgewährende Software“). Englischsprachige Aktivisten machen die Unterscheidung mit free as in free beer („frei wie Freibier“) und Free as in Freedom („frei wie in Freiheit“) deutlich. </p>
<p> Freeware räumt dem Benutzer nicht die von der Free Software Foundation aufgelisteten Freiheiten ein, sondern die der individuellen Lizenzvereinbarung mit dem Urheber. Daher gilt sie als „unfreie“ Software. </p>
<p> Freie Software enthält hingegen die genannten Freiheiten und kann, muss aber nicht kostenlos sein. </p>
<p> Der Begriff Open Source (zu deutsch „quelloffen“) wurde 1998 von den Gründern der Open Source Initiative (OSI) eingeführt: Eric S. Raymond, Bruce Perens und Tim O’Reilly. Sie wollten den pragmatischeren Ansatz derartiger Software in den Mittelpunkt stellen, statt auf eine (aus ihrer Sicht) möglicherweise abschreckend wirkende, moralisch aufgeladene und polarisierende Freie-Software-Idee zu setzen.[15][16] Quelloffene Software wird von ihnen als vorteilhaftes Entwicklungsmodell beschrieben, wobei die Frage, ob Software quelloffen sein sollte, dort eine rein praktische und keine ethische Frage ist. </p>
<p> Mit der Betonung der Überlegenheit des Entwicklungsprozesses gibt die OSI eher die Sichtweise der Entwickler wieder,[17] während die FSF auf die Sicht der Anwender fokussiert.[18] Die FSF begreift unfreie Software als gesellschaftliches Problem. In ihren Augen ist die Entscheidung für oder gegen Freie Software deshalb primär eine ethische und soziale Entscheidung; der praktische Nutzen ist sekundär. Da in der Darstellung der OSI die Freiheit, die Freie Software den Benutzern gibt, nicht erwähnt wird, wirft die FSF der OSI eine Ablenkung von den wesentlichen Punkten vor.[19] </p>
<p> Diese zwei unterschiedlichen Bewegungen mit unterschiedlichen Sichtweisen verbindet die gemeinsame Wertschätzung für quelloffenen Code und das Ziel des Aufbaus eines freien Softwareökosystems, was in zahlreichen Projekten mündet, in denen sie zusammenarbeiten. Alternative Kompromissbezeichnungen wie „Free and open source software“ (FOSS) oder „Free/Libre Open Source Software“ (FLOSS), die von Anhängern beider Positionen akzeptiert werden, sollen die Gemeinsamkeiten betonen. </p>
<p> Wegen Bedenken bezüglich kommerzieller Ausnutzung oder amoralischem Gebrauch der eigenen Software gab und gibt es Bestrebungen, nicht alle Freiheiten aus der Definition freier Software in ihrer Lizenz uneingeschränkt zu gewähren. Werden die von der FSF aufgelisteten Freiheiten um die kommerzielle Weiterverbreitung vermindert (aber die sonstigen unverändert beibehalten), wurde dies von der FSF bis 2011 ablehnend als halbfreie Software (englisch semi-free software) bezeichnet. </p>
<p> Seit 2012 nimmt die FSF diese Unterscheidung nicht mehr vor und zählt Software mit derart angepassten Lizenzen zur „unfreien“ Software.[20] </p>
<p> Sind eine oder mehrere Bedingungen der von der FSF aufgelisteten Freiheiten nicht erfüllt, wird die Software als proprietär oder „unfrei“ (im Sinne fehlender Freiheiten) bezeichnet. </p>
<p> Freie Hardware (englisch free hardware, auch bezeichnet als open hardware oder open source hardware) steht der Freie-Software- und Open-Source-Bewegung nahe bzw. geht auf diese zurück. Dabei handelt es sich um Hardware, die nach freien Bauplänen hergestellt wird. </p>
<p> Die auf Februar 1986 datierte früheste bekannte Veröffentlichung der Definition stammt von der (jetzt nicht mehr weitergeführten) „GNU's Bulletin Publication“ der FSF.[21] Die Quelle für dieses Dokument ist im Philosophieabschnitt der Webseite des GNU-Projekts zu finden. Die Definition bezog sich zunächst auf zwei Punkte:[21] </p>
<p> Zitat: “The word ‘free’ in our name does not refer to price; it refers to freedom. </p>
<p> First the freedom to copy a program and redistribute it to your neighbors, so that they can use it as well as you. </p>
<p> Second, the freedom to change a program, so that you can control it instead of it controlling you; for this, the source code must be made available to you.” </p>
<p> Zu deutsch: „Das Wort ‚free‘ in unserem Namen bezieht sich nicht auf den Preis; es bezieht sich auf Freiheit. </p>
<p> Erstens, die Freiheit, ein Programm zu kopieren und an eure Nachbarn weiterzugeben, so dass sie das Programm ebenso wie ihr nutzen können. </p>
<p> Zweitens, die Freiheit, ein Programm abzuändern, so dass ihr das Programm beherrscht und nicht das Programm euch; zu diesem Zwecke muss euch der Quelltext verfügbar gemacht sein.“ </p>
<p> – FSF, 1986 </p>
<p> Im Jahr 1996 wurde Freie Software auf der Webseite gnu.org definiert, indem man sich auf die „drei Ebenen von Freiheit“ bezog und explizit noch hinzufügte, dass man auch die Freiheit haben müsse, die Software studieren zu können. Das kann auch in der älteren Zweipunktedefinition als Teil der Freiheit, das Programm verändern zu können, herausgelesen werden,[22][23] ist dort aber nicht so deutlich hervorgehoben. Später mied Stallman das Wort „Ebene“, weil man alle Freiheiten brauche und das Wort dafür etwas irreführend sei. </p>
<p> Schlussendlich wurde noch eine Freiheit hinzugefügt, die explizit sagt, dass Nutzer die Möglichkeit haben sollten, das Programm auszuführen, wie er möchte, für jeden Zweck. Die bestehenden Freiheiten wurden bereits von eins bis drei nummeriert, aber diese Freiheit sollte vor den anderen kommen; darum wurde sie ergänzt als „Freiheit 0“.[24] </p>
<p> Die moderne Definition definiert Freie Software durch die bereits weiter oben aufgeführten vier Freiheiten.[25] Zusammengefasst definiert sie Freie Software als Software, die Endnutzern die Freiheiten der Nutzung, des Überprüfens/Studierens, des Teilens und des Modifizierens der Software gewährleistet. </p>
<p> Seit April 2008 wird die Definition in 39 Sprachen auf der FSF Webseite veröffentlicht.[26] Ebenfalls veröffentlicht die FSF auf ihrer Webseite eine Liste von Lizenzen, die den Anforderungen an diese Definition gerecht werden. </p>
<p> Die Unterschiede zur Freien Software wurden bereits weiter oben im Abschnitt zur Abgrenzung zur Open-Source-Software verdeutlicht. Demgegenüber gibt es auch viele Gemeinsamkeiten. So wurde beispielsweise die „Debian Free Software Guidelines“ von der Open Source Initiative (OSI) unter dem Namen „Open Source Definition“ verwendet; die einzige Änderung ist die Ersetzung des Begriffs „Freie Software“ durch „Open Source Software“. Die FSF kommentierte dazu folgendes: </p>
<p> Zitat: „Der Begriff Open-Source-Software wird von einigen benutzt, um mehr oder weniger die gleiche Kategorie wie Freie Software zu meinen. Es ist nicht genau die gleiche Softwarekategorie: einige Lizenzen wurden [von der OSI] akzeptiert, die wir als zu restriktiv betrachten, und es gibt Freie Software-Lizenzen, die [von der OSI] nicht akzeptiert wurden. Jedoch sind die Unterschiede in der Erweiterung der Kategorie klein: </p>
<p> sämtliche Freie Software ist öffentlich zugänglicher Quellcode und sämtliche Open-Source-Software ist beinahe frei.“ </p>
<p> Die genannten Ziele von Freier Software, die Freiheit in der Kontrolle der eigenen Datenverarbeitung und die Kooperation, werden durch die Gewährung folgender Rechte erreicht: die Nutzer dürfen Freie Software ausführen, kopieren, verbreiten, untersuchen, ändern und verbessern;[2][3] diese Freiheiten werden gewährt und nicht (wie bei proprietärer Software) entzogen. Entscheidend ist daher nicht die Vermeidung von Kosten, sondern die Freiheiten der Endnutzer. So wird das Kontrollrecht über die Software dadurch garantiert, dass ein Nutzer von Freier Software immer den dazugehörigen Quellcode zur Verfügung hat oder diesen zumindest nachträglich beziehen kann (was untersuchen und modifizieren ermöglicht),- und dadurch, dass ein Nutzer durch gewährte Kooperation dies wahlweise von Anderen durchführen lassen kann. </p>
<p> Freie Software ist an ihrer Lizenz erkennbar. Dazu gehört die GNU General Public License und andere freie Softwarelizenzen.[29] Ein soziales und ethisches Grundprinzip hinter den verfochtenen Rechten an und mit Freier Software ist, dass ihre Entwickler die Freiheit sowie die Gemeinschaft der Endnutzer schätzen und respektieren, weil die Nutzungsbedingungen von Freier Software es Anwendern wie Entwicklern gleichermaßen ermöglichen, ein Umfeld der Unabhängigkeit, Gemeinschaft, Zusammenarbeit, Ethik, Solidarität und des Austauschs zu schaffen und zu gestalten.[30][31][32][33][34][35] </p>
<p> Der Begriff „Freie Software“ und dessen genaue Definition[7] sowie die Unterscheidung zu proprietärer Software[36] so wie der spezifische Freiheitsgedanke gehen entscheidend zurück auf den Beginn des GNU-Projekts um Programmierer-Aktivisten wie Richard Stallman und die damit verbundene Gründung der Free Software Foundation (FSF) im Jahr 1985. </p>
<p> Die in Bezug auf Anspruch und Zielsetzungen zwar eng verwandte, der Wahl ihrer Mittel und Wege dorthin nach nicht identische und eigenständige Open-Source-Bewegung entstand erst später (1998) und in einem anderen personellen Umfeld.[37][38] Der Unterschied zwischen den Ansätzen Freie Software und Open Source liegt vor allem in der jeweiligen Gewichtung prinzipiell gemeinsam vertretener Werte: Im Sinne von Open Source liegt das Hauptaugenmerk beim praktischen Nutzen und den Entwicklungsmethoden,[17] während der Fokus der Freien-Software-Gemeinschaft auf den ethischen, sozialen und politischen Implikationen liegt.[18] </p>
<p> Der Fokus von Freier Software ist also die Freiheit des Anwenders zu teilen, zu kopieren und zu modifizieren und steht den üblichen Beschränkungen proprietärer Software („unfreie Software“ – im Sinne fehlender Freiheiten)[41] entgegen: Bei proprietärer Software versuchen Entwickler, die Endnutzer und den Endverbraucher-Markt zu kontrollieren und zu monopolisieren (etwa durch restriktive Endbenutzer-Lizenzverträge, Geheimhaltungsverträge, Produktaktivierungen, Dongles, Kopiersperren, proprietäre Formate oder den Vertrieb von binären ausführbaren Programmen ohne Quelltexte) und zwingen die Nutzer somit in die Abhängigkeit vom jeweiligen Entwickler-Unternehmen. Freie Software hingegen unterscheidet sich durch die gewährte Freiheit: Verwendung, Teilen, Modifizieren. </p>
<p> Das Selbstverständnis der gewährten Freiheiten ist es, dass diese als notwendig für die Förderung des sozialen und ethischen Anliegens gesehen werden, welches die Freiheit und Gemeinschaft der Nutzer respektiert und wertschätzt (im Bereich von Computer-Nutzung und Datenverarbeitung), indem Freie Software aktiv Zusammenarbeit und Kooperation ermöglicht:[30][31][32] Nutzer haben so die Möglichkeit, im Gebrauch ihrer Computer und Datenverarbeitung eine Gemeinschaft von Wohlwollen und ethischer Aufrichtigkeit gründen zu können. Freie Software kann für jeden Zweck verwendet werden (ohne Notwendigkeit einer Bindung an bestimmte soziale oder ethische Werte), aber die FSF und das GNU-Projekt fördern aktiv die Werte der Freiheit, Gemeinschaft, Zusammenarbeit und ethische Solidarität welche Freie Software ermöglicht.[33][34][35] </p>
<p> Freie Software hat durch ihre Grundsätze einen starken Fokus auf Zusammenarbeit und Zusammenhelfen in einer Gemeinschaft: An öffentlich geführten Freie-Software-Projekten kann sich jeder beteiligen. Dies schließt den kommerziellen und gewerblichen Nutzen nicht aus, da diese Freiheit nicht eingeschränkt wird. Das Wort frei im Begriff Freie Software bezieht sich auf Freiheit und nicht auf kostenlos; Freie Software hat nichts mit monetären Kosten oder Geld zu tun.[42] Freie Software ist in der Regel kostenlos, aber unterliegt keiner solchen Einschränkung. Eine freie Software darf kommerziell verwendet, zu jedem Preis verkauft oder weitervertrieben werden und ist dennoch Freie Software, solange die Freiheitsrechte sichergestellt bleiben. Dafür erlaubt die am häufigsten verwendete GPL jedoch nicht, eine GPL-Software kompiliert zu verkaufen und für die Quelltext-Bereitstellung einen gesonderten hohen Preis zu verlangen (über einer geringen Erstellungsgebühren, z. B. Medium), was Kommerzialisierungsoptionen von GPL-Software in der Praxis einschränken kann.[43][44][45] </p>
<p> Die Freiheiten im Umgang mit Freier Software sind durch Freie-Software-Lizenzen rechtlich verankert und können somit garantiert werden. Zu solchen Lizenzen gehören die GNU General Public License (GPL), welche durch das Copyleft-Prinzip besagt, dass Nutzern von bearbeiteten und wiederveröffentlichten Versionen der Software die gleichen Freiheiten gegeben werden müssen. Aber auch freizügige Lizenzen wie die BSD-Lizenz (die kein Copyleft erfordern) werden als Freie-Software-Lizenzen akzeptiert. </p>
<p> Im Gegensatz zu proprietärer Software, bei der sich ein Code zum unbemerkten Ausspionieren/Überwachen, zur eingeschränkten Nutzung von Medien durch Digitale Beschränkungsverwaltung sowie Hintertüren für unbemerktes ferngesteuertes Einschleusen von Änderungen (ungewollte, unbemerkte „Updates“) befinden kann, bietet Freie Software durch ihre Untersuchbarkeit eine Software, aus der jegliche unerwünschten und schädlichen Eigenschaften entfernt werden können und daher meist von vornherein nicht vorhanden sind. </p>
<p> Bei Freier Software geht es darum, dass Nutzer Freiheiten für die empfangene Software erhalten: in erster Linie den Quelltext (um Änderungen machen zu können). </p>
<p> Software kann einfach geändert oder vervielfältigt werden (im Gegensatz zu materiellen Objekten). Softwarenutzer sollen davon Gebrauch machen können, nicht nur die ursprünglichen Entwickler.[2] </p>
<p> Kochrezepte werden manchmal als Analogie für Freie Software verwendet:[46] Ein Kochrezept ist dann freiheitsgewährend, wenn ein Empfänger es weitergeben darf (mit oder ohne Änderungen). </p>
<p> Dies bedeutet nicht, dass Anhänger der Freien-Software-Bewegung beim Restaurantbesuch das Rezept einer bestellten Speise verlangen, oder auf der Offenlegung des Rezeptes bestehen. Der Grund ist, dass die Speise das Ergebnis (englisch Output) des Kochens ist, nicht eine Variante des Rezepts.[47] (Beim Restaurantbesuch wird eine Speise bestellt, nicht die „Schritte, die zur Speise führen“). In selber Weise bestehen Anhänger der Freien-Software-Bewegung beim Empfang eines Dokuments nicht auf Offenlegung der Software, die zum Erstellen des Dokuments genutzt wurde. Allerdings werden Mitglieder der Freien-Software-Bewegung Daten-Formate ablehnen, die sie zwingen würden, ein proprietäres Programm zum Lesen/Verwenden (oder Abändern) eines Dokuments zu nutzen.[48] </p>
<p> Wenn ein Nutzer Software empfängt, so ist das ausführbare Programm eine direkte Transformation des Quelltextes: Die Schritte im Programm, sind eine direkte Transformation (oder Variante) der Schritte/Beschreibungen im Quelltext. In freiheitsgewährenden Softwarelizenzen, wie der GNU GPL wird dies als „Corresponding Source“ bezeichnet: korrespondierender Quelltext.[49] Wenn Software als Freie Software weitergegeben wird, so muss ein Empfänger das Recht erhalten, den korrespondierenden Quelltext bekommen zu können (meist wird dieser sofort mit ausgeliefert), da somit das Recht gewährt wird, die Freiheit zu haben, die Software in adäquater Weise ändern zu können. Ohne den Quelltext (z. B. nur als binäres ausführbares Programm) ist es oft fast unmöglich, sinnvoll Änderungen an der Software vorzunehmen.[50][51] Dies begründet sich meist durch den für menschliche Leser sehr fremden Maschinen-Code, zu dem der Quelltext bei vielen Programmiersprachen kompiliert wird, um dann auf einem Computer lauffähig zu werden. Diese schwer zu ändernde Form der Software (Maschinen-Code) ist nicht ein Neu-Produkt oder ein etwaig durch Ressourcen-Knappheit schwierig zu erstellendes Artefakt, wenn von dem Quelltext ausgegangen wird. Stattdessen ist es eine komfortable direkte Transformation des Quelltextes. Die Freie-Software-Bewegung plädiert für den Mitempfang des Quelltextes, da nur so der Aspekt der Analyse, Änderbarkeit und Kontrolle ausreichend möglich ist. </p>
<p> Mitglieder der Freie-Software-Gemeinschaft achten bei der Auswahl von Software-Paketen auf die Gewährung von Freiheiten, aus Gründen ihrer eigenen Freiheit. Sie weigern sich zwar oft, proprietäre Software zu nutzen. Sie weigern sich nicht beispielsweise „U-Bahnen zu nutzen wenn diese Computer mit Windows haben, oder zu telefonieren wenn der Anruf durch Verteiler geleitet wird, welche proprietäre Software nutzen, oder Internetverbindungen aufzubauen, wenn diese durch Router geleitet werden, welche proprietäre Software ausführen, oder T-Shirts zu bestellen weil die Hersteller Windows nutzen könnte um T-Shirts herzustellen.“[52][53] Es geht Mitgliedern der Freie-Software-Gemeinschaft primär um die Freiheit in der eigenen Datenverarbeitung. Manche (so die FSF oder FSFE) engagieren sich in Öffentlichkeitsarbeit, um anderen Menschen die entsprechenden Aspekte der Freiheit in der Datenverarbeitung näher zu bringen. </p>
<p> Freiheitsgewährende Software (Freie Software) sagt nichts über die Verfügbarkeit der Software aus: Manche wird als öffentliches Projekt entwickelt (und ist somit jedem verfügbar), andere wird in kundenspezifischem Entwicklungs-Auftrag speziell für Unternehmen, Organisationen, Regierungen oder sogar einzelnen Nutzer entwickelt (und ist somit nur denen verfügbar, außer sie nutzen ihr Recht auf Weitergabe).[54] Jedoch haben alle Empfänger mit dem Empfang der Software die Freiheitsrechte von Freier Software empfangen. </p>
<p> Software, die von einer Vielzahl von Nutzern brauchbar ist (Programme für Textverarbeitung, Webbrowsing), wird bei freiheitsgewährender Software meist in öffentlichen Projekten entwickelt. Diese Programme sind Freie Software, die öffentlich verfügbar ist. Durch die Rechte Freier Software dürfen Nutzer Änderungen an dieser Software vornehmen, oder diese Änderungen verbreiten, ohne die ursprünglichen Entwickler davon benachrichtigen zu müssen.[55] Allerdings werden die Änderungen/Verbesserungen meist dem ursprünglichen Projekt zur Verfügung gestellt. Dadurch können die Verbesserungen ein fixer Teil der öffentliche Software werden (müssen also in dem Fall nicht immer selber dazugefügt werden, da etwaige Beiträge dann von der Community weitergewartet werden. Dies bedingt aber zuerst, dass sich die Koordinatoren des öffentlichen Projekts dafür entschieden haben, die spezifischen Verbesserungen bzw. Änderungen aufzunehmen und einzupflegen); außerdem kommen Verbesserungen der Allgemeinheit zugute, in dem sich die Software durch unterschiedlich Beiträge verbessern kann. Da es bei öffentlichen Projekten Meinungsverschiedenheiten geben kann (oft auf rein technischer Ebene, wo unterschiedliche technische Ziele verfolgt werden können), kommt es dazu, dass ein öffentliches Projekt abgezweigt (ge-„forked“) wird und es fortan in zwei oder mehr unterschiedlichen separaten Varianten öffentlich[Anm. 5] zur Verfügung steht. Dies basiert auf dem Recht, das Freie Software änderbar ist (und die geänderte Version wiederveröffentlichbar ist). </p>
<p> Freiheitsgewährende Software, die einem Empfänger erlauben, die Freiheiten bei darauffolgender Weitergabe wieder zu entziehen, wird freizügige Software genannt. Freiheitsgewährende Software, die sicherstellt, dass empfangene Freiheiten bei Weitergabe der Software weitergegeben werden müssen, wird Copyleft Software genannt. Beides gilt als Freie Software (Copyleft sichert Freiheiten für jeden, in dem die Freiheiten bei Weitergabe nicht wieder entzogen werden dürfen, wie es bei freizügiger Software der Fall ist.) </p>
<p> Programmierer, die substantielle Software der Öffentlichkeit als Freie Software zur Verfügung stellen, wählen (als Urheber) oft eine Freiheitsgewährende Software-Lizenz mit Copyleft, da sie somit verhindern können, dass die Software von Unternehmen aufgegriffen wird und Teile daraus zu proprietärer Software verarbeitet wird, welche Nutzern wieder Freiheitsrechte entziehen würde. Andere wählen ein Dual-License Konzept aus, wo die Software der Öffentlichkeit z. B. als Copyleft zur Verfügung steht, aber die Software gegen Bezahlung zu anderen Bedingungen erhältlich ist. Manche veröffentlichen Programme unter freizügigen Lizenzen (also ohne Copyleft); vor allem dann, wenn das Ziel verfolgt wird, ein Programm so breitflächig wie möglich (selbst für proprietäre Softwareentwickler) nutzbar zu machen (wenn es darum geht ein neues Protokoll oder eine neue Bibliothek zu fördern). </p>
<p> Freie Software darf kommerzielle Software sein (kommerziell und proprietär sind nicht das gleiche). Freie Software darf kommerziell verkauft und weitergegeben[42] und kommerzielle Tätigkeiten (z. B. Support) dürfen angeboten werden. Natürlich darf dies auch gratis geschehen, dann meist mit Verzicht auf Gewährleistung. Freie Software ist aber nie proprietär, indem sie Nutzern die Freiheiten auf Modifizierung und Weitervertrieb verbietet oder unmöglich macht.[56] </p>
<p> Private oder kundenspezifische Software, welche für einen bestimmten Benutzer (normalerweise eine Organisation) entwickelt wurde (normalerweise gegen Bezahlung), und nicht öffentlich verfügbar ist, kann Freie Software sein. Dies ist der Fall, wenn der alleinige Benutzer der Software (der einzige Empfänger der Software), dennoch die vier Freiheiten erhalten hat.[54] </p>
<p> Die Freie-Software-Bewegung lehnt die These ab, dass Programmierer berechtigt seien, Nutzern Freiheiten zu entziehen, um Gewinn zu erzielen. Stattdessen wertet die Freie-Software-Bewegung das Recht auf Freiheit der Nutzer höher als einen finanziellen Gewinn von Programmierern oder Software-Unternehmen, wenn dieser auf Kosten der Freiheit anderer (Eigenkontrolle und/oder Gemeinschaft, oder Privatsphäre) basiert.[57] Deswegen erlaubt die am häufigsten verwendete GPL zwar die Kommerzialisierung, erlaubt jedoch nicht für den Quelltext mehr zu verlangen als für das kompilierte Programm (ausgenommen zusätzlicher Bereitstellungsgebühren z. B. für das Medium), was die Kommerzialisierung von GPL Software erschweren kann.[43][44] </p>
<p> Die Freie-Software-Bewegung ist aber durchaus für eine Bezahlung von Programmierern, wenn diese die Freiheit der Nutzer achten,[58] sowie für alle Geschäftsmöglichkeiten rund um Freie Software (Support, Wartung, Betreuung). Richard Stallman schildert mögliche Szenarien einer Softwaresteuer, mit der eine Regierung Geld für die Entwicklung von allgemeinnütziger Software (die zusätzlich Freiheiten gewährt) zur Verfügung stellen könnte.[59] </p>
<p> Einige Menschen sehen in der Freie-Software-Bewegung Ansätze, die Möglichkeiten zur Überwindung des Kapitalismus zu zeigen. In Deutschland beschäftigt sich unter anderem das Projekt Oekonux mit dieser Thematik. Andere sehen in freier Software lediglich einen weiteren Wettbewerber innerhalb der marktwirtschaftlichen Ordnung. Die Freiheit, die Software in andere Sprachen zu übersetzen, kommt besonders denjenigen Sprachgruppen zugute, für die eine Übersetzung bisher kommerziell nicht interessant war. </p>
<p> Die Freiheit der Software wird vom UNO-Weltgipfel zur Informationsgesellschaft (WSIS) als schützenswert anerkannt. Sie gehört zu den elementaren Forderungen der Zivilgesellschaft, mit der die „Digitale Kluft“ überwunden werden soll. Unter „digitaler Kluft“ wird die Spaltung in Regionen der Erde bezeichnet, die sich die Schaffung von IT-Infrastruktur und damit vor allem die Teilnahme am Internet leisten können, und solchen, die dies nicht können. Anders als bei proprietärer Software fließt bei der Verwendung freier Software kein Geld in fremde Länder ab, wo die Anbieter proprietärer Software ihren Unternehmenshauptsitz haben. Alle Mittel, die vor Ort für die IT bereitstehen, können daher unmittelbar in die IT-Wirtschaft vor Ort einfließen. </p>
<p> „Durch Freie Software haben Entwickler in anderen Kulturräumen die Freiheit, Programme an ihre Sprache und Gegebenheiten anzupassen, um sie dann kommerziell oder nichtkommerziell weiterzugeben. Bei proprietärer Software ist dies generell verboten und von der Gnade des Herstellers abhängig“ </p>
<p> – Georg Greve, damaliger Präsident der Free Software Foundation Europe und Vertreter des zivilgesellschaftlichen WSIS Koordinierungskreises in der deutschen Regierungsdelegation, 2003[60] </p>
<p> 1931 gründete Thomas J. Watson Sr. von IBM ein Methods Research Department um das Wissen zum Betrieb seiner Datenverarbeitungsverfahren zu sammeln und effektiv mit seinen Kunden zu teilen,[61] was IBM mit den Nutzergruppen SHARE (Society to Help Avoid Redundant Effort) und GUIDE für seine Mainframe-Programmierung fortführte.[62] Bis 1970 wurde Software von IBM kostenlos und inklusive Quellcode zur Verfügung gestellt.[63] Zwischen 1960 und 1970 etablierte sich unter anderem an akademischen US-Einrichtungen (Stanford, Berkeley, Carnegie Mellon und MIT) eine „Hacker-Kultur“, für die es selbstverständlich war, eigene Software-Verbesserungen mit anderen Programmierern zu teilen. Programmierer tauschten die Software frei untereinander aus und gaben häufig den entsprechenden Quelltext weiter. Insbesondere in großen Benutzergruppen wie der DEC User Group (DECUS) war dies üblich. Es war gängige Praxis, den Quelltext der mit Computersystemen ausgelieferten Software mitzuliefern. Dadurch kamen viele Vorschläge für Verbesserungen und Fehlerkorrekturen zu den Computerherstellern zurück. Software wurde als Zugabe zu Computern gesehen, um diese nutzbar zu machen. </p>
<p> Am 23. Juni 1969[64] kündigte IBM neue Regeln für die Nutzung und Wartung seiner Software, getrennt von den Hardware-Nutzungsbedingungen an. Für Software wurde urheberrechtlicher Schutz in Verbindung mit Lizenzverträgen eingeführt.[65] Die bislange freie Dienstleistung zur Wartung und Weiterentwicklung von Software wurde gesondert berechnet, was einen eigenen Wirtschaftsmarkt für diesen Dienstleistungssektor begründete. In den späten 1970er-Jahren begannen gleichfalls andere Unternehmen, „Softwarelizenzen“ einzuführen, welche den Nutzen, die Weitergabe und die Möglichkeit der Veränderung der Programme einschränkte. Außerdem wurden viele Programme nicht mehr im Quelltext geliefert, sondern nur noch in maschinenlesbarer Form, zum Schutz der Software als Geschäftsgeheimnis, was eine Veränderung nahezu unmöglich machte. Zusätzlich wurde es mit dem Aufkommen von finanzierbaren Mikrocomputern von IBM, Apple, Atari oder Commodore üblich, Software getrennt von Computer-Hardware zu verkaufen und den Quelltext vor der Konkurrenz zu verbergen, die Software wurde somit proprietär. Immer mehr Hacker wurden von den Softwareunternehmen angestellt, und die bisher wahrgenommenen Freiheiten wurden stark eingeschränkt, Software wurde zu einem künstlich verknappten Gut. </p>
<p> In diese Zeit fiel die Arbeit von Richard Stallman am „AI Lab“ (Abteilung für Künstliche Intelligenz) des Massachusetts Institute of Technology. Als dort ebenfalls proprietäre Software in den Laboren eingeführt wurde, bemühte Stallman sich darum, durch das Programmieren alternativer Software eine Monopolstellung proprietärer Anbieter zu verhindern. Er folgte damit seinen Prinzipien einer wissenschaftlichen Zusammenarbeit, die einen freien und ungehinderten Austausch von Software vorsahen. </p>
<p> „Mit dem Verlust meiner Ge­mein­schaft war es unmöglich, weiter­zu­machen wie zuvor. Statt­dessen stand ich vor einer gänzlich mo­ra­li­schen Ent­schei­dung. </p>
<p> Die einfache Wahl wäre es gewesen, der pro­prietä­ren Software-Welt bei­zu­treten, Ver­traulich­keits­verein­barungen zu unter­zeichnen und zu ver­sprechen, meinen Mit-Hackern nicht zu helfen. Sehr wahr­schein­lich würde ich Software entwickeln, die unter Ver­traulich­keits­verein­barungen ausgegeben würde, und so den Druck auf andere Leute erhöhen, ihre Kameraden auch zu verraten. </p>
<p> Ich hätte auf diese Art Geld verdienen und mich vielleicht mit dem Schreiben von Code vergnügen können. Aber ich wusste, dass ich am Ende meiner Karriere auf Jahre zurück­blicken würde, in denen ich Wände gebaut habe; Wände, welche die Menschen von­einander trennen. Ich würde dann das Gefühl haben, dass ich mein Leben damit verbracht hatte, die Welt zu einem schlech­teren Ort zu machen. […] </p>
<p> Eine andere Wahl­möglich­keit, die direkt, aber un­er­freu­lich gewesen wäre, war, mich überhaupt nicht mehr mit Computern zu befassen. Auf diese Art wären meine Fähig­keiten nicht miss­braucht worden, aber sie wären anderer­seits auch ver­schwendet worden. Ich wäre dann zwar nicht schuld daran, dass Computer-Nutzer von­einander getrennt und ein­ge­schränkt werden, aber ich hätte es auch nicht ver­hindert. </p>
<p> Also suchte ich nach einem Weg, auf dem ein Pro­gram­mierer etwas Gutes tun kann. Ich fragte mich selbst: Gibt es ein Programm oder Programme, die ich schreiben könnte, um wieder eine Gemein­schaft möglich zu machen?“ </p>
<p> Das Unternehmen AT&T entschied sich 1983, eine proprietäre Version seines Unix auf den Markt zu bringen: UNIX System V. Im September 1983 gründete Richard Stallman das GNU Projekt mit dem Ziel, ein freies, UNIX-ähnliches Betriebssystem mit Namen „GNU“ zu entwickeln.[67] </p>
<p> Damit die Idee der Freiheit auch rechtlich abgesichert sein würde, mussten freie Lizenzen erdacht werden. Stallman entwarf das Copyleft-Prinzip, das bedeutet, dass alle, die die Software (mit oder ohne Änderungen) weiter verteilen, die Freiheit zum Weitergeben und Verändern mitgeben müssen. Das Copyleft garantiert, dass alle Benutzer Freiheit haben. Auf diesem Prinzip beruhen die Lizenzen der GNU-Software. </p>
<p> Eine organisatorische Basis für GNU und Freie Software überhaupt ist die 1985 gegründete, gemeinnützige Stiftung Free Software Foundation (FSF). Für Softwareprojekte bestanden in den frühen und mittleren achtziger Jahren noch jeweils individuelle Lizenzen. Stallman verband die Rahmenpunkte zu einer einzelnen Lizenz und veröffentlichte 1989 die GNU General Public License (GNU GPL). Diese ist die heute am stärksten verbreitete Lizenz für Freie Software. </p>
<p> 1991 war das GNU-Betriebssystem bis auf den Kernel vollständig. Einige Leute erkannten, dass Linux, ein damals proprietärer Kernel für Minix, sich für GNU eignen könnte. Nachdem die Entwickler den Linux-Kernel unter die „GNU GPL“ stellten, konnte zum ersten Mal ein vollständig freies Betriebssystem ausgebaut werden. Mit der darauffolgenden rasanten Entwicklung und Verbreitung von GNU und Linux wurde freie Software von zunehmend mehr Menschen genutzt. </p>
<p> Es gab zwei größere Prozesse, bei denen Unternehmen versuchten, freie Software in ihren ausschließlichen Besitz zu bringen: </p>
<p> 1992 klagte AT&T gegen die Universität von Kalifornien um die Rechte an den UNIX-Quellen. Wie sich herausstellte, hatte AT&T die freie universitäre Produktion gesamt in ihren Bestand übernommen und lediglich die Urheberangaben entfernt. Im Rahmen eines Vergleichs erhielt AT&T von etwa 18.000 umstrittenen Dateien ausschließliche Rechten an dreien. </p>
<p> 2003 klagte SCO gegen IBM um die Rechte an den Linux-Quellen. SCO begründete ihren Vorstoß mit angeblichen Verletzungen des UNIX-Copyrights. IBM hätte Quellen aus UNIX illegal nach Linux übertragen. SCO konnten seine Behauptung im Prozess aber nicht belegen. Das Verfahren endete, als sich herausstellte, dass SCO nicht im Besitz von UNIX-Urheberrechten war, sondern diese bei Novell lagen. </p>
<p> Im Juli 2007 waren über 5000 Software-Pakete im „FSF/UNESCO Free Software Directory“ eingetragen,[68] welches 1999 ebenfalls als ein Projekt der FSF startete. </p>
<p> X.Org-Server, eine freie Implementierung des X11-Fenstersystems </p>
<p> KDE, eine Arbeitsumgebung (englisch Desktop-Environment) (integrierte grafische Oberfläche) sowie die gesamte KDE Software Compilation: KDE SC </p>
<p> Eine Studie aus dem Jahr 2015 zeigt, dass die meisten Freie-Software-Projekte beim Webdienst GitHub von wenigen oder nur einem einzigen Entwickler abhängen.[69] </p>
<p> Freie Software kann, gemäß den vier Freiheiten, meist nahezu beliebig kopiert und weitergegeben werden. Freie Software darf zwar zu einem beliebig hohen Preis verkauft werden, doch ist sie fast immer kostenlos im Internet erhältlich, und so ist ihr Verkaufswert auf Datenträgern meist nicht viel höher als die Selbstkosten. Eine bemerkenswerte Ausnahme ist das GNU-Projekt, das Freie Software mit deutlicher Profitspanne anbietet und in den 1980er-Jahren einen erheblichen Teil seiner Einnahmen aus dem Verkauf von Software bestritt. Das GNU-Projekt hatte damals jedoch wegen seiner zentralen Rolle bei der Entwicklung freier Software und der damals geringen Verbreitung und Leistungsfähigkeit des Internets eine besondere Rolle, die es heute nicht mehr gibt. </p>
<p> Einige Geschäftsmodelle, die mit freier Software zu tun haben, konzentrieren sich deswegen auf den Dienstleistungsaspekt der Softwareentwicklung, -weiterentwicklung und -anpassung. Wartung und individuelle Anpassung der Software sowie Schulung und technische Unterstützung sind für die Kunden vorrangig. Unternehmen, die allein diese Dienstleistungen als Geschäftsstrategie gewählt haben, sind zum Beispiel MySQL AB, Red Hat und Qt Development Frameworks. Freie Software unterliegt keiner Rivalität und nicht der Ausschließbarkeit, ist somit ein reines öffentliches Gut und kann folglich nicht einem üblichen Marktgeschehen unterliegen. Dennoch betrachten die Herausgeber proprietärer Software sie als eine ernste Bedrohung für ihr Geschäftsmodell der Lizenzierung und versuchen deshalb, potenzielle Kunden von der Benutzung freier Software abzuhalten. Trotzdem sind Hersteller proprietärer Software aktive Nutzer von freier Software und unterstützen die Verfügbarkeit von proprietärer Software auf Plattformen, die auf freier Software basieren. </p>
<p> Als Argumente für ihre Produkte führen Hersteller proprietärer Software unter anderem mehr Garantien, bessere Qualität – besonders im Hinblick auf Benutzerfreundlichkeit und bessere Dienstleistungen – an. Solche Argumente, die auf Versprechungen von Open Source, nicht von freier Software kontern, hat Richard M. Stallman wiederholt als tendenziös und thematisch verfehlt angegriffen; in seinen Augen ist die Entscheidung für oder gegen Freie Software primär eine ethische und soziale Entscheidung, von der nicht durch Qualitätsdiskussionen abgelenkt werden darf. </p>
<p> Es gibt verschiedene Typen von Softwarelizenzen, die die Kriterien freier Software erfüllen: </p>
<p> Copyleft-Lizenzen, die GNU General Public License (GNU GPL) ist die am häufigsten verwendete. Der Autor behält das Copyright, und es sind Klauseln enthalten, dass veränderte und weitergegebene Software frei bleibt. Auch der Quellcode muss zur Verfügung gestellt werden. </p>
<p> Bei BSD-artigen Lizenzen behält der Autor das Copyright. Diese dem Grundsatz „Ehre, wem Ehre gebührt“ folgende Lizenz enthält den Namen des Autors und oft auch eine Haftungsbeschränkung. Veränderung und Weitergabe in jeder Form ist erlaubt, das heißt, sie darf auch in proprietäre Software eingebaut werden. In diese Klasse fallen die Apache-Lizenz und die MIT-Lizenz. </p>
<p> Gemeinfreiheit. Der Autor verzichtet auf das Copyright. Damit kann jeder alles mit der Software machen, sie etwa in eigene Programme einbauen, verkaufen oder sie selbst wieder zu proprietärer Software machen. Gemeinfreiheit ist jedoch keine Lizenz, sondern ein gemeinfreies Werk ist besitzlos. In Staaten, in denen keine Gemeinfreiheit von Software möglich ist (etwa in Teilen der Europäischen Union), weil etwa die Urheberrechtsgesetze eine bewusste Übergabe in die Gemeinfreiheit nicht zulassen und die Schutzfristen nach dem Tod eines Autors so lang sind, dass noch keine Gemeinfreiheit jemals geschriebener Software eingetreten ist, wird statt der Gemeinfreiheit eine Lizenzierung verwendet, die dem Lizenznehmer keinerlei Verpflichtungen auferlegt und ihn von allen durch die allgemeinen Copyright-Regelungen auferlegten Beschränkungen befreit (zum Beispiel die Do What The Fuck You Want To Public License (WTFPL) oder die CC0). </p>
<p> Hardware-Hersteller gehen immer mehr dazu über, die Schnittstellenspezifikationen geheim zu halten, um der Konkurrenz die Nachahmung technischer Lösungsansätze zu verwehren. Der Grund hierfür liegt im zunehmenden Wettbewerbsdruck und darin, dass es billiger ist und schneller geht, einen solchen Schutz technisch einzubauen, als das errungene geistige Gut durch ein Patent für sich zu reservieren. Wenn nicht öffentlich dokumentiert ist, wie die Geräte anzusteuern sind, erleidet die Hardwareunterstützung freier Betriebssysteme mittels freier Treiber einen schweren Rückschlag, da sie allenfalls noch durch Reverse Engineering in Gang gebracht werden kann. </p>
<p> Andererseits haben die Hersteller die Benutzer der wichtigeren freien Betriebssysteme (vor allem GNU/Linux – wobei insbesondere Linux und der X.Org-Server relevant sind) als Kundengruppe erkannt. Viele von ihnen stellen jedoch proprietäre Treiber zur Verfügung. Diese Treiber stoßen unter den Anhängern freier Software auf höchst geteilte Meinungen: einige sind glücklich darüber, dass sie die „Unterstützung“ der Hardware-Hersteller gewonnen haben und deren Hardware durch das von ihnen bevorzugte Betriebssystem nun mehr oder weniger unterstützt wird, andere lehnen proprietäre Treiber grundsätzlich ab. </p>
<p> Von einer generellen Schnittstellenfreigabe würden die Benutzer freier Betriebssysteme sicherlich profitieren. Neben den ideologischen kommen hier Fragen der Systemstabilität zum Tragen. Sollte beispielsweise ein proprietärer Linux-Netzwerkkartentreiber regelmäßig zu Abstürzen des Systems führen, wären die Linux-Entwickler dagegen machtlos und es hinge vom Gutdünken des Herstellers ab, ob der Fehler behoben wird. </p>
<p> Die regelmäßig in den Schlagzeilen auftauchenden Softwarepatente haben auf Freie Software einen besonders schwerwiegenden Einfluss, denn es ist zum Teil rechtlich noch nicht einmal möglich, mit freier Software die Patentauflagen zu erfüllen. Diese bestehen nämlich in einigen Fällen auf einer Gebühr pro in Umlauf gebrachter Kopie, aber Freie Software verlangt gerade, dass der Herausgeber darauf keinen Einfluss haben darf. Selbst wenn er die Lizenzgebühren zum Beispiel durch Spenden zahlen würde, müsste er eine genaue Zahl der Kopien, die im Umlauf sind, vorlegen können, womit es keine Freie Software mehr wäre. </p>
<p> Trusted Computing kann Veränderungen an einer Computer-Plattform eindeutig erkennen und damit sowohl externe Software-Angriffe als auch Veränderungen durch den Benutzer, Konfigurationen, Fehlfunktionen, Sicherheitslücken oder von Anwendungsprogrammen eindeutig identifizieren. Die Reaktion auf eine solche Veränderung kann (aber muss nicht) durch ein entsprechendes, sicheres Betriebssystem erfolgen. Trusted Computing kann daher auch zur Absicherung von Digital Rights Management (DRM) und zum Kopierschutz verwendet werden. </p>
<p> Politisch gesehen muss Freie Software immer vom Benutzer ersetzbar und veränderbar sein. Software, die in binärer Form zertifiziert sein muss, ist dies nicht. Technisch gesehen kann in freier Software vor dem Benutzer nichts im Binärcode verheimlicht werden, weil der Quellcode für jeden zugänglich sein muss. Somit kann die Verschlüsselung, mit der die Daten vor dem Benutzer „bewahrt“ werden, einfacher hintergangen werden. </p>
<p> Eine weitere Inkompatibilität tut sich mit dem Kopierschutz von DVDs auf: Die Umgehung wirksamer Kopierschutzmaßnahmen ist seit den um die Jahrtausendwende weltweit nach und nach etablierten Reformen zum Copyright (in den USA der Digital Millennium Copyright Act (DMCA)) gesetzlich nur noch mit Zustimmung des Rechteinhabers erlaubt. Dieses Verbot erstreckt sich auf die Herstellung oder Verbreitung von Programmen, die diese Maßnahmen umgehen können, so dass freie Abspielsoftware für kopiergeschützte DVDs nicht legal geschrieben werden kann – aus ihren natürlichen Interessen heraus würden die Rechteinhaber ihre Zustimmung dazu niemals erteilen, weil dadurch der Sinn der Maßnahmen ad absurdum geführt würde. </p>
<p> Falls Hardwarehersteller wie Intel oder AMD funktionseinschränkende Verfahren in Chipsätze oder Prozessoren implementieren sollten, könnte Freie Software den vollen Funktionsumfang möglicherweise nur noch auf freier Hardware entfalten. </p>
<p> Stefan Meretz: Linux & Co. Freie Software – Ideen für eine andere Gesellschaft. AG SPAK Bücher, Neu-Ulm 2000, ISBN 3-930830-16-7. </p>
<p> Bernhard E. Reiter: Wandel der IT: Mehr als 20 Jahre Freie Software. In: HMD, Heft 238, August 2004, S. 83–91, ISSN 1436-3011 (intevation.de). </p>
<p> Edward Viesel: Freiheit statt Freibier. Geschichte und Praxis der freien digitalen Welt – mit einer Einführung in Linux. Unrast Verlag, Münster 2006, ISBN 3-89771-450-7. </p>
<p> ↑ Freie Software darf kommerziell verkauft und weitergegeben werden und kommerzielle Tätigkeiten (Support usw.) dürfen für Freie Software angeboten werden. (Natürlich darf dies alles gratis geschehen, dann meist mit Verzicht auf Gewährleistung). Freie Software ist aber nie proprietär. Proprietäre Software ist eine, welche Nutzern die Freiheiten auf Modifizierung und Weitervertrieb verbietet oder unmöglich macht. (Kommerziell und proprietär sind nicht das Gleiche.) Erklärung zu kommerzieller Freier Software. Beispiele für kommerzielle Angebote (Wartungsverträge, Support, Service- und Garantieleistungen, Softwareanpassungen usw.), rund um Freie Software: Debian Consulting, FSF Service Directory </p>
<p> ↑ Markos Themelidi: Open Source – die Freiheitsvision der Hacker. Books on Demand, 2005, ISBN 978-3-8334-2883-8. </p>
<p> ↑ Tom Shea: Free software – Free software is a junkyard of software spare parts. In: InfoWorld. InfoWorld Media Group, Inc., 1983, S. 31 (englisch, books.google.de): “In contrast to commercial software is a large and growing body of free software that exists in the public domain. Public-domain software is written by microcomputer hobbyists (also known as ‘hackers’) many of whom are professional programmers in their work life. […] Since everybody has access to source code, many routines have not only been used but dramatically improved by other programmers.” </p>
<p> ↑ Lawrence Lessig: Free, as in beer, Wired. September 2006. Abgerufen am 18. März 2009. „In June, a Copenhagen artists’ collective called Superflex released version 3.0 of a new beer called – you guessed it – Free Beer. ‘Free beer?’ you ask. ‘Think free,’ Superflex members helpfully explained at the launch, ‘as in free software.’“ </p>
<p> ↑ History of OSI (englisch) opensource.org. Abgerufen am 11. Februar 2016: „"conferees decided it was time to dump the moralizing and confrontational attitude that had been associated with „free software“ in the past and sell the idea strictly on the same pragmatic, business-case grounds"“ </p>
<p> ↑ Eric S. Raymond: Goodbye, „free software“; hello, „open source“. 8. Februar 1998. Abgerufen am 13. August 2008: „"After the Netscape announcement broke in January I did a lot of thinking about the next phase -- the serious push to get „free software“ accepted in the mainstream corporate world. And I realized we have a serious problem with „free software“ itself. Specifically, we have a problem with the term „free software“, itself, not the concept. I've become convinced that the term has to go."“ </p>
<p> ↑ a b „Freie Software ist nicht nur eine technische, sondern eine ethische, soziale und politische Frage. Es ist eine Frage der Menschenrechte, die Nutzer von Software haben sollten. Freiheit und Zusammenarbeit sind unerlässliche Werte von Freie Software. Das GNU System realisiert diese Werte und das Prinzip des Teilens, da gemeinsame Nutzung gut und nützlich für den menschlichen Fortschritt ist.“ Freie Software und Bildung (gnu.org) </p>
<p> ↑ a b „Diese Freiheiten sind von entscheidender Bedeutung. Sie sind nicht nur für das Wohl des Einzelnen wichtig, sondern für die Gesellschaft als Ganzes, weil sie die soziale Solidarität fördert – also Austausch und Zusammenarbeit. Sie werden umso wichtiger, da immer größere Bereiche unserer Kultur und unseres Lebens digitalisiert werden. In einer Welt der digitalen Klänge, Bilder und Worte wird Freie Software immer wichtiger für die Freiheit im Allgemeinen.“ nach Warum Open Source das Ziel von Freie Software verfehlt (gnu.org) </p>
<p> ↑ a b “If the program gives you these four freedoms then it’s free software, which means the social system of its distribution and use is an ethical system, one which respects the user's freedom and the social solidarity of the user's community” Copyright versus Community in the Age of Computer Networks (gnu.org) </p>
<p> ↑ a b „Freie Software zu benutzen heißt, eine politische und ethische Entscheidung für Ihr Recht zu treffen, etwas zu lernen und das, was Sie lernen, mit anderen zu teilen.“ gnewsense.org (Übersetzung von hier) </p>
<p> ↑ a b “As our society grows more dependent on computers, the software we run is of critical importance to securing the future of a free society. Free software is about having control over the technology we use in our homes, schools and businesses, where computers work for our individual and communal benefit, not for proprietary software companies or governments who might seek to restrict and monitor us.” Free Software Foundation – About </p>
<p> ↑ Unfreie Software […] Deren Nutzung, Neuvertrieb oder Modifizierung ist untersagt oder verlangt, dass um Erlaubnis gebeten werden muss, oder ist so sehr eingeschränkt, dass man es wirksam nicht frei tun kann. nach Unfreie Software (gnu.org) </p>
<p> ↑ a b GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 – Conveying Non-Source Forms. (englisch) gnu.org. 29. Juni 2007. Abgerufen am 17. Juni 2015: „(1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.“ </p>
<p> ↑ a b Freie Software verkaufen. gnu.org. 17. Juni 2015. Abgerufen am 17. Juni 2015: „Hohe oder niedrige Preise und die GNU GPL – […] die GNU GPL verpflichtet, den Quellcode auf weitere Anfrage bereitzustellen. Ohne eine Begrenzung des Preises für den Quellcode wäre es ihnen möglich einen Preis festzulegen, der für jedermann zu hoch zu bezahlen wäre – wie eine Milliarde Euro – und somit vorgeben den Quellcode freizugeben, obwohl sie ihn in Wahrheit verbergen. Darum müssen wir in diesem Fall den Preis für den Quellcode begrenzen, um die Freiheit der Nutzer zu gewährleisten.“ </p>
<p> ↑ Is it legal to sell GPL software? Please note that as much as you wish only applies to the executable form of the software, not its source code. by Marco Fioretti on Techrepublic.com, 19. Nov 2013 (englisch) </p>
<p> ↑ „Außerdem sollte man auch die Freiheit haben Modifikationen vorzunehmen und privat im eigenen Werk oder Spiel zu nutzen, ohne auch nur deren Existenz zu erwähnen. Veröffentlicht man die Änderungen, sollte es nicht erforderlich sein, irgendjemand im Besonderen oder auf irgendeine bestimmte Weise zu benachrichtigen. “ Was ist Freie Software gnu.org </p>
<p> ↑ Unfreie Software (im Sinne fehlender Freiheiten), auch proprietäre Software genannt </p>
<p> ↑ L. Johnson: A view from the 1960s: how the software industry began. In: IEEE Annals of the History of Computing. Band 20, Nr. 1 (Januar-März) 1998, Conclusion, letzter Absatz. </p>
<p> ↑ B. Grad: A personal recollection: IBM’s unbundling of software and services. In: IEEE Annals of the History of Computing. Band 24, 1 (Jan.–März), 2002, ISSN 1058-6180, S. 64–71, doi:10.1109/85.988583. </p>
<p> ↑ W. S. Humphrey: Software unbundling: a personal perspective. In: IEEE Annals of the History of Computing. Band 24, 1 (Jan.-März), 2002, ISSN 1058-6180, S. 59–63, doi:10.1109/85.988582. </p>
<p> ↑ Richard Stallman: Das GNU Projekt auf gnu.org, 22. Oktober 2006 </p>
<p> ↑ Richard Stallman: Initial Announcement auf net.unix-wizards, net.usoft, 27. September 1983 </p>
<p> ↑ Es ist dabei egal, wie die Software empfangen wird: kommerzielle Entwicklungsbeauftragung, Kauf oder öffentlicher Download. Bei manchen Lizenzen zählt bereits das Bereitstellen als Dienst auf einem Server, siehe AGPL </p>
<p> ↑ Dies beinhaltet die Freiheit, seine geänderte Softwareversion laufen zu lassen – wenn es nur dem Hersteller erlaubt ist, geänderte Versionen lauffähig zu machen, wird dies als Tivoisierung bezeichnet und als Freiheitseinschränkung gesehen. </p>
<p> Der Text ist unter der Lizenz „Creative Commons Attribution/Share Alike“ verfügbar; Informationen zu den Urhebern und zum Lizenzstatus eingebundener Mediendateien (etwa Bilder oder Videos) können im Regelfall durch Anklicken dieser abgerufen werden. Möglicherweise unterliegen die Inhalte jeweils zusätzlichen Bedingungen. Durch die Nutzung dieser Website erklären Sie sich mit den Nutzungsbedingungen und der Datenschutzrichtlinie einverstanden. Wikipedia® ist eine eingetragene Marke der Wikimedia Foundation Inc. </p>
<p> Freie-Software-Bewegung </p>
<p> Die Freie-Software-Bewegung ist eine soziale Bewegung[1] mit den Zielen, Freie Software zu propagieren und damit bestimmte Freiheiten für Benutzer von Software zu erreichen oder diese zu wahren: Die Freiheit, die Software auszuführen, zu studieren und zu ändern sowie Kopien der Software mit oder ohne Änderungen verteilen zu können. Obwohl er sich auf Traditionen und Philosophien unter Mitgliedern der 1970er Hackerkultur und Akademia stützte, gründete Richard Stallman formell die Bewegung im Jahr 1983 durch die Gründung des GNU-Projekts.[2] Im Jahr 1985 gründete er auch die Free Software Foundation (kurz FSF), um die Bewegung zu unterstützen. </p>
<p> Die Philosophie der Bewegung ist, dass die Nutzung von Computern nicht dazu führen sollte, dass Menschen an der Zusammenarbeit gehindert werden. In der Praxis heißt das, proprietäre Software – die solche Restriktionen verhängt – ist zurückzuweisen und Freie Software zu fördern,[3] mit dem ultimativen Ziel, jeden im Cyberspace zu befreien – ergo jeden Computernutzer.[4] Stallman bemerkte, dass diese Handlung den Fortschritt der Technologie eher fördert als hindert, da „es bedeutet, dass dadurch verschwenderischer Aufwand für duplizierte Systemprogrammierung verhindert wird. Dieser Aufwand kann stattdessen in die Verbesserung des ‚State of the Art‘ gesteckt werden.“[5] </p>
<p> Mitglieder der Freie-Software-Bewegung glauben, dass alle Softwarenutzer die Freiheiten, die in der Definition freier Software gelistet sind, haben sollten. Viele von ihnen halten es für unmoralisch, Menschen diese Freiheiten zu verbieten oder Nutzern an der Ausübung dieser zu hindern, weil diese Freiheiten benötigt werden, um eine vernünftige Gesellschaft, in der Softwarenutzer sich gegenseitig helfen können und die Kontrolle über ihren Computer haben, zu erschaffen.[6] </p>
<p> Einige Nutzer und Programmierer Freier Software hingegen halten proprietäre und lizenzierte Software nicht für strikt unmoralisch; als Gründe führen sie die bessere Profitabilität von Geschäftsmodellen für proprietäre Software oder technische Eigenschaften und Zweckdienlichkeit an.[7] </p>
<p> “While social change may occur as an unintended by-product of technological change, advocates of new technologies often have promoted them as instruments of positive social change.” </p>
<p> „Während der soziale Wandel als ein unbeabsichtigtes Nebenprodukt des technologischen Wandels auftreten kann, haben Befürworter neuer Technologien diese oft als Instrumente des positiven sozialen Wandels beworben.“ </p>
<p> – Joel West </p>
<p> Dieses Zitat des Professors der San José State University erklärt viel über die Philosophie oder die Gründe dafür, dass es die Freie-Software-Bewegung gibt. Wenn man annimmt, dass der soziale Wandel vom technologischen Fortschritt nicht nur beeinflusst, sondern in mancher Hinsicht auch dirigiert wird, ist es dann ethisch vertretbar, diese Technologien gewissen Menschen vorzuenthalten? Wenn jetzt nicht gerade direkt um einen Wandel auszulösen, dann ist die Bewegung da, um ein Bewusstsein über die Effekte, die wegen der physischen Dinge um uns herum geschehen, zu fördern. Ein Computer zum Beispiel ermöglicht uns dermaßen viele Freiheiten, die wir ohne einen Computer nicht hätten. Aber sollten diese technologischen Mittel implizierte Freiheiten sein oder eher doch selektive Privilegien? Die Debatte über die Moral beider Seiten ist für die Freie-Software-Bewegung ein schwieriges Thema, um mit der jeweiligen Opposition Kompromisse zu schließen.[8] </p>
<p> Die FSF glaubt auch, dass jede Software freie Dokumentation (siehe auch GNU-Lizenz für freie Dokumentation) braucht, besonders weil gewissenhaften Programmierern ermöglicht sein sollte, Handbücher zu aktualisieren, um Modifikationen, die sie an der Software vorgenommen haben, widerzuspiegeln. Bezüglich anderer Arten geschriebener Werke sieht die FSF weniger Bedarf für die Freiheit zum Abändern.[9] In der Freie-Software-Bewegung spezialisiert sich die „FLOSS-Manual Foundation“ (kurz FM) mit dem Ziel, solche Dokumentationen bereitzustellen. Mitglieder der Freie-Software-Bewegung befürworten, dass Werke, die einem praktischen Zweck dienen, frei sein sollten.[10] </p>
<p> GNU- und Tux-Maskottchen umringt von Unterstützern der Freien Software auf der FISL 16. </p>
<p> Schreiben und verbreiten Freier SoftwareBearbeiten </p>
<p> Die Kernarbeit der Freien-Software-Bewegung fokussiert sich auf die Entwicklung von Software. Die Freie-Software-Bewegung meidet proprietäre Software und weigert sich, solche Software zu installieren, die ihr die Freiheiten von Freier Software nicht gibt. Nach Aussage von Stallman: </p>
<p> “The only thing in the software field that is worse than an unauthorised copy of a proprietary program, is an authorised copy of the proprietary program because this does the same harm to its whole community of users, and in addition, usually the developer, the perpetrator of this evil, profits from it.” </p>
<p> „Das Einzige was im Bereich Software noch schlimmer ist als eine unautorisierte Kopie von einem proprietären Programm, ist eine autorisierte Kopie eines proprietären Programms, weil dieses den selben Schaden an der ganzen Gemeinschaft von Nutzern (außerdem zu meist auch den Entwicklern) zufügt. Nur der Verursacher dieses Übels profitiert von ihm.“ </p>
<p> Einige Unterstützer der Freien-Software-Bewegung halten öffentliche Reden oder mieten Messestände an softwarebezogenen Konferenzen, um Bewusstsein für die Software-Freiheiten zu fördern. Diese Tätigkeit wird in der Bewegung als sehr wichtig empfunden, da viele Leute heutzutage bereits freie Software nutzen, aber gar nicht wissen, dass es sich dabei um freie Software handelt; solche Menschen würden früher oder später auch nicht freie Software als Ersatz akzeptieren oder diese unbewusst zu ihrer freien Software hinzufügen.[12] </p>
<p> Margaret S. Elliot, eine Forscherin am Institut für Software an der California Irvine Universität, umreißt nicht nur viele Vorteile, die von einer Freie-Software-Bewegung kommen können; sie fordert auch, dass es eine inhärente Notwendigkeit sei, jedem Menschen die gleichen Möglichkeiten der Internetnutzung zu geben – unter der Annahme, dass Computer global zugänglich sind. Da die Welt sich heute stärker auf Technologien und deren Fortschritt stützt, wäre das Erstellen eines selektives Internets, das es nur einigen wenigen erlaubt, frei im Netz zu surfen, laut Elliot absurd. Wenn es den Wunsch nach dem Leben in einer stärker verbundenen Welt gibt, die von Kommunikation und globaler Hilfsbereitschaft profitiert, dann ist weltweit Freie Software erstrebenswert – nach Aussage vieler Förderer des Bewusstseins über die Freie-Software-Bewegung. Die von den GNU-Leuten entfachten Ideen sind ein Ansatz, um eine „kooperative Umwelt“ voranzutreiben, die die Vorteile einer lokalen und einer globalen Gemeinschaft zu nutzen versteht.[13] </p>
<p> Die Bewegung hat ein hohes Maß an Lobbyarbeit gegen Softwarepatente und die Erweiterung der Copyright-Gesetze aufgewendet. Weitere Lobbyarbeit fokussiert auf die Nutzung Freier Software in staatlichen Betrieben und staatlich geförderten Projekten. </p>
<p> Die venezolanische Regierung verabschiedete im Januar 2006 ein Freies-Software-Gesetz. Die Verordnung Nr. 3,390 verpflichtete alle staatlichen Betriebe, innerhalb von zwei Jahren auf Freie Software zu migrieren.[14] </p>
<p> Die Kongressabgeordneten Edgar David Villanueva und Jacques Rodrich Ackerman waren entscheidend, um in der Republik Peru das Gesetz 1609 „Freie Software in öffentlichen Verwaltungen“ einzuführen.[15] Dieser Vorfall zog unmittelbar die Aufmerksamkeit von Microsoft Inc. auf Peru; der Generaldirektor schrieb daraufhin Edgar David Villanueva persönlich einen Brief. Villanuevas Antwort darauf bekam weltweite Beachtung und wird heute noch als klassischer Beitrag in der Argumentation von Freier Software in Regierungen angesehen.[16] </p>
<p> Auch in den USA gab es Anstrengungen, um Gesetze auf Bundesstaatsebene zu verabschieden, die die Nutzung von Freier Software in staatlichen Agenturen forderten.[17] </p>
<p> Wie in vielen sozialen Bewegungen, so gab es auch in der Freie-Software-Bewegung einen andauernden inneren Konflikt zwischen Persönlichkeiten sowie zwischen Unterstützern der Bewegung, die Kompromisse oder demgegenüber die strikte Einhaltung der Werte forderten. </p>
<p> Obwohl damals kommerzielle Freie Software nicht unüblich war, als im Jahr 1998 Netscape ankündigte, ihren populären Webbrowser frei zu machen, wurde eine Strategiesitzung abgehalten, um einen stärkeren Business-Case für Freie Software zu entwickeln, der sich mehr auf Technologie als auf (Geschäfts-)Politik fokussiert.[18] Hiernach gründeten Eric Raymond und Bruce Perens die Open Source Initiative (kurz OSI), um den Begriff Open-Source-Software als einen alternativen Begriff für Freie Software voranzutreiben. OSI wollte die erkannten Defizite in der Technologie adressieren, aber auch einige Mitglieder von OSI waren mit der Position der Freien-Software-Bewegung, dass nicht Freie Software ein soziales Problem und unethisch sei, nicht einverstanden. Sie argumentierten stattdessen, das OpenSource ein besseres Modell für Softwareentwicklung sei.[19] Letzteres wurde die Ansicht von Menschen wie Eric Raymond und Linus Torvalds, während Bruce Perens meinte, dass OpenSource einfach dazu diene, Freie Software unter einer neuen Marke beliebt zu machen.[20] </p>
<p> Einige Vertreter Freier Software nutzen den Begriff Free/Libre Open Source Software (kurz FLOSS) als einen Kompromiss. Dieser soll unter Berufung auf beide Philosophien die Befürworter Freier Software und die Befürworter von Open-Source-Software zusammenbringen, um an Projekten mit mehr Zusammenhalt zu arbeiten. Einige Nutzer halten solch einen Kompromissbegriff für ideal, um beides – die Freiheiten für Softwarenutzer sowie das wirtschaftlich überlegene Entwicklungsmodell von OpenSource – zu befördern. Dieser vereinende Ansatz bekommt dadurch Rückenwind, dass die überwältigende Mehrheit der OSI-anerkannten Lizenzen und selbsternannten Open-Source-Programme auch mit dem Formalismus der Freien Software kompatibel ist und umgekehrt. </p>
<p> Auch wenn einige Leute die Konzepte von „Open-Source-Software“ und „Freier Software“ verbinden, stehen diese für unterschiedliche Ideen und Werte. Diese Doppeldeutigkeit begann 1998, als in der Freien Softwaregemeinschaft die Praxis begann, den Begriff „Open-Source-Software“ in Abgrenzung zu „Freier Software“ zu benutzen; damit differenzierten sie sprachlich, was sie taten. Die Open-Source-Bewegung betrachtet offene Software mehr als eine praktische Frage denn als ethisches Dilemma. Sie legt den Hauptfokus auf die Software-Entwicklung und sieht unfreie Software zwar als keine gute, aber dennoch als eine akzeptable Lösung an. </p>
<p> Die Freie-Software-Bewegung dagegen betrachtet Freie Software als eine moralische Notwendigkeit. Proprietäre Software sollte aus eigennützigen und aus sozialen Gründen zurückgewiesen werden. Nur Freie Software sollte entwickelt und gelehrt werden, um dem Ziel gerecht zu werden, Computertechnik so nutzbringend wie möglich für die Menschheit zu machen. Es wird argumentiert, dass alle ökonomischen und technischen Vorteile, die Freie Software bringt, aus den Rechten, die Entwickler und Nutzer genießen, resultieren. Ein Beispiel hierfür ist die Mitbestimmungsmöglichkeit, die das Design Freier Software zum Schädigen oder Ausspähen von Nutzern sehr unwahrscheinlich macht. Gleichzeitig wurden die Vorteile, die die Open-Source-Bewegung lieferte, innerhalb und außerhalb der Freie-Software-Bewegung in Frage gestellt. Es ist unklar, ob Freie und Open-Source-Software wirklich zu performanterem und weniger verwundbarem Code führt, da die Forscher Robert Glass und Benjamin Mako Hill statistisch darlegten, dass dies gewöhnlich nicht der Fall wäre.[21][22] </p>
<p> Veranschaulichung des Spruches „Frei wie in freie Rede und nicht wie in Freibier.“ (2013) </p>
<p> In Bezug auf die Bedeutung und das Missverständnis über das englische Wort „free“ (deutsch „frei“, aber auch „kostenlos“) haben sich Vertreter der Freie-Software-Bewegung auf die Suche nach weniger missverständlichen Begriffen und Analogien gemacht, um das Wirrwarr betreffend Rentabilität Freier Software zu beenden. Ein Beispiel ist der Ausspruch „Freibier versus freie Rede“. Das aus dem Spanischen oder Französischen geliehene Adjektiv „libre“ erlangte im englischsprachigen Teil der Bewegung Bedeutung, da dieses unmissverständlich klarstellt, dass sich Freie Software auf den Begriff Freiheit bezieht. Auch der Begriff „OpenSource“ führt zu Missverständnissen, da häufig angenommen wird, dass die Offenlegung von Quellcode bereits ausreicht, um die Open-Source-Kriterien zu erfüllen.[10] In Indien, wo die Freie-Software-Bewegung viele Anhänger hat, hat selbst die Regierung eine Richtlinie adaptiert[23] um dort den Begriff „swatantra“ als Ersatzwort für den Begriff „frei“ einzuführen.[24] </p>
<p> Der Wechsel von der Freien-Software-Bewegung zur Open-Source-Bewegung hatte negative Auswirkungen auf die Entwicklung der Gemeinschaft – nach Aussage von Christopher Kelty, der ein ganzes wissenschaftliches Kapitel in seinem Werk Theorizing Media and Practice der Freien-Software-Bewegung widmet. Die Open-Source-Bewegung verneint, dass die Selektivität und Privatisierung von Software unethisch seien. Obwohl die Open-Source-Bewegung auf dieselben sozialen Vorteile wie die Freie-Software-Bewegung hinarbeitet, behauptet Kelty, dass – indem man den grundlegenden Glauben der Freien Software Befürworter missachtet – man das vorherige Argument ad absurdum führt. Wenn als ethisch vertretbar angesehen wird, dass das Internet und andere Technologien auf diejenigen Nutzer, die die Mittel für die Nutzung der Software besitzen, beschränkt wird, dann gibt es keine Argumentation gegen den heutigen Zustand; es gibt keine Notwendigkeit sich zu beschweren, wenn alle Sittlichkeit in Kraft ist.[25] </p>
<p> Obwohl die Bewegungen unterschiedliche Werte und Ziele haben, arbeiten Vertreter aus beiden Lagern zusammen, wenn es um die Umsetzung praktischer Projekte geht.[26] Im Jahr 2005 erachtete Richard Glass die Unterschiede als eine „ernsthafte Fraktur“, die zwar „lebenswichtig für beide Seiten der Fraktur“, aber nur „wenig wichtig für alle anderen, die die Bewegung aus der Softwareentwicklungsperspektive studieren“, da sie nur eine „kleine Auswirkung auf diesen Bereich“ hatte.[27] </p>
<p> Die zwei prominentesten Personen, die man mit der Bewegung in Verbindung bringt, sind Richard Stallman und Linus Torvalds. Sie können als Repräsentanten für wertebasierende versus apolitische Philosophie gesehen werden – genauso wie die GNU versus Linux Programmierstile. Paradoxerweise konnte man aber nur durch die Symbiose beider Arbeiten ein komplettes Betriebssystem schaffen, das heute unter dem Namen GNU/Linux (oder einfach nur Linux) bekannt ist. Im GNU/Linux-Namensstreit argumentiert die FSF für den Begriff „GNU/Linux“, weil GNU bereits als langjähriges Projekt für die Entwicklung eines freien Betriebssystems galt und nur noch ein Kernel fehlte, um ein solches zu vervollständigen.[28] </p>
<p> Der Onlinedienst Open Hub (gegründet 2004 und gestartet 2006) überwacht die Entwicklungsaktivität in der Gemeinschaft für Freie Software und bietet detaillierte Metriken und quantitative Analysen für Wachstum und Popularität von freien Projekten und freien Programmiersprachen an. </p>
<p> Sollten Prinzipien kompromittiert werden?Bearbeiten </p>
<p> Eric Raymond kritisierte im Jahr 2006 die zu langsame Geschwindigkeit, mit der die Freie Software voranschreitet und schlug temporäre Kompromisse zugunsten schnellerer Erreichung von Zielen auf lange Sicht vor. Raymond argumentierte, dass das die Aufmerksamkeit der jeweiligen Software errege und folglich den Einfluss der Freien-Software-Bewegung auf relevante Standards und Gesetze erheblich verbessern könnte.[29] </p>
<p> Richard Stallman dagegen sieht die jetzige Kompromissebene als weitaus größeren Grund zur Sorge.[30][31] </p>
<p> Wie sollen Programmierer bezahlt werden?Bearbeiten </p>
<p> Stallman sagte, dass das genau der Punkt sei, indem für Leute Missverständnisse vom Begriff „frei“ entstehen. Es sei nichts verwerflich daran, als Programmierer für ein geplantes Projekt Bezahlung zu verlangen, es gelte jedoch als Vorstoß gegen die Freiheit, die Nutzerentscheidungen einzuschränken oder diese zu kontrollieren. Stallman meint auch, dass in einigen Fällen monetärer Anreiz nicht für die Motivation notwendig sei, da die Freude Kreativität auszudrücken eine Belohnung an sich darstelle.[5] </p>
<p> Die Freie-Software-Bewegung verfechtet das Copyleft-Lizenzierungsschema (oft pejorativ als „virale Lizenz“ bezeichnet). In seiner stärksten Form mandatiert Copyleft, dass jedes von einer Copyleft-lizenzierten Software abgeleitete Werk ebenfalls eine Copyleft-Lizenz mitführen muss, damit die Lizenz sich von Werk zu Werk wie ein Computervirus verbreiten kann. Diese Auslieferungsbedingungen können jedoch nur durch geltendes Copyright durchgesetzt werden.[32] Kritiker zweifeln an Copyleft-Lizenzierung an, dass die Idee von einschränkenden Modifikationen nicht auf einer Linie mit den Schwerpunkten verschiedener „Freiheiten“ der Bewegung sind, insbesondere dann wenn man sich alternative Lizenzen wie z. B. die MIT-Lizenz, die BSD-Lizenz und die Apache-Lizenz ansieht, die weitaus liberaler formuliert sind.[33][34] Befürworter hingegen genießen die Sicherheit, dass Copyleft-lizenzierte Werke unter keinen Umständen in nicht-Freie-Software-Projekte integriert werden können.[35] Sie betonen aber, das Copyleft-Lizenzen nicht für alle funktionieren und man sich in jedem Fall als Entwickler einfach entscheiden kann, Copyleft-lizenzierte Software nicht zu verwenden.[36][37] </p>
<p> ↑ Richard Stallman on "World Domination 201".: „I cannot agree to that compromise, and my experience teaches me that it won't be temporary. ... What our community needs most is more spine in rejection of non-free software. It has far too much willingness to compromise. ... To „argue“ in favor of adding non-free software in GNU/Linux distros is almost superfluous, since that's what nearly all of them have already done.“ </p>
<p> ↑ David McGowan: Legal Aspects of Free and Open Source Software. In: Joseph Feller, Brian Fitzgerald, Scott A. Hissam, Karim R. Lakahani (Hrsg.): Perspectives on Free and Open Source Software. MIT Press, 2005, ISBN 0-262-06246-1, S. 382. </p>
<p> Freie-Software-Bewegung </p>
<p> Die Freie-Software-Bewegung ist eine soziale Bewegung[1] mit den Zielen, Freie Software zu propagieren und damit bestimmte Freiheiten für Benutzer von Software zu erreichen oder diese zu wahren: Die Freiheit, die Software auszuführen, zu studieren und zu ändern sowie Kopien der Software mit oder ohne Änderungen verteilen zu können. Obwohl er sich auf Traditionen und Philosophien unter Mitgliedern der 1970er Hackerkultur und Akademia stützte, gründete Richard Stallman formell die Bewegung im Jahr 1983 durch die Gründung des GNU-Projekts.[2] Im Jahr 1985 gründete er auch die Free Software Foundation (kurz FSF), um die Bewegung zu unterstützen. </p>
<p> Die Philosophie der Bewegung ist, dass die Nutzung von Computern nicht dazu führen sollte, dass Menschen an der Zusammenarbeit gehindert werden. In der Praxis heißt das, proprietäre Software – die solche Restriktionen verhängt – ist zurückzuweisen und Freie Software zu fördern,[3] mit dem ultimativen Ziel, jeden im Cyberspace zu befreien – ergo jeden Computernutzer.[4] Stallman bemerkte, dass diese Handlung den Fortschritt der Technologie eher fördert als hindert, da „es bedeutet, dass dadurch verschwenderischer Aufwand für duplizierte Systemprogrammierung verhindert wird. Dieser Aufwand kann stattdessen in die Verbesserung des ‚State of the Art‘ gesteckt werden.“[5] </p>
<p> Mitglieder der Freie-Software-Bewegung glauben, dass alle Softwarenutzer die Freiheiten, die in der Definition freier Software gelistet sind, haben sollten. Viele von ihnen halten es für unmoralisch, Menschen diese Freiheiten zu verbieten oder Nutzern an der Ausübung dieser zu hindern, weil diese Freiheiten benötigt werden, um eine vernünftige Gesellschaft, in der Softwarenutzer sich gegenseitig helfen können und die Kontrolle über ihren Computer haben, zu erschaffen.[6] </p>
<p> Einige Nutzer und Programmierer Freier Software hingegen halten proprietäre und lizenzierte Software nicht für strikt unmoralisch; als Gründe führen sie die bessere Profitabilität von Geschäftsmodellen für proprietäre Software oder technische Eigenschaften und Zweckdienlichkeit an.[7] </p>
<p> “While social change may occur as an unintended by-product of technological change, advocates of new technologies often have promoted them as instruments of positive social change.” </p>
<p> „Während der soziale Wandel als ein unbeabsichtigtes Nebenprodukt des technologischen Wandels auftreten kann, haben Befürworter neuer Technologien diese oft als Instrumente des positiven sozialen Wandels beworben.“ </p>
<p> – Joel West </p>
<p> Dieses Zitat des Professors der San José State University erklärt viel über die Philosophie oder die Gründe dafür, dass es die Freie-Software-Bewegung gibt. Wenn man annimmt, dass der soziale Wandel vom technologischen Fortschritt nicht nur beeinflusst, sondern in mancher Hinsicht auch dirigiert wird, ist es dann ethisch vertretbar, diese Technologien gewissen Menschen vorzuenthalten? Wenn jetzt nicht gerade direkt um einen Wandel auszulösen, dann ist die Bewegung da, um ein Bewusstsein über die Effekte, die wegen der physischen Dinge um uns herum geschehen, zu fördern. Ein Computer zum Beispiel ermöglicht uns dermaßen viele Freiheiten, die wir ohne einen Computer nicht hätten. Aber sollten diese technologischen Mittel implizierte Freiheiten sein oder eher doch selektive Privilegien? Die Debatte über die Moral beider Seiten ist für die Freie-Software-Bewegung ein schwieriges Thema, um mit der jeweiligen Opposition Kompromisse zu schließen.[8] </p>
<p> Die FSF glaubt auch, dass jede Software freie Dokumentation (siehe auch GNU-Lizenz für freie Dokumentation) braucht, besonders weil gewissenhaften Programmierern ermöglicht sein sollte, Handbücher zu aktualisieren, um Modifikationen, die sie an der Software vorgenommen haben, widerzuspiegeln. Bezüglich anderer Arten geschriebener Werke sieht die FSF weniger Bedarf für die Freiheit zum Abändern.[9] In der Freie-Software-Bewegung spezialisiert sich die „FLOSS-Manual Foundation“ (kurz FM) mit dem Ziel, solche Dokumentationen bereitzustellen. Mitglieder der Freie-Software-Bewegung befürworten, dass Werke, die einem praktischen Zweck dienen, frei sein sollten.[10] </p>
<p> GNU- und Tux-Maskottchen umringt von Unterstützern der Freien Software auf der FISL 16. </p>
<p> Die Kernarbeit der Freien-Software-Bewegung fokussiert sich auf die Entwicklung von Software. Die Freie-Software-Bewegung meidet proprietäre Software und weigert sich, solche Software zu installieren, die ihr die Freiheiten von Freier Software nicht gibt. Nach Aussage von Stallman: </p>
<p> “The only thing in the software field that is worse than an unauthorised copy of a proprietary program, is an authorised copy of the proprietary program because this does the same harm to its whole community of users, and in addition, usually the developer, the perpetrator of this evil, profits from it.” </p>
<p> „Das Einzige was im Bereich Software noch schlimmer ist als eine unautorisierte Kopie von einem proprietären Programm, ist eine autorisierte Kopie eines proprietären Programms, weil dieses den selben Schaden an der ganzen Gemeinschaft von Nutzern (außerdem zu meist auch den Entwicklern) zufügt. Nur der Verursacher dieses Übels profitiert von ihm.“ </p>
<p> Einige Unterstützer der Freien-Software-Bewegung halten öffentliche Reden oder mieten Messestände an softwarebezogenen Konferenzen, um Bewusstsein für die Software-Freiheiten zu fördern. Diese Tätigkeit wird in der Bewegung als sehr wichtig empfunden, da viele Leute heutzutage bereits freie Software nutzen, aber gar nicht wissen, dass es sich dabei um freie Software handelt; solche Menschen würden früher oder später auch nicht freie Software als Ersatz akzeptieren oder diese unbewusst zu ihrer freien Software hinzufügen.[12] </p>
<p> Margaret S. Elliot, eine Forscherin am Institut für Software an der California Irvine Universität, umreißt nicht nur viele Vorteile, die von einer Freie-Software-Bewegung kommen können; sie fordert auch, dass es eine inhärente Notwendigkeit sei, jedem Menschen die gleichen Möglichkeiten der Internetnutzung zu geben – unter der Annahme, dass Computer global zugänglich sind. Da die Welt sich heute stärker auf Technologien und deren Fortschritt stützt, wäre das Erstellen eines selektives Internets, das es nur einigen wenigen erlaubt, frei im Netz zu surfen, laut Elliot absurd. Wenn es den Wunsch nach dem Leben in einer stärker verbundenen Welt gibt, die von Kommunikation und globaler Hilfsbereitschaft profitiert, dann ist weltweit Freie Software erstrebenswert – nach Aussage vieler Förderer des Bewusstseins über die Freie-Software-Bewegung. Die von den GNU-Leuten entfachten Ideen sind ein Ansatz, um eine „kooperative Umwelt“ voranzutreiben, die die Vorteile einer lokalen und einer globalen Gemeinschaft zu nutzen versteht.[13] </p>
<p> Die Bewegung hat ein hohes Maß an Lobbyarbeit gegen Softwarepatente und die Erweiterung der Copyright-Gesetze aufgewendet. Weitere Lobbyarbeit fokussiert auf die Nutzung Freier Software in staatlichen Betrieben und staatlich geförderten Projekten. </p>
<p> Die venezolanische Regierung verabschiedete im Januar 2006 ein Freies-Software-Gesetz. Die Verordnung Nr. 3,390 verpflichtete alle staatlichen Betriebe, innerhalb von zwei Jahren auf Freie Software zu migrieren.[14] </p>
<p> Die Kongressabgeordneten Edgar David Villanueva und Jacques Rodrich Ackerman waren entscheidend, um in der Republik Peru das Gesetz 1609 „Freie Software in öffentlichen Verwaltungen“ einzuführen.[15] Dieser Vorfall zog unmittelbar die Aufmerksamkeit von Microsoft Inc. auf Peru; der Generaldirektor schrieb daraufhin Edgar David Villanueva persönlich einen Brief. Villanuevas Antwort darauf bekam weltweite Beachtung und wird heute noch als klassischer Beitrag in der Argumentation von Freier Software in Regierungen angesehen.[16] </p>
<p> Auch in den USA gab es Anstrengungen, um Gesetze auf Bundesstaatsebene zu verabschieden, die die Nutzung von Freier Software in staatlichen Agenturen forderten.[17] </p>
<p> Wie in vielen sozialen Bewegungen, so gab es auch in der Freie-Software-Bewegung einen andauernden inneren Konflikt zwischen Persönlichkeiten sowie zwischen Unterstützern der Bewegung, die Kompromisse oder demgegenüber die strikte Einhaltung der Werte forderten. </p>
<p> Obwohl damals kommerzielle Freie Software nicht unüblich war, als im Jahr 1998 Netscape ankündigte, ihren populären Webbrowser frei zu machen, wurde eine Strategiesitzung abgehalten, um einen stärkeren Business-Case für Freie Software zu entwickeln, der sich mehr auf Technologie als auf (Geschäfts-)Politik fokussiert.[18] Hiernach gründeten Eric Raymond und Bruce Perens die Open Source Initiative (kurz OSI), um den Begriff Open-Source-Software als einen alternativen Begriff für Freie Software voranzutreiben. OSI wollte die erkannten Defizite in der Technologie adressieren, aber auch einige Mitglieder von OSI waren mit der Position der Freien-Software-Bewegung, dass nicht Freie Software ein soziales Problem und unethisch sei, nicht einverstanden. Sie argumentierten stattdessen, das OpenSource ein besseres Modell für Softwareentwicklung sei.[19] Letzteres wurde die Ansicht von Menschen wie Eric Raymond und Linus Torvalds, während Bruce Perens meinte, dass OpenSource einfach dazu diene, Freie Software unter einer neuen Marke beliebt zu machen.[20] </p>
<p> Einige Vertreter Freier Software nutzen den Begriff Free/Libre Open Source Software (kurz FLOSS) als einen Kompromiss. Dieser soll unter Berufung auf beide Philosophien die Befürworter Freier Software und die Befürworter von Open-Source-Software zusammenbringen, um an Projekten mit mehr Zusammenhalt zu arbeiten. Einige Nutzer halten solch einen Kompromissbegriff für ideal, um beides – die Freiheiten für Softwarenutzer sowie das wirtschaftlich überlegene Entwicklungsmodell von OpenSource – zu befördern. Dieser vereinende Ansatz bekommt dadurch Rückenwind, dass die überwältigende Mehrheit der OSI-anerkannten Lizenzen und selbsternannten Open-Source-Programme auch mit dem Formalismus der Freien Software kompatibel ist und umgekehrt. </p>
<p> Auch wenn einige Leute die Konzepte von „Open-Source-Software“ und „Freier Software“ verbinden, stehen diese für unterschiedliche Ideen und Werte. Diese Doppeldeutigkeit begann 1998, als in der Freien Softwaregemeinschaft die Praxis begann, den Begriff „Open-Source-Software“ in Abgrenzung zu „Freier Software“ zu benutzen; damit differenzierten sie sprachlich, was sie taten. Die Open-Source-Bewegung betrachtet offene Software mehr als eine praktische Frage denn als ethisches Dilemma. Sie legt den Hauptfokus auf die Software-Entwicklung und sieht unfreie Software zwar als keine gute, aber dennoch als eine akzeptable Lösung an. </p>
<p> Die Freie-Software-Bewegung dagegen betrachtet Freie Software als eine moralische Notwendigkeit. Proprietäre Software sollte aus eigennützigen und aus sozialen Gründen zurückgewiesen werden. Nur Freie Software sollte entwickelt und gelehrt werden, um dem Ziel gerecht zu werden, Computertechnik so nutzbringend wie möglich für die Menschheit zu machen. Es wird argumentiert, dass alle ökonomischen und technischen Vorteile, die Freie Software bringt, aus den Rechten, die Entwickler und Nutzer genießen, resultieren. Ein Beispiel hierfür ist die Mitbestimmungsmöglichkeit, die das Design Freier Software zum Schädigen oder Ausspähen von Nutzern sehr unwahrscheinlich macht. Gleichzeitig wurden die Vorteile, die die Open-Source-Bewegung lieferte, innerhalb und außerhalb der Freie-Software-Bewegung in Frage gestellt. Es ist unklar, ob Freie und Open-Source-Software wirklich zu performanterem und weniger verwundbarem Code führt, da die Forscher Robert Glass und Benjamin Mako Hill statistisch darlegten, dass dies gewöhnlich nicht der Fall wäre.[21][22] </p>
<p> Veranschaulichung des Spruches „Frei wie in freie Rede und nicht wie in Freibier.“ (2013) </p>
<p> In Bezug auf die Bedeutung und das Missverständnis über das englische Wort „free“ (deutsch „frei“, aber auch „kostenlos“) haben sich Vertreter der Freie-Software-Bewegung auf die Suche nach weniger missverständlichen Begriffen und Analogien gemacht, um das Wirrwarr betreffend Rentabilität Freier Software zu beenden. Ein Beispiel ist der Ausspruch „Freibier versus freie Rede“. Das aus dem Spanischen oder Französischen geliehene Adjektiv „libre“ erlangte im englischsprachigen Teil der Bewegung Bedeutung, da dieses unmissverständlich klarstellt, dass sich Freie Software auf den Begriff Freiheit bezieht. Auch der Begriff „OpenSource“ führt zu Missverständnissen, da häufig angenommen wird, dass die Offenlegung von Quellcode bereits ausreicht, um die Open-Source-Kriterien zu erfüllen.[10] In Indien, wo die Freie-Software-Bewegung viele Anhänger hat, hat selbst die Regierung eine Richtlinie adaptiert[23] um dort den Begriff „swatantra“ als Ersatzwort für den Begriff „frei“ einzuführen.[24] </p>
<p> Der Wechsel von der Freien-Software-Bewegung zur Open-Source-Bewegung hatte negative Auswirkungen auf die Entwicklung der Gemeinschaft – nach Aussage von Christopher Kelty, der ein ganzes wissenschaftliches Kapitel in seinem Werk Theorizing Media and Practice der Freien-Software-Bewegung widmet. Die Open-Source-Bewegung verneint, dass die Selektivität und Privatisierung von Software unethisch seien. Obwohl die Open-Source-Bewegung auf dieselben sozialen Vorteile wie die Freie-Software-Bewegung hinarbeitet, behauptet Kelty, dass – indem man den grundlegenden Glauben der Freien Software Befürworter missachtet – man das vorherige Argument ad absurdum führt. Wenn als ethisch vertretbar angesehen wird, dass das Internet und andere Technologien auf diejenigen Nutzer, die die Mittel für die Nutzung der Software besitzen, beschränkt wird, dann gibt es keine Argumentation gegen den heutigen Zustand; es gibt keine Notwendigkeit sich zu beschweren, wenn alle Sittlichkeit in Kraft ist.[25] </p>
<p> Obwohl die Bewegungen unterschiedliche Werte und Ziele haben, arbeiten Vertreter aus beiden Lagern zusammen, wenn es um die Umsetzung praktischer Projekte geht.[26] Im Jahr 2005 erachtete Richard Glass die Unterschiede als eine „ernsthafte Fraktur“, die zwar „lebenswichtig für beide Seiten der Fraktur“, aber nur „wenig wichtig für alle anderen, die die Bewegung aus der Softwareentwicklungsperspektive studieren“, da sie nur eine „kleine Auswirkung auf diesen Bereich“ hatte.[27] </p>
<p> Die zwei prominentesten Personen, die man mit der Bewegung in Verbindung bringt, sind Richard Stallman und Linus Torvalds. Sie können als Repräsentanten für wertebasierende versus apolitische Philosophie gesehen werden – genauso wie die GNU versus Linux Programmierstile. Paradoxerweise konnte man aber nur durch die Symbiose beider Arbeiten ein komplettes Betriebssystem schaffen, das heute unter dem Namen GNU/Linux (oder einfach nur Linux) bekannt ist. Im GNU/Linux-Namensstreit argumentiert die FSF für den Begriff „GNU/Linux“, weil GNU bereits als langjähriges Projekt für die Entwicklung eines freien Betriebssystems galt und nur noch ein Kernel fehlte, um ein solches zu vervollständigen.[28] </p>
<p> Der Onlinedienst Open Hub (gegründet 2004 und gestartet 2006) überwacht die Entwicklungsaktivität in der Gemeinschaft für Freie Software und bietet detaillierte Metriken und quantitative Analysen für Wachstum und Popularität von freien Projekten und freien Programmiersprachen an. </p>
<p> Eric Raymond kritisierte im Jahr 2006 die zu langsame Geschwindigkeit, mit der die Freie Software voranschreitet und schlug temporäre Kompromisse zugunsten schnellerer Erreichung von Zielen auf lange Sicht vor. Raymond argumentierte, dass das die Aufmerksamkeit der jeweiligen Software errege und folglich den Einfluss der Freien-Software-Bewegung auf relevante Standards und Gesetze erheblich verbessern könnte.[29] </p>
<p> Richard Stallman dagegen sieht die jetzige Kompromissebene als weitaus größeren Grund zur Sorge.[30][31] </p>
<p> Stallman sagte, dass das genau der Punkt sei, indem für Leute Missverständnisse vom Begriff „frei“ entstehen. Es sei nichts verwerflich daran, als Programmierer für ein geplantes Projekt Bezahlung zu verlangen, es gelte jedoch als Vorstoß gegen die Freiheit, die Nutzerentscheidungen einzuschränken oder diese zu kontrollieren. Stallman meint auch, dass in einigen Fällen monetärer Anreiz nicht für die Motivation notwendig sei, da die Freude Kreativität auszudrücken eine Belohnung an sich darstelle.[5] </p>
<p> Die Freie-Software-Bewegung verfechtet das Copyleft-Lizenzierungsschema (oft pejorativ als „virale Lizenz“ bezeichnet). In seiner stärksten Form mandatiert Copyleft, dass jedes von einer Copyleft-lizenzierten Software abgeleitete Werk ebenfalls eine Copyleft-Lizenz mitführen muss, damit die Lizenz sich von Werk zu Werk wie ein Computervirus verbreiten kann. Diese Auslieferungsbedingungen können jedoch nur durch geltendes Copyright durchgesetzt werden.[32] Kritiker zweifeln an Copyleft-Lizenzierung an, dass die Idee von einschränkenden Modifikationen nicht auf einer Linie mit den Schwerpunkten verschiedener „Freiheiten“ der Bewegung sind, insbesondere dann wenn man sich alternative Lizenzen wie z. B. die MIT-Lizenz, die BSD-Lizenz und die Apache-Lizenz ansieht, die weitaus liberaler formuliert sind.[33][34] Befürworter hingegen genießen die Sicherheit, dass Copyleft-lizenzierte Werke unter keinen Umständen in nicht-Freie-Software-Projekte integriert werden können.[35] Sie betonen aber, das Copyleft-Lizenzen nicht für alle funktionieren und man sich in jedem Fall als Entwickler einfach entscheiden kann, Copyleft-lizenzierte Software nicht zu verwenden.[36][37] </p>
<p> ↑ Richard Stallman on "World Domination 201".: „I cannot agree to that compromise, and my experience teaches me that it won't be temporary. ... What our community needs most is more spine in rejection of non-free software. It has far too much willingness to compromise. ... To „argue“ in favor of adding non-free software in GNU/Linux distros is almost superfluous, since that's what nearly all of them have already done.“ </p>
<p> ↑ David McGowan: Legal Aspects of Free and Open Source Software. In: Joseph Feller, Brian Fitzgerald, Scott A. Hissam, Karim R. Lakahani (Hrsg.): Perspectives on Free and Open Source Software. MIT Press, 2005, ISBN 0-262-06246-1, S. 382. </p>
<p> Der Text ist unter der Lizenz „Creative Commons Attribution/Share Alike“ verfügbar; Informationen zu den Urhebern und zum Lizenzstatus eingebundener Mediendateien (etwa Bilder oder Videos) können im Regelfall durch Anklicken dieser abgerufen werden. Möglicherweise unterliegen die Inhalte jeweils zusätzlichen Bedingungen. Durch die Nutzung dieser Website erklären Sie sich mit den Nutzungsbedingungen und der Datenschutzrichtlinie einverstanden. Wikipedia® ist eine eingetragene Marke der Wikimedia Foundation Inc. </p>
<p> free speech, not free beer! </p>
<p> Freie Software: Freiheit ist nicht immer ganz einfach! </p>
<p> „Ein Programm nach eigenen Belieben ausführen und für jeden Zweck gebrauchen zu können“ oder aber „die Vorzüge eines Programmes nutzen, auch ohne vertieftes, technisches Verständnis oder Unterstützung durch Experten“? </p>
<p> Ostern. Es regnet. Zeit also, um sich etwas mit den philosophischen Aspekten der Software, die wir jeden Tag nutzen, auseinanderzusetzen. </p>
<p> Was ist Freie Software? </p>
<p> Die Freie-Software-Definition der Free Software Foundation beschreibt auf der entsprechenden Seite im Netz, was freie Software überhaupt ausmacht. Zusammengefasst ergeben sich folgende vier Punkte: </p>
<p> Ein Programm ist Freie Software, wenn Programmnutzer vier wesentliche Freiheiten haben: </p>
<p> Die Freiheit, das Programm auszuführen wie man möchte, für jeden Zweck (Freiheit 0). </p>
<p> Die Freiheit, die Funktionsweise des Programms zu untersuchen und eigenen Bedürfnissen der Datenverarbeitung anzupassen (Freiheit 1). Der Zugang zum Quellcode ist dafür Voraussetzung. </p>
<p> Die Freiheit, das Programm weiterzuverbreiten und damit seinen Mitmenschen zu helfen (Freiheit 2). </p>
<p> Die Freiheit, das Programm zu verbessern und diese Verbesserungen der Öffentlichkeit freizugeben, damit die gesamte Gemeinschaft davon profitiert (Freiheit 3). Der Zugang zum Quellcode ist dafür Voraussetzung. </p>
<p> Usability: Die Benutzererfahrung </p>
<p> Nicht jeder ist technisch so versiert wie Richard Stallman und seine Kollegen. Nicht jeder ist in der Lage, Programmcode zu lesen oder selber zu schreiben. Somit ist also nicht jeder in der Lage die freie Software auch wirklich in dem Sinne zu nutzen, wie die Free Software Foundation das gerne hätte. </p>
<p> Welchen Sinn macht es aber, freie Software zu propagieren, die nur von einem gewissen Anteil an Computerbenutzern auch verstanden wird und zweckgemäss verwendet werden kann? </p>
<p> Die Freiheiten sind quasi so radikal zu Ende gedacht, dass die Zugänglichkeit darunter leidet. Wohl kaum ein durchschnittlicher User wird sich die Mühe machen wollen, zuerst Programmierkenntnisse zu erlangen, bevor ein Programm benutzt werden kann. </p>
<p> Ich möchte betonen, dass ich damit nicht sagen will, Richard Stallman sei falsch gelegen, als er die vier Freiheiten festgelgt hat. Vielmehr hat er seinen eigenen Blickwinkel. Oder sagen wir Fokus. Genau wie jeder andere von uns auch. Wir alle betrachten die Welt durch unsere eigenen Augen. Wir alle besitzen eigene Fähigkeiten. Der Eine kann vielleicht besser programmieren, der Andere vielleicht künstlerisch gestalten. Und beide werden eine etwas andere Sicht auf die Welt haben. </p>
<p> Richard Stallman ist ein intelligenter Programmierer und Visionär der Free-Software-Bewegung. Quellcode liest er in etwa so, wie andere diesen Artikel lesen können. Nicht jeder ist Richard Stallman, oder sagen wir: nicht jeder besitzt die Fähigkeit, mit Quellcode so umzugehen, wie Stallman und seine Kollegen. </p>
<p> Software ist nutzlos, wenn wir sie nicht gebrauchen, weil wir den Sinn dahinter gar nicht erkennen können. Oder viel zuviel Aufwand betreiben müssen, um sie zu nutzen. Es geht auch um Geschicklichkeit, sich neue Technologien anzueignen. Niemand kann erwarten, dass alle sich derart tiefgründig mit dem komplexen Thema freie Software und Sourcecode auseinandersetzen. Die wenigsten haben nämlich die Zeit dafür – oder das Verständnis. </p>
<p> Kommen wir also zurück zu Punkt eins der vier Freiheiten: </p>
<p> „Die Freiheit, das Programm auszuführen wie man möchte, für jeden Zweck“. </p>
<p> Ich schlage nun vor, dass wir einen alternativen Punkt eins in Erwägung ziehen: </p>
<p> „Die Freiheit, die Vorzüge eines Programmes zu nutzen, auch ohne vertieftes, technisches Verständnis oder Unterstützung durch einen Experten“. </p>
<p> Siehst Du den Unterschied? </p>
<p> Bei der Entwicklung von freier Software und Betriebssystemen sollte also darauf geachtet werden, dass die Zugänglichkeit gewährt bleibt. Die Entwickler sollten daran denken, dass möglichst viele Menschen ihre Software gerne benutzen wollen und nicht jeder einzelne die Zeit, die Energie, das Verständnis, die Begabung etc. hat, komplizierte Programme zu benutzen. Usability sollte nicht zu kurz kommen. Ein Programm sollte kurz gesagt, seinen Dienst tun – dabei aber gut benutzbar bleiben. </p>
<p> Es stellt sich die einfache Frage: „Kann jeder das Programm nutzen (auch technisch nicht so versierten Kollegen, Nachbarn, Familie) – ohne die Hilfe eines Experten?“ </p>
<p> Wenn die Antwort auf diese Frage „Nein“ lautet, sollte das Programm oder die Software evtl. noch etwas benutzerfreundlicher gestaltet werden, so dass die Usability und die Nutzererfahrung nicht unter der Freiheit zu leiden hat. </p>
<p> Ein Kommentar zu “Freie Software: Freiheit ist nicht immer ganz einfach!” </p>
<p> Die Usability ist ohne Zweifel sehr wichtig, aber kein Freiheitsaspekt im engeren Sinne. Apfelprodukte sind bis zu einem gewissen Punkt sehr benutzerfreundlich, aber gerade darin liegt der goldene Käfig. Sobald man zB. einen SMTP-Server RFC-konform auf Port 587 abfragen will, ist die Usability zuende. Auch Windows-Anwendungen halten viele für benutzerfreundlich. </p>
<p> Usability ist daher weder notwendiges noch hinreichendes Kriterium für “Freiheit“ von Software. </p>
<p> Sie ist allerdings hilfreich und wohl auch notwendig, damit Nichtnerds überhaupt von freier Software profitieren können. Usability hilft dabei, kann aber nicht die Auseinandersetzung mit den Funktionen und zB Sicherheitsfragen ersetzen. Die ständige Gratwanderung zwischen Bequemlichkeit und (zB) Sicherheit setzt eine Kenntnis der Alternativen und der jeweiligen Privatsphärekosten voraus. Da ist es wie mit der Demokratie – Freiheit ist nunmal anstrengend. Wer sagt “es ist mir egal, wie es funktioniert und was es sonst so tut“, hat keine wirkliche Vorstellung davon und wird nicht freier, wenn die Software einfacher ist. </p>
<p> Auch wenn Usability sicher ein Wert (neusprech: asset) und als solcher hochrangig ist, würde ich sie deshalb nicht als “Freiheit“ im Sinne eines Teilhaberechts einordnen. Sie ist mehr die Ableitung aus der Freiheit 0. </p>
<p> Beitrag nicht abgeschickt - E-Mail Adresse kontrollieren! </p>
<p> E-Mail-Überprüfung fehlgeschlagen, bitte versuche es noch einmal </p>
<p> Ihr Blog kann leider keine Beiträge per E-Mail teilen. </p>
<p> Datenschutz & Cookies: Diese Website verwendet Cookies. Wenn du die Website weiterhin nutzt, stimmst du der Verwendung von Cookies zu. Weitere Informationen, beispielsweise zur Kontrolle von Cookies, findest du hier: Cookie-Richtlinie </p>
ArborMaps
Die freie Software für Baumbesitzer,
Baumkontrolleure und Baumpfleger

www.arbormaps.de

ArborMaps stellt sich vor
Aktuelle Situation
Warum ArborMaps?
Was ist freie Software?
Wie wird ArborMaps finanziert?
Wie kann ich mich beteiligen?
Diskussion

www.arbormaps.de

ArborMaps stellt sich vor
terrestris & BreWo Arboristik
Was ist ArborMaps?
Unsere Motivation
Über Zettelwirtschaft, Datenübermittlung an Baumpfleger und AG
sowie verfügbares Kartengrundlagen.
Vielzahl an Baumkatastern mit jeweils individuellen Softwarelösungen
und Preismodellen.
Negative Kosten/Nutzen-Rechnung eines digitalen Baumkatasters.
Vgl. auch Online Umfrage von GERHARDT und WELLER, 2011

www.arbormaps.de

Aktuelle Situation
Baumkontrollen & Dokumentationspflicht
Baumkataster
Probleme bei der Anschaffung eines
Baumkatasters:
• Lizenz- oder Mietkosten für Softwarenutzung, i.d.R. pro User

• Schulungen zur Nutzung der Software
• Anpassungen der Software an betriebsbedingte Eigenheiten
• Mögliche Probleme bei der Anbindung von Kataster und GIS
• Anschaffung von GIS-Software mit nutz- und verfügbarem
Kartenmaterial
• Anschaffung zugeschnittener, mobiler Endgeräte für den Einsatz
vor Ort
• Unkalkulierbarer Aufwand bei Updates usw.
• Vorhandensein oder Nutzung von Fachpersonal mit Programmierund/oder GIS-Kenntnissen
www.arbormaps.de

Warum ArborMaps?
 Frei nutzbare Software, die einer freien Lizenz unterliegt und keine Lizenzkosten
verursacht.
 Kartografische Darstellung aller erfassten Objekte und Bäume.
 Das Kartenmaterial zum Erfassen der Baumstandorte steht kostenlos zur Verfügung.
 Kartografische Darstellung von Auswertungen(anstehende Regelkontrolle, offenen
Maßnahmen, Zustand Bäume o.ä.).
 Erstellen von Listen, Auswertungen und Auftragsformularen.
 Komfortable, intuitiv bedienbare, vordefinierte Eingabemasken – jedoch flexibel und

individuell anpassbar.
 Möglichkeit zur vereinfachten Form der Gruppendokumentation bei Baumkontrollen.

www.arbormaps.de

Warum ArborMaps?

 Jederzeit und von überall kompletter Datenzugriff.
 Keine Nachbereitung im Büro erforderlich.
 Kein Zugriff von Dritten auf Ihre Daten durch ein detailliertes Rechte- und
Rollenkonzept.
 Transparenz in der Zuständigkeit, neues Level bei der Kommunikation zwischen
Baumkontrolleur, Pfleger und Kunde.
 Keine spezielle, teure Hardware vonnöten. Gängige Endgeräte wie Smartphones

oder Tablet PCs können zur mobilen Datenerfassung verwendet werden.

www.arbormaps.de

Warum ArborMaps?

 Werkzeug zur Ersterfassung, Kontrolle und Maßnahmenverwaltung und/oder –
Abarbeitung.
 Updates, die innerhalb der Anwendergemeinschaft erarbeitet werden, stehen allen
Anwendern frei nutzbar zur Verfügung.

 Projektplanung/-steuerung für Dienstleister im Bereich Baumkontrolle und/oder –
pflege.
 Nutzbar für alle Verkehrssicherungspflichtigen (Kommunen, Gemeinden,
Wohnungsbaugesellschaften, Kirchengemeinden, Privatleute, Waldbesitzer usw.).

www.arbormaps.de

Warum ArborMaps?

www.arbormaps.de

Was ist freie Software?
Software kann grundsätzlich in zwei Kategorien aufgeteilt werden:
1. Proprietäre Software, deren Quellcode nicht frei zugänglich ist und die restriktiven
Lizenzen unterliegt.
2. Freie Software, deren Quellcode frei zugänglich ist und deren Lizenz Freiheiten
garantiert
„Ein Programm ist Freie Software, wenn Programmnutzer vier wesentliche Freiheiten
haben:
1). Die Freiheit, das Programm für jeden Zweck auszuführen
2). Die Freiheit, die Funktionsweise des Programms zu untersuchen
3) Diie Freiheit das Programm auf eigene Bedürfnisse der Datenverarbeitung anzupassen
4). Die Freiheit, das Programm weiterzuverbreiten

www.arbormaps.de

Was ist freie Software?
Neben der Zugänglichkeit des Quellcodes hat Freie Software die Eigenschaft, keine
Lizenzkosten zu verursachen.
In der Regel kann Freie Software aus dem Internet heruntergeladen werden, so dass nur
Kosten für die Internetverbindung anfallen.
ArborMaps wird unter einer freien Softwarelizenz veröffentlicht.

www.arbormaps.de

Wie wird ArborMaps finanziert?
ArborMaps wird über Crowdfunding finanziert
 Eine Firma finanziert die Entwicklung vor und verkauft anschließend Lizenzen.
 Crowdfunding geht den umgekehrten Weg.
 Entwicklungskosten der Software nach marktwirtschaftlichen Kriterien ermittelt.
 Jeder Interessent beteiligt sich nach seinen (finanziellen) Möglichkeiten.
 Die Software wird von den Programmierern erstellt.
 Die Gemeinschaft der Nutzer kann diese lizenzkostenfrei nutzen.
 Durch den ständigen Austausch innerhalb der Anwendergemeinschaft können

Weiterentwicklungen gemeinsam identifiziert und in Auftrag gegeben werden.
 Ein hochwertiges, modernes Baummanagementsystem, das die Belange der
Praktiker berücksichtigt

www.arbormaps.de

Wie kann ich mich beteiligen?
 Finanzieller Beitrag
 Machen Sie die Kampagne bekannt!
 Überzeugen Sie Organisationen
 Unterstützen Sie die Entwicklung
Die Möglichkeit ein einzigartiges Produkt zu schaffen.
Ein Produkt von Praktikern für Praktiker, das Sie uneingeschränkt nutzen
können.

Mit ArborMaps ist es erstmals möglich europaweit online Bäume zu
erfassen und zu verwalten
und gemeinsam an möglichen und ggf. notwendigen Verbesserungen zu
arbeiten.

www.arbormaps.de

Vielen Dank für Ihre Aufmerksamkeit!
Der Vortag steht Ihnen auch als Download auf
http://www.arbormaps.de/index.php/presse
zur Verfügung.
Ihr Team von ArborMaps

www.arbormaps.de
<p> GNU ist das einzige eigens dafür entwickelte Betriebssystem seinen Nutzern Freiheit zu geben. Was ist GNU und welche Freiheit steht auf dem Spiel? </p>
<p> Was ist GNU? </p>
<p> GNU ist ein Betriebssystem, das Freie Software ist ‑ d. h. es respektiert die Freiheit der Nutzer. Das GNU-Betriebssystem besteht aus GNU-Paketen (Programme, die speziell vom GNU-Projekt freigegeben wurden) sowie von Dritten freigegebene Freie Software. Die Entwicklung von GNU ermöglichte es, einen Rechner ohne Software benutzen zu können, die Ihre Freiheit mit Füßen treten würde. </p>
<p> Hyperbola 8 mit i3-Fenstermanager, Cool-Retro-Term (Terminalemulator), Gimp (Bildbearbeitungsprogramm) und Iceweasel-UXP (Internetbrowser) </p>
<p> Was ist die Freie-Software-Bewegung? </p>
<p> Die Freie-Software-Bewegung setzt sich dafür ein, für EDV-Nutzer die Freiheit zu gewinnen, die Freie Software mit sich bringt: die Kontrolle über ihre eigene Datenverarbeitung. Unfreie Software stellt ihre Nutzer unter die Kontrolle des Softwareentwicklers. Nähere Informationen sind als Video abrufbar. </p>
<p> Was ist Freie Software? </p>
<p> Freie Software bedeutet, dass Nutzer uneingeschränkt die Freiheit besitzen, Software ausführen, vervielfältigen, vertreiben untersuchen, ändern und verbessern zu können. </p>
<p> Freie Software ist eine Frage der Freiheit, nicht des Preises. Um das Konzept frei zu verstehen, sollte an Redefreiheit gedacht werden, nicht an Freibier. </p>
<p> das Programm nach eigenen Wünschen und zu jedem Zweck auszuführen. (Freiheit 0). </p>
<p> die Funktionsweise des Programms zu untersuchen und zu ändern, so dass es die Datenverarbeitung nach eigenen Wünschen durchführt (Freiheit 1). Voraussetzung dafür ist der Zugriff auf den Quellcode. </p>
<p> Kopien weiterzuverteilen, damit man anderen helfen kann (Freiheit 2). </p>
<p> Kopien der modifizierten Versionen an Dritte weiterzugeben (Freiheit 3). Auf diese Weise kann der gesamten Gemeinschaft die Möglichkeit gegeben werden, von den Änderungen zu profitieren. Voraussetzung dafür ist der Zugriff auf den Quellcode. </p>
<p> Technologische Entwicklungen und die Nutzung von Rechnernetzen haben diese Freiheiten nun sogar noch wichtiger gemacht, als sie bereits 1983 waren. </p>
<p> Heute geht die Freie-Software-Bewegung weit über die Entwicklung des GNU-Systems hinaus. Siehe auch die Internetpräsenz der Free Software Foundation, um mehr über uns und was wir tun und über Möglichkeiten, wie man mithelfen kann, zu erfahren. </p>
<p> Mehr über GNU </p>
<p> GNU ist ein unixoides Betriebssystem. Das bedeutet, dass es eine Zusammenstellung aus vielerlei Programmen ist: Anwendungen, Bibliotheken, Extras für Entwickler, sogar Spielen. Die Entwicklung von GNU begann im Januar 1984 und ist als das GNU-Projekt bekannt. Viele der in GNU enthaltenen Programme sind unter der Schirmherrschaft des GNU-Projekts freigegeben; diese nennen wir GNU-Pakete. </p>
<p> Der Name GNU ist ein rekursives Akronym von GNU’s Not Unix (‚GNU ist nicht Unix‘) und wird [ˈgnuː] ausgesprochen. </p>
<p> Das Programm in einem unixoiden System, was Rechnerressourcen zuteilt und die Hardware anspricht, wird als Betriebssystemkern bezeichnet. GNU wird häufig mit einem Systemkern namens Linux genutzt. Die Kombination des GNU-Systems mit dem Linux-Kern ist das GNU/Linux-Betriebssystem. GNU/Linux wird von Millionen genutzt, obwohl es viele fälschlicherweise „Linux“ nennen. </p>
<p> Die Entwicklung von GNUs eigenem Kern, Hurd, begann (noch vor Linux) im Jahre 1990. Da Hurd ein interessantes technisches Projekt ist, wird er nach wie vor von engagierten Freiwilligen weiterentwickelt. </p>
<p> Das GNU-Projekt ruft die Gemeinschaft nachdrücklich dazu auf, auf eine freundliche, einladende und entgegenkommende Weise zu kommunizieren. Siehe unsere Leitlinien für Kommunikation des GNU-Projekts. </p>
<p> Planet GNU </p>
<p> Remote education does not require giving up rights to freedom and privacy : As countries around the world are beginning their long and slow recovery from the coronavirus, schools and universities may have to continue their struggle to give their students a quality education while using remote communication services... </p>
<p> GNU Gradebook ist eine Anwendung für Lehrkräfte zur Nachverfolgung von Schülernoten. Es werden verschiedene Benotungssysteme, wie das amerikanische mit Buchstaben (A, B, C, D, F) oder das europäische mit Zahlen, unterstützt. (Handbuch) </p>
<p> Die Free Software Foundation (FSF) ist eine gemeinnützige Organisation mit einer weltweiten Mission die Freiheit von Rechnernutzern zu fördern. Wir verteidigen die Rechte aller Softwarenutzer. </p>
<p> Bei der Übersetzung dieses Werkes wurde mit größter Sorgfalt vorgegangen. Trotzdem können Fehler nicht völlig ausgeschlossen werden. Sollten Sie Fehler bemerken oder Vorschläge, Kommentare oder Fragen zu diesem Dokument haben, wenden Sie sich bitte an unser Übersetzungsteam <web-translators@gnu.org>. </p>
<p> Weitere Informationen über die Koordinierung und Einsendung von Übersetzungen unserer Internetpräsenz finden Sie in der LIESMICH für Übersetzungen. </p>
<p> Bitte beachten Sie: Bei diesem Dokument handelt es sich um eine Übersetzung aus dem Englischen. Die in diesem Dokument enthaltenen Informationen basieren auf der englischsprachigen Artikelfassung. Die Richtigkeit dieser Informationen in Zusammenhang mit der deutschsprachigen Artikelfassung wurde im Rahmen dieser Übersetzung nicht geprüft. Diese Informationen werden ohne Gewähr für Richtigkeit bzw. Funktionalität zur Verfügung gestellt und auch keine Gewähr bezüglich der Vollständigkeit oder Richtigkeit der Übersetzung übernommen. </p>
<p> Impressum 2 Editorial 3 Berichte 4 THEMA Freie Software und Schule von Werner Arnhold 10 Potenziale Freier Software – Ein Plädoyer für GNU/Linux in Schule und Elternhaus von Herbert Reckmann 15 Freies Microsoft – Ein aktueller Lagebericht zu Lizenzen, Projekten und mehr von Christian Wenz 22 DISKUSSION Die vier Freiheiten eines Software-Benutzers – Ein Interview mit Richard Stallman 27 PRAXIS & METHODIK Es quiekt im Unterricht – Unterrichtstipps für den Einsatz von SQUEAK von Rita Freudenberg, Mirek Hancl und Esther Mietzsch 30 PUCK – ein Sommernachtstraum – Ein Open-Source-Projekt für die Sekundarstufe I von Lutz Kohl, Gabor Meißner und Harald Schmidt 39 Werkstatt – Experimente & Modelle: Das Gibbs’sche Phänomen von Jürgen Müller 48 LOG IN Heft Nr. 144 (2007) I N H A L T ZUM THEMA Freie und Open-Source-Software Wenn es um den Software-Einsatz in Schulen geht, stoßen seit Langem zwei Welten aufeinander: einerseits die auf einem neu gekauften Rechner bereits vorhandene kostenpflichtige Software, andererseits die Freie Software, die den meisten nahezu unbekannt ist – einerseits die als Standard proklamierten Softwareprodukte, andererseits Software, über die das Gerücht verbreitet wird, sie sei kryptisch und kaum bedienbar. Es ist sicherlich richtig, das Software als Ware betrachtet werden muss. Soll sie legal eingesetzt werden, so gibt es nur zwei Möglichkeiten: Sie wird entweder gekauft (bzw. gemietet), oder sie ist von vornherein so lizenziert, dass sie frei benutzt werden kann. Welche Vorund Nachteile damit für Schulen und für den Unterricht verbunden sind, wird in diesem Heft diskutiert. Das Titelbild zum Thema wurde von Jens-Helge Dahmen, Berlin, für LOG IN gestaltet und von ihm unter die Creative Commons License Deed gestellt (siehe auch Seite 76). COLLEG Grid Computing – Teil 1: Die Idee von Steven Müller 52 COMPUTER & ANWENDUNGEN Software: Entwickeln zum Nulltarif – Gratis-Entwicklungsumgebungen und -Softwarewerkzeuge von Microsoft 56 Xplora-Knoppix – Eine Open-Source-Quelle für den mathematischnaturwissenschaftlichen Unterricht 62 Hardware & Software: Das FUSS-Projekt 66 FORUM Rezension: Kofler, Michael: Linux – Installation, Konfiguration, Anwendung 70 Hinweise auf Bücher 71 Medien: Reihe ,,Sozialkompetenz“ 71 Computer-Knobelei: Das Bootspiel 73 Info-Markt: Freie und Open-Source-Software 74 Vorschau 76 LOG OUT 76 1 </p>
<p> Unangemessen </p>
<p> Laden... </p>
<p> Schließen Verstoß melden </p>
<p> × </p>
<p> Unangemessen </p>
<p> Sie haben dieses Magazin bereits gemeldet Vielen Dank, für Ihre Hilfe diese Plattform sauber zu halten. Die Redaktion wird schnellst möglich einen Blick darauf werfen. </p>
<p> Open Source und Freie Software </p>
<p> "Der Ausdruck Open Source [?o?p?n s???s] (engl.) bzw. Quelloffenheit wird meist auf Computer-Software angewendet und bedeutet im Sinne der Open Source Definition, dass es jedem ermöglicht wird, Einblick in den Quelltext eines Programms zu nehmen. Open Source Software wird unter einer Open-Source-Lizenz veröffentlicht, die erlaubt, diesen Quellcode auch weiterzugeben oder zu verändern." Wikipedia, Open Source [http://de.wikipedia.org/wiki/Open_source ] </p>
<p> Erläuterung relevanter FOSS Begriffe </p>
<p> Bevor die verschiedenen Lizenzmodelle vorgestellt werden, sollen zunächst als Einstieg wichtige Begriffe, die im Zusammenhang mit Softwarelizenzen fallen erläutert und abgegrenzt werden. </p>
<p> FOSS </p>
<p> Freie und Open Source Software (FOSS) </p>
<p> Lizenzen und Nutzungsrechte </p>
<p> Bei den unterschiedlichen Nutzungsbestimmungen von Software handelt es sich bei den Unterschieden vor allem um verschiedene Auslegungen der einzelnen Nutzungsrechte und Lizenzen. Unter Lizenzen sind rechtliche Vereinbarungen zu verstehen, bei der der Lizenzgeber dem Lizenznehmer (gegen eine Lizenzgebühr) ein Nutzungsrecht an einem gewerblichen Schutzrecht (z.B. Urheberrecht, Patentrecht) gewährt. Patentrecht und Urheberrecht können gleichzeitig auf eine Software angewendet werden. Wobei der Unterschied in der Schutzrichtung liegt. </p>
<p> Urheberrechtlicher Schutz/Copyright </p>
<p> Die Frage danach, wie der Lizenzgeber überhaupt zu einem Schutzrecht kommt, dass er an Dritte weitergeben kann beantwortet der urheberrechtliche Schutz bzw. das Copyright . Nach dem deutschen Urheberrechtsgesetz genießen „[d]ie Urheber von Werken der Literatur, Wissenschaft und Kunst […] für ihre Werke Schutz nach Maßgabe dieses Gesetzes.“ (§ 1 UrhG [1]). Bezogen auf den achten Abschnitt [„besondere Bestimmungen für Computerprogramme“][2] erhält der Programmierer als Schöpfer des Werkes das Urheberecht auf den Quellcode und den Objektcode, nicht aber auf die Idee oder den Algorithmus (Vgl § 69a UrhG). Des Weiteren bestimmt § 69c UrhG [3], dass das Recht auf Vervielfältigung, Bearbeitung und Verbreitung nur mit Erlaubnis des Urhebers erfolgen kann. </p>
<p> Patentrechtlicher Schutz </p>
<p> Genau diese Ideen und Algorithmen die hinter einer Software stehen, und vom Urheberrecht nicht erfasst werden, fallen unter den Patentschutz. Der Patentschutz ist daher wesentlich stärker, denn dadurch kann zum Beispiel ein Algorithmus monopolisiert werden und ausschließlich den Rechten einer Person zugeordnet werden. (Vgl. § 9 PatG [4]). Des Weiteren gilt das Neuheitsprinzip (siehe § 3 PatG [5], § 6 PatG [6]) beim Patentschutz. Das heißt ein Patent kann nur einer Person zugeordnet werden, und auch nur derjenigen, die es zuerst anmeldet. Dagegen sind beim Urheberrecht so genannte „zufällige Doppelschöpfungen“ möglich. Ein weiterer Unterschied ist der Zeitpunkt der schutzrechtlichen Wirkung. Das Urheberrecht an einem Werk entsteht mit der Schöpfung, während das Patentrecht erst nach staatlicher Anerkennung rechtens ist. </p>
<p> Ein weiterer Begriff der im Zusammenhang der Free und Open Source Software wichtig ist, ist das Copyleft. Die Gegenbewegung zum Copyright wurde von Richard Stallmann (Free Software Foundation) begründet und verleiht Dritten die Möglichkeit sich das Copyright eines anderen zu „leihen“. </p>
<p> „Copyleft is a general method for making a program free software and requiring all modied and extended versions of the program to be free software as well.“ (Free Software Foundation) </p>
<p> Die im Folgenden vorgestellten Softwaremodelle unterscheiden sich hauptsächlich über die Strenge des Copylefts. </p>
<p> Softwarenutzungsrechte </p>
<p> Wie der Grafik zu entnehmen ist erfolgt bei den verschiedenen Softwarekategorien und Lizenzmodellen zunächst einmal eine grobe Unterscheidung in Freie bzw. Open Source Software (FOSS) und Proprietärer Software. </p>
<p> Freie Software </p>
<p> Nach der 1985 von Richard Stallman gegründeten Free Software Foundation (FSF)[8] ist Freie Software, Software, die von jedem genutzt, kopiert, verteilt, verändert werden kann und nicht kostenlos sein muss, d.h. der Quellcode muss frei zugänglich sein. Wobei das frei in dem Sinne verstanden werden sollte: </p>
<p> „Free software is a matter of liberty, not price. To understand the concept, you should think of free as in free speech, not as in free beer“. </p>
<p> Die FSF definiert Freie Software über vier Arten von Freiheit: </p>
<p> Freiheit zur Nutzung eines Programms zu beliebigen Zwecken; </p>
<p> Freiheit zum Studium der Funktionsweise eines Programms und zur Anpassung an die eigenen Bedürfnisse; </p>
<p> Freiheit zum Weitervertrieb von Programmen; </p>
<p> Freiheit zur Modifikation und Verbesserung von Programmen und zur Veröffentlichung solcher Modifikationen und Verbesserungen, um diese allgemein nutzbar zu machen. </p>
<p> Im GNU-Projekt steht fast alle Software unter Copyleft, da es das GNU-Ziel ist, jedem Benutzer die Freiheiten zu geben, die der Begriff "Freie Software" bedingt. (Free Software Foundation, Philosophy [9] ) </p>
<p> Open Source </p>
<p> Ausgehend von der Idee der freien Software kam es 1998 zur Gründung der Open Source Initiative (OSI)[10] und zur Open Source Definition (OSD). Die Open Source Definition ist sehr ähnlich zur Free Software Definition. Open Source Software kann ebenfalls für beliebige Zwecke genutzt werden, es kann eine unbeschränkte Anzahl von Kopien angefertigt werden; der Nutzer erhält die Berechtigung, die Programme zu ändern, zu modifizieren, weiterzuentwickeln, mit anderer Software zu verbinden etc. und Kopien der Software an Dritte weiterzugeben, unverändert oder verändert. </p>
<p> In der Praxis werden diese Begriffe jedoch manchmal anders interpretiert. Als Open Source wird jegliche Software verstanden, deren Quellcode einsehbar ist, während Freie Software oft mit Freeware verwechselt wird (NOW Gutachten 2005: 3). Des Weiteren werden mit den Begriffen „Freie Software“ und „Open Source Software“ unterschiedliche politische Linien verbunden. Während mit ersterem die Nutzerfreiheiten betont werden sollen, steht zweites für eine pragmatischere, weniger philosophische Richtung (Vgl. Stallmann 2007: 2ff) oder (Wikipedia, Begriffsproblem freie Software). Da aber nach den Definitionen die Unterschiede nur sehr klein sind werden Freie und Open Source Software (FOSS) in dieser Arbeit als Synonym betrachtet. </p>
<p> Proprietäre Software </p>
<p> „Proprietär beschreibt den Zustand, bei dem ein Individuum oder eine Firma die exklusiven Rechte an einer Software hält, und anderen gleichzeitig Zugang zum Quelltext, das Recht die Software zu kopieren, verändern oder zu studieren verbietet.“ (Wikipedia, proprietäre Software [11]). Demnach erwirbt ein Nutzer nicht das Programm, sondern nur ein eingeschränktes Nutzungsrecht, das ihm erlaubt eine Sicherungskopie anzufertigen, die Software auf einem Rechner zu installieren, ihm Reverse Engineering verbietet, sowie der Hersteller weder haftet noch eine Gewährleistung für das Produkt erteilt. </p>
<p> Shareware/Freeware/Demoversionen </p>
<p> Kategorien der proprietären Software sind Shareware, Freeware und Demoversionen. Hierbei handelt es sich um copyright-geschützte Software, die in der Regel ohne Quellcode und ohne Veränderungserlaubnis, sowie z.T. auch nur mit eingeschränktem Leistungsumfang, kostenlos oder vergünstigt, zur Verfügung gestellt wird, jedoch oft bei regelmäßiger Nutzung des Programms, bzw. für die Nutzung der Vollversion, ein bestimmter Geldbetrag auszurichten ist (Vgl. Grassmuck 2002: 415ff [12]) </p>
<p> Public Domain Licenses </p>
<p> Unter Public Domain Licenses versteht man nicht durch Urheberrecht geschützte Software. Gründe für das fehlende Urheberrecht können sein, dass sie nicht gesetzlich schützbar sind oder der Autor auf Urheberrecht verzichtet, dieses verfallen oder aus formalen Gründen verwirkt worden ist. Software, die mit oder ohne Quellcode gemeinfrei zur Verfügung steht. D.h. Jede Nutzung bis hin zur Beanspruchung eines Copyrights durch einen Dritten ist zulässig. (Vgl. GNU, Lizenzen) </p>
<p> Abgrenzung von FOSS </p>
<p> Die bisher genannten Kategorien unterscheiden sich jedoch von FOSS zum einen durch den Anspruch auf das Copyright/Urheberrecht der Autoren und zum anderen durch die Festlegung spezifischer Nutzungsfreiheiten in den Lizenzen. </p>
<p> Berkeley Software Distribution (BSD) </p>
<p> Die Berkeley Software Distribution ist eine der ersten Quellcode-Lizenzen und das charakteristische Modell für Lizenzen ohne Copyleft. Charakteristisch für diese Lizenz ist, dass der Copyright-Vermerk und der Lizenztext mitverbreitet werden müssen. Die Idee die dahinter steckt, ist dass der Berkeley Code und alle darauf aufbauende Software immer frei weitergebbar und modifizierbar bleiben sollten. Jedoch birgt dieses sehr freie Lizenzmodell das Problem bzw. die Chance, dass abgeleitete Software nicht ebenfalls im Quellcode verfügbar sein muss, das heißt, dass Software unter der BSD Lizenz auch zu proprietärer Software gemacht werden kann, es muss lediglich ein Copyright Vermerk im Quellcode vorhanden bleiben. Entstanden ist diese Software Lizenz 1977 an der Universität von Berkeley im Rahmen einer der ersten UNIX Versionen. Die Gründe, die für diese freie Lizenz sind; Ken Thompson und Dennis Ritchie haben als sie den Vorläufer von UNIX entwickelten in den Bell Telephone Labs bei AT&T gearbeitet. Wegen der Monopolstellung von AT&T, durfte man sich nicht in anderen Wirtschaftsbereichen engagieren. Als Ken Thompson UNIX an die Berkeley Universität brachte, damit Studenten daran weiterarbeiten konnten, vertrat man die Auffassung, dass die Ergebnisse öffentlich finanzierter Forschung und Entwicklung der Allgemeinheit gehören (Vgl. Grassmuck 2002: 262f). Sehr ähnlich zur BSD Lizenz ist die Apache Lizenz. Apache zählt zu den am weitest verbreitesten Webservern und ist ein Produkt der Apache Software Foundation (Vgl. Grassmuck 2002: 271f[13]) </p>
<p> GNU General Public License (GPL) </p>
<p> Die GNU General Public License zählt zu den wichtigsten und bekanntesten Software Lizenzen und ist gleichzeitig das Grundmodell für Lizenzen mit strengem Copyleft. 1984 startete Richard Stallman das GNU Projekt. Hintergrund dieser Initiative war seine fundamentalistische Reaktion auf die damalige Piraterie Panik. („Wenn Sie Software mit Ihrem Nachbarn austauschen, sind Sie ein Pirat. Wenn Sie Änderungen haben wollen, bitten Sie uns darum, sie zu machen“ (Stallman 1999: 54).). Seine einflussreichste Erfindung neben zahlreicher Software ist das Copyleft, eine mit Juristen zusammen erarbeitete Parodie auf das „Copyright“. </p>
<p> “The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.” (GNU, General Public Licence, Preambel) </p>
<p> Die Idee des Copylefts ist, die bereits genannten vier Freiheiten abzusichern. • Freiheit zur Nutzung eines Programms zu beliebigen Zwecken; • Freiheit zum Studium der Funktionsweise eines Programms und zur Anpassung an die eigenen Bedürfnisse; • Freiheit zum Weitervertrieb von Programmen; • Freiheit zur Modifikation und Verbesserung von Programmen und zur Veröffentlichung solcher Modifikationen und Verbesserungen, um diese allgemein nutzbar zu machen </p>
<p> Außerdem verbietet die GPL es, diese Freiheiten zu verweigern oder auf sie zu verzichten. (Vgl. GNU). Wichtigstes Charakteristikum dieses Softwarenutzungsrecht, und des Copylefts ist, dass jeder der die Software oder einen Teil verändert oder bearbeitet und das so veränderte Programm weitergibt oder veröffentlicht, muss die Software wiederum unter der GPL lizenzieren. Das heißt, dass jedermann lizenzgebührenfrei dieselben Nutzungsrechte eingeräumt werden, die auch der Bearbeiter von dem oder den ursprünglichen Urhebern unter der GPL erhalten hat. </p>
<p> “You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.” (GNU, General Public License, Terms and Conditions 2a) </p>
<p> Auch wenn diese Lizenz mit anderen kombiniert wird, muss das Ergebnis wiederum unter die GPL gestellt werden. </p>
<p> „Stallmans Ziel mit dieser juristischen Konstruktion war es nicht, Software einfach zu verschenken (wie es bei Freeware oder Public Domain-Software geschieht; er betont, dass GNU nicht in der Public Domain sei, was es erlauben würde, alles damit zu machen, auch die weitere Verbreitung zu beschränken), sondern systematisch einen Bestand an nützlicher Software aufzubauen, der für alle Zeiten – genauer: für die Laufzeit der Schutzfrist des am längsten lebenden Urhebers – frei bleiben wird. Das klingt nach einem ideologischen, utopistischen Programm. Tatsächlich sind die Beweggründe dahinter ganz pragmatisch: Techniker wollen Dinge erledigen und Probleme lösen, ohne daran durch legalistische Mauern gehindert zu werden. Sie hassen Redundanz. Wenn jemand anderes ein Problem gelöst hat, wollen sie nicht die gleiche Arbeit noch einmal machen müssen. Sie wollen ihr Wissen mit anderen teilen und von anderen lernen, und nicht durch NDAs, ausschließende Lizenzen oder Patente daran gehindert werden.“ (Grassmuck 2002: 284) </p>
<p> Library/Lesser GPL (LGPL) </p>
<p> Die Library GPL, später in Lesser GPL geändert wurde 1991, speziell für Programmbibliotheken eingeführt und entspricht einem Lizenzmodell mit beschränktem Copyleft. Die Grundintention der LGPL entspricht der der GPL. Demnach muss diese Softwarelizenz frei kopier-, verbreit- und modifizierbar sein; der Quellcode muss verfügbar sein und der Urheber hat keine Haftungs- und Gewährleistungsansprüchen. Der große Unterschied zur GPL besteht darin, dass Programme, die ein neues ausführbares Ganzes bilden, nicht selbst diesen Freiheiten unterstehen müssen. Der Hauptgrund für diese „Lockerung“, bezogen auf die Freiheit, war, dass Anreize für proprietäre Programmierer geschaffen werden sollten, „Freie“ Werkzeuge zu benutzen. (GNU, Lesser General Public License) </p>
<p> Vergleich der Softwarelizenzen </p>
<p> Es kann also gesagt werden, dass sich eine Typisierung der Lizenzen nach dem Grad des Copylefts vornehmen lässt: </p>
<p> Lizenzen mit strengem Copyleft-Effekt </p>
<p> Lizenzen mit beschränktem Copyleft-Effekt </p>
<p> Lizenzen mit Wahlmöglichkeiten </p>
<p> Ein großer Unterschied der GNU General Public License zur Berkeley Software Distribution, Lesser General Public Licence und der Mozilla Public Licence ist, dass freier Quellcode nicht in unfreien, d.h. proprietären Quellcode umgewandelt werden darf. Daher haben viele kommerzielle Firmen auch ein Problem mit den erstgenannten, da sie „niemals zulassen [würden], dass eine so virenartige Lizenz wie die GPL, die sich in den Code reinfrisst und nie wieder daraus weggeht, in ihren Code reinkommt.“ Dirk Hohndel, in: WOS 1, 7/1999. (XFree86 Projekt). Jedoch kann man dieses Problem auch zweideutig auffassen, denn die „»sehr, sehr freie« BSD-Lizenz erlaubt es z.B., dass Microsoft so frei war, große Mengen Free BSD-Code in Windows zu verwenden (Grassmuck 2002: 299[14]). </p>
<p> Drei zentrale gemeinsame Punkte der verschiedenen Lizenzen sind a) die Beifügung des Quellcodes zum Binärcode der Software, b) das Recht, Kopien anzufertigen und weiterzugeben, c) das Recht, die ursprüngliche Software zu modifizieren und die abgeleitete Software zu verbreiten. </p>
<p> im Sinne der Open Source Definition, dass es jedem ermöglicht wird, Einblick in den Quelltext eines Programms zu nehmen. + </p>
<p> Philosophie des GNU-Projekts </p>
<p> Freie Software bedeutet, dass Softwarenutzer Freiheit haben (es geht also nicht um den Preis). Wir entwickelten das GNU-Betriebssystem, damit Nutzer Freiheit bei ihrer Datenverarbeitung haben können. </p>
<p> Konkret bedeutet Freie Software, Nutzer besitzen vier wesentliche Freiheiten: (0) das Programm ausführen, (1) den Quellcode untersuchen und abändern, (2) exakte Kopien redistribuieren und (3) modifizierte Varianten distribuieren. </p>
<p> Software unterscheidet sich von materiellen Objekten ‑ wie Stühlen, Brötchen oder Benzin ‑ darin, dass sie viel leichter geändert oder vervielfältigt werden kann. Diese Möglichkeiten machen Software so einzigartig. Wir glauben, dass Softwarenutzer in der Lage sein sollten davon Gebrauch zu machen, nicht nur deren Entwickler. </p>
<p> Die Free Software Foundation (FSF) ist eine gemeinnützige Organisation mit einer weltweiten Mission die Freiheit von Rechnernutzern zu fördern. Wir verteidigen die Rechte aller Softwarenutzer. </p>
<p> Bei der Übersetzung dieses Werkes wurde mit größter Sorgfalt vorgegangen. Trotzdem können Fehler nicht völlig ausgeschlossen werden. Sollten Sie Fehler bemerken oder Vorschläge, Kommentare oder Fragen zu diesem Dokument haben, wenden Sie sich bitte an unser Übersetzungsteam <web-translators@gnu.org>. </p>
<p> Weitere Informationen über die Koordinierung und Einsendung von Übersetzungen unserer Internetpräsenz finden Sie in der LIESMICH für Übersetzungen. </p>
<p> Bitte beachten Sie: Bei diesem Dokument handelt es sich um eine Übersetzung aus dem Englischen. Die in diesem Dokument enthaltenen Informationen basieren auf der englischsprachigen Artikelfassung. Die Richtigkeit dieser Informationen in Zusammenhang mit der deutschsprachigen Artikelfassung wurde im Rahmen dieser Übersetzung nicht geprüft. Diese Informationen werden ohne Gewähr für Richtigkeit bzw. Funktionalität zur Verfügung gestellt und auch keine Gewähr bezüglich der Vollständigkeit oder Richtigkeit der Übersetzung übernommen. </p>
<p> Benutzerspezifische Werkzeuge </p>
<p> PlayOgg! </p>
<p> erstellt von Matt Lee — Published on 17.03.2010 15:20 </p>
<p> Proprietäre Softwarefirmen wie Microsoft, Apple und Adobe treiben vermehrt Video- und Audioformate voran, die den Zugriff auf die Daten und Softwareentwickler in deren Arbeit einschränken. Es gibt aber eine Alternative, die auf allen Computern ohne Einschränkungen abgespielt werden kann - Ogg. Ogg bietet professionelle Multimedia-Formate. Ogg wird ausgiebig von Freie-Software-Projekten, Künstlern und einer zunehmenden Anzahl von Musik- und Videovertreibern genutzt. </p>
<p> Schritt 1: VLC Media Player installieren </p>
<p> Um Ogg-Dateien abspielen zu können, braucht man ein Abspielprogramm, das diese Formate versteht. Viele verschiedene Freie-Software-Programme funktionieren mit Ogg. Der VLC Media Player ist uns besonders sympathisch. Um ihn herunterzuladen und zu installieren folge bitte diesen Anweisungen. </p>
<p> Schritt 2: Der PlayOgg-Kampagne beitreten </p>
<p> Schreibe Dich bei der Mailingliste ein, um über Neuigkeiten, Aktionen und Möglichkeiten, die Kampagne zu unterstützen, informiert zu werden. </p>
<p> Schritt 3: Finde Ogg-freundliche Internetseiten </p>
<p> Besuche unsere Liste Ogg-freundlicher Seiten. Wenn Du eine Seite kennst, die Videos oder Musik im Ogg-Format anbietet, schicke uns eine E-Mail an campaigns@fsf.org, damit wir diese zur Liste hinzufügen können. </p>
<p> Schritt 4: Ogg bewerben Um dieses großartige Format zu fördern, kannst Du einfach einen dieser Web-Buttons auf Deinem Netzauftritt oder Blog platzieren. </p>
<p> Mit bestem Dank an Xiph </p>
<p> Ogg abspielen - Es ist einfach! </p>
<p> Mit Ogg klarzukommen ist einfach... Video- und Audiodateien im Ogg-Format lassen sich inzwischen ohne Plugins in 24% der Browser auf der Welt abspielen! Mehr erfahren </p>
<p> Zusätzlich kann Vorbis-Audio und Theora-Video mit einer Vielzahl von Audio- und Videobearbeitungsprogrammen bearbeitet werden. </p>
<p> Die PlayOgg-FAQ </p>
<p> Was ist Ogg? </p>
<p> Ogg ist ein professionelles Medienformat. Ogg Vorbis enkodiert Audio und Ogg Theora enkodiert Video. Wenn Du eine Datei mit einer Ogg-Dateierweiterung siehst (z.B.: musicfile.ogg) - Spiel sie ab! </p>
<p> Wie verwende ich Ogg? </p>
<p> Um Ogg-Vorbis-Streams und Ogg-Theora-Dateien abzuspielen, braucht man ein Abspielprogramm, das diese Formate versteht. Viele verschiedene Freie-Software-Player funktionieren mit Ogg. Der VLC Media Player ist uns besonders sympathisch. Um ihn herunterzuladen und zu installieren folge bitte diesen Anweisungen. </p>
<p> Wie kann ich helfen? </p>
<p> Du kannst Deine Ideen zur Verbreitung von Ogg teilen, indem Du Dich bei der Mailingliste über die Kampagnendiskussion anmeldest -- Diese Liste ist eigenständig und von der Haupt-Ankündigungsliste getrennt. Du kannst auch andere PlayOgg-Unterstützer auf unserer Microblogging-Gruppe auf identi.ca treffen. </p>
<p> Warum Ogg verwenden? </p>
<p> Keine Einschränkungen durch Patente! </p>
<p> Im Unterschied zu MP3 ist Ogg Vorbis nicht patentbehaftet. Microsoft musste 1,5 Millionen Dollar zahlen, nachdem sie verklagt wurden, weil sie MP3 ohne Lizenz verwendet hatten. Mit Ogg Vorbis wären sie auf der sicheren Seite gewesen! </p>
<p> Diese Patentgerichtsverfahren werden Dich vielleicht niemals direkt betreffen, aber sie erzeugen eine Kultur, in der kreative und geschickte Individuen keine Multimedia-Programme entwickeln können, ohne Angst haben zu müssen, rechtlich angegriffen zu werden. Ogg zu verwenden ist eine Möglichkeit, um diese Leute in ihrem Bestreben zu unterstützen und eine bessere Kultur zu fördern. </p>
<p> Wähle Freie Software! </p>
<p> RealPlayer, Windows Media Player, iTunes und andere bekannte Formate zwingen Leute dazu, unfreie Software zu verwenden: Die Firmen haben die Kontrolle, nicht die Benutzer. Die Firmen, die die Kontrolle über diese Software haben, entwerfen sie, um Benutzer einzuschränken und sie auszuspionieren. Wenn Du dich für Ogg Vorbis und Ogg Theora entscheidest, kannst Du Audio- und Videostreams mit vielen unterschiedlichen Programmen öffnen, inklusive Freier Software, die Deine Freiheit respektiert. </p>
<p> Nichts zu verlieren! </p>
<p> Du verlierst keine Audioqualität mit Ogg Vorbis. Es kann Dateien kleiner komprimieren als MP3 und klingt dabei immer noch besser. Das Beste daran ist, dass es entworfen wurde, um absolut frei von Patenten zu sein und es nicht erfordert, proprietäre Software zu verwenden. </p>
<p> Ermutige Deine Freunde, der Kampagne beizutreten </p>
<p> Hier ist ein kurzer Brief, den Du an Deine Freunde oder Familie schicken kannst. Bitte kontaktiere nur Leute, die Du persönlich kennst. Unerwünschte Nachrichten ("Spam") schaden unseren Bemühungen. Schicke die E-Mail direkt von Deinem Desktop-Mailprogramm oder kopiere den Text und füge ihn in eine E-Mail ein. </p>
<p> Ich schreibe Dir, um dich zu bitten, die "Play Ogg"-Kampagne (www.playogg.org) zu unterstützen. </p>
<p> Hast Du es satt, ständig gebeten zu werden, proprietäre Software und Plugins herunterzuladen, um Videos abspielen zu können und die Musik zu hören, die Du willst? </p>
<p> Proprietäre Softwarefirmen wie Microsoft, Apple und Adobe treiben vermehrt Video- und Audioformate voran, die den Zugriff auf die Daten und Softwareentwickler in deren Arbeit einschränken. Es gibt aber eine Alternative, die auf allen Computern ohne Einschränkungen abgespielt werden kann - Ogg. </p>
<p> Ogg bietet professionelle Multimedia-Formate. Ogg wird ausgiebig von Freie-Software-Projekten, Künstlern und einer zunehmenden Anzahl von Musik- und Videovertreibern genutzt. </p>
<p> Bald schon werden über eine Million Kinder und ihre Familien einen "One Laptop per Child XO"-Computer bekommen, der von Haus aus Ogg-Dateien abspielen kann. Indem Ogg unterstützt wird, können wir sicherstellen, dass diese Kinder Zugriff auf tausende von Bildungsressourcen und Materialien im Internet haben und nicht unnötig eingeschränkt werden. </p>
<p> Schließ Dich uns an und unterstütze Ogg in vier einfachen Schritten: Installiere den VLC Mediaplayer, melde Dich bei der PlayOgg-Mailingliste an, finde und teile Ogg-freundliche Internetseiten und baue einen PlayOgg-Button auf Deinem Netzauftritt oder Deinem Blog ein. Falls Du dann immer noch nach einer Möglichkeit suchst, mehr dazu beizuzutragen, überlege Dir, ob Du nicht ebenfalls andere motivieren willst, dasselbe zu tun. </p>
<p> Send your feedback on our translations and new translations of pages to campaigns@fsf.org. </p>
<p> ▾ </p>
<p> Wörterbuch Deutsch-Englisch </p>
<p> ▾ </p>
<p> Externe Quellen (nicht geprüft) </p>
<p> Operativ sieht das so aus: Er muss seine Techniker auf die Struktur des </p>
<p> [...] </p>
<p> proprietären Systems des jeweiligen Geräteherstellers </p>
<p> [...] schulen lassen, dessen proprietäre Software-Werkzeuge auf allen Service-PCs [...] </p>
<p> /Notebooks installieren und diese auch immer aktuell halten. </p>
<p> Operationally, this is how it looks: They have to arrange for their technicians to be </p>
<p> [...] </p>
<p> trained in the structure of the proprietary system of whichever equipment </p>
<p> [...] manufacturer, install their proprietary software tools on all service PCs/ [...] </p>
<p> Da Outlook ein proprietäres Produkt, also nicht als Freie Software mit Quelltext verfügbar ist, hat [...] </p>
<p> die Integration eine Reihe von "Ecken und Kanten". </p>
<p> Der Wechsel von proprietärer Software hin zu einer standardisierten Softwarearchitektur [...] </p>
<p> bietet allen am Entwicklungsprozess </p>
<p> [...] </p>
<p> moderner Automobilelektronik Beteiligten Kosten- und Kapazitätsvorteile. </p>
<p> Dass die Freie Software in der offiziellen Deklaration gegen den massiven Widerstand der </p>
<p> [...] </p>
<p> USA gleichberechtigt neben der </p>
<p> [...] Open Source und der proprietären Software genannt wird, wurde [...] </p>
<p> nicht zuletzt von der Presse </p>
<p> [...] </p>
<p> als ein Achtungserfolg beurteilt und von der Zivilgesellschaft als ein Schritt zur Überwindung der Marginalisierung dieser wichtigen Ressource. </p>
<p> The fact that free software is afforded an equal mention in </p>
<p> [...] </p>
<p> the official declaration </p>
<p> [...] alongside open source and proprietary software in spite of heavy resistance [...] </p>
<p> from the USA has been </p>
<p> [...] </p>
<p> appraised - not least of all by the press - as a succès d'estime, and by civil society as a step towards overcoming the marginalization of this vital resource. </p>
<p> Bedeutung der Kommunikation per </p>
<p> [...] Telefon mit der Neigung proprietärer Software zur Monopolisierung, [...] </p>
<p> wird unmittelbar klar, daß die </p>
<p> [...] </p>
<p> Kommunikation mit Freier Software möglich sein muß, um langfristig ein globales Monopol auf Telekommunikation zu erschweren. </p>
<p> gnu.feld-it.at </p>
<p> If one combines the social and economic </p>
<p> [...] </p>
<p> [...] with the tendency of proprietary software to create monopolies, [...] </p>
<p> it immediately becomes apparent </p>
<p> [...] </p>
<p> that communication as to be possible with Free Software in order to help preventing a global monopoly on telecommunication. </p>
<p> gnu.feld-it.at </p>
<p> Die größte Spaltung in der Gemeinschaft </p>
<p> [...] </p>
<p> [...] Leuten, die freie Software als eine soziale und ethische Frage und proprietäre Software als soziales Problem verstehen (Unterstützer der Freie-Software-Bewegung) [...] </p>
<p> und solchen, </p>
<p> [...] </p>
<p> die nur praktische Vorteile anführen und freie Software nur als effizientes Entwicklungsmodell vorstellen (die Open-Source-Bewegung). </p>
<p> tech-mirror.com </p>
<p> The largest division in the community is </p>
<p> [...] </p>
<p> [...] appreciate free software as a social and ethical issue and consider proprietary software a social problem (supporters of the free software movement), [...] </p>
<p> and those who cite only </p>
<p> [...] </p>
<p> practical benefits and present free software only as an efficient development model (the open source movement). </p>
<p> tech-mirror.com </p>
<p> tech-mirror.com </p>
<p> Wenn die Lizenz für proprietäre Software nicht kaufen, sind Sie [...] </p>
<p> verpflichtet, sie unter den gleichen Bedingungen für alle </p>
<p> [...] </p>
<p> öffentlichen Einrichtungen den Zugang, und übertragbare Lizenzen ohne zusätzliche Kosten und Einschränkungen (aha - fallen die gute Arbeit Microsoft-Bibliotheken wollen zu Linux wechseln, - r), und Verträge, die direkt mit der Regierung als eine einheitliche Partei getreten. </p>
<p> linuxdigest.ru </p>
<p> linuxdigest.ru </p>
<p> If the license for proprietary software should not buy, you're [...] </p>
<p> required to access them under the same conditions for all </p>
<p> Außerdem ist es möglich, dass wir nicht identifizierbare Daten über unsere Benutzer an Werbeagenturen, Geschäftspartner oder Dritte weitergeben (zum </p>
<p> [...] </p>
<p> Beispiel die Anzahl der Benutzer, die Anzahl </p>
<p> [...] der Benutzer, die unsere proprietäre Software heruntergeladen haben, [...] </p>
<p> den Anteil der männlichen und weiblichen Nutzer </p>
<p> [...] </p>
<p> oder wie viele unserer Nutzer eine bestimmte Computermarke verwenden), um den Inhalt und die Werbung auf unserer Webseite an die Benutzer anzupassen bzw. zu verbessern. </p>
<p> In addition, we may share non-identifiable aggregate information about our users (for example; </p>
<p> and male visitors to our site or how many of our users which </p>
<p> [...] </p>
<p> use a certain computer brand) with advertisers, business partners, and other third parties in an effort to customize or enhance the content and advertising on our website for our users. </p>
<p> Die zusätzlichen Kosten durch Softwarelizenzen, die Beschränkungen bei der Anwendung und späteren Verfügbarmachung von Forschungsergebnissen, die </p>
<p> [...] </p>
<p> sich daraus ergeben, </p>
<p> [...] sowie die mangelnde Transparenz proprietärer Software machen Freie Software zur einzig [...] </p>
<p> akzeptablen Wahl für die Wissenschaft. </p>
<p> gnu.feld-it.at </p>
<p> gnu.feld-it.at </p>
<p> The additional costs for software licenses, the limitations in using the software and later publication of results resulting from </p>
<p> [...] </p>
<p> them as well as the lack </p>
<p> [...] of transparency inherent in proprietary software make Free Software the only acceptable [...] </p>
<p> choice for science. </p>
<p> gnu.feld-it.at </p>
<p> gnu.feld-it.at </p>
<p> dWs: die Anwendung des Verfahrens für geschäftliche Zwecke #dei: die Umsetzung des </p>
<p> [...] </p>
<p> Verfahrens in </p>
<p> [...] %(po:Eigentumsgegenständen) #iiS: in proprietärer Software #dEn: die Nutzung zur [...] </p>
<p> Erreichung von Interoperabilität </p>
<p> [...] </p>
<p> #dfa: die Veröffentlichung in %(fi:frei weiterentwickelbaren Informationsgebilden) mit einem angemessenen Verweis auf die Nutzungseinschränkungen #Plr: freier Quelltext #DfW: Der Inhaber eines %(ll:Logilegs) genießt ab dem Tag der Offenlegung eines innovativen logischen Verfahrens einige Jahre lang Ausschlussrechte auf %{L1}. </p>
<p> [...] dann ist das Programm proprietäre Software, was bedeutet, dass [...] </p>
<p> es unter einem unethischen System </p>
<p> [...] </p>
<p> verteilt wurde und somit nicht benutzt werden sollte, ja gar nicht erst entwickelt werden sollte. </p>
<p> Die Forschung unterstützen und allen Interessenvertretern bewusst machen, welche Möglichkeiten die verschieden Softwaremodelle </p>
<p> [...] </p>
<p> bieten, die Methoden </p>
<p> [...] zeigen, wie Software entwickelt wird, einschließlich proprietärer Software, Open Source und Freier Software, und damit den Wettbewerb [...] </p>
<p> fördern, eine </p>
<p> [...] </p>
<p> freie Wahl und erschwingliche Preise gewährleisten, sowie allen Interessenvertretern die Möglichkeit geben, selbst zu entscheiden, welche Lösung am besten ihren Anforderungen entspricht. </p>
<p> possibilities offered by </p>
<p> [...] different software models, and the means of their creation, including proprietary, open-source and free software, in order to [...] </p>
<p> increase competition, </p>
<p> [...] </p>
<p> freedom of choice and affordability, and to enable all stakeholders to evaluate which solution best meets their requirements. </p>
<p> Daher stehen inzwischen vor allem die Vorteile von Open-Source-Software im Rampenlicht: Software </p>
<p> [...] </p>
<p> mit offenem Quellcode gilt als </p>
<p> [...] zuverlässiger als die meiste proprietäre Software, und dies bei deutlich [...] </p>
<p> Because of this especially the advantages of open source software are in the limelight: Software with </p>
<p> [...] </p>
<p> open source code is regarded as being more </p>
<p> [...] reliable than most proprietary software, and the costs are considerably lower. </p>
<p> Dieser Text ignoriert die Meinungen von allen geachteten Programmierern und Wirtschaftswissenschaftlern und stützt seine spärlichen Aussagen über die Ökonomie der Software-Entwicklung nur auf zwei unveröffentlichte Studien aus dem Umfeld von BSA (von Microsoft und anderen </p>
<p> [...] </p>
<p> amerikanischen Großunternehmen dominierter Verband zur Durchsetzung des Urheberrechts) </p>
<p> This text disregards the opinions of virtually all respected software developpers and economists, citing as its only source of information about the software reality two unpublished studies from BSA & friends (alliance for </p>
<p> [...] </p>
<p> copyright enforcement dominated by Microsoft and other large US companies) </p>
<p> [...] die Frage freie gegen proprietäre Software, er brauchte nur ein besseres [...] </p>
<p> Textsatzsystem um sein </p>
<p> [...] </p>
<p> echtes Ziel zu erreichen - ein Buch über Softwareentwicklung zu schreiben - und sah keinen Grund als er fertig war, sein System nicht der Welt zu veröffentlichen. </p>
<p> to complete his real goal-a book on computer programming-and saw no reason not to release his system to the world when done. </p>
<p> [...] Rechenzentrums-Infrastruktur zu proprietärer Software ersetzt werden muss, [...] </p>
<p> um eine bessere Nutzung der </p>
<p> [...] </p>
<p> vorhandenen Hardware durch Virtualisierung zu machen oder das Gebäude Raum mit Umwelt-oder wirtschaftlichen Gründen zu verringern. </p>
<p> [...] Abkündigungen von Hardware oder proprietärer Software keinen Einfluss auf die [...] </p>
<p> Produktlebensdauer der Maschine </p>
<p> [...] </p>
<p> haben, da die bei der initialen Produktentwicklung bestehenden Bedingungen jederzeit reproduziert werden können. </p>
<p> Programm Umsetzung wird an einer Studie über den aktuellen Stand der Entwicklung und Nutzung von Open-Source-Software Ukrainisch, eine objektive Analyse der Inlandsmarkt zugrunde gelegt werden, um Dienste unter Verwendung der </p>
<p> [...] </p>
<p> Open-Source-Software in den Staat, öffentliche, private und einzelner Sektoren im </p>
<p> Program implementation will be based on a study of the current state of development and use of Ukrainian software open source, an objective analysis of the domestic market to provide services </p>
<p> [...] </p>
<p> using the software open source in the state, public, private and individual </p>
<p> [...] sectors in comparison with proprietary software. </p>
<p> Es soll vielmehr eine weitere Brücke zwischen Macintosh-Plattform und Freier Software </p>
<p> [...] </p>
<p> schaffen, da dem Anwender schnell klar </p>
<p> [...] werden wird, daß es für seinen Rechner mehr Freie als proprietäre Software gibt. </p>
<p> Wilfried Grommen, Regional Director für Technologie, speziell kam zu Treffen mit staatlichen Stellen und informiert Auffassung des Unternehmens, dass die Regierung nicht haben, sich ausschließlich auf </p>
<p> [...] </p>
<p> Open-Source-Software verlassen, sondern wählen Sie die günstigere für den Haushalt </p>
<p> [...] Modelle, wie offen und proprietärer Software. </p>
<p> windowsnews.ru </p>
<p> windowsnews.ru </p>
<p> Wilfried Grommen, regional director for technology, specially came to meet with state bodies, and informed view of the corporation that the government did not have to rely </p>
<p> solely on open source software, but choose the more advantageous for the budget </p>
<p> [...] models, how open and proprietary software. </p>
<p> windowsnews.ru </p>
<p> windowsnews.ru </p>
<p> Weit davon entfernt sich proprietärer Software entgegenzustellen, erlaubte die X Lizenz ganz bewusst [...] </p>
<p> proprietäre Erweiterungen </p>
<p> [...] </p>
<p> auf seinem freien Kern - alle Beteiligten des Konsortiums wollten die Möglichkeit die übliche X Version zu verbessern und sich dadurch von den anderen Mitgliedern abzuheben. </p>
<p> GPL-abgedeckter Bibliotheken haben werden, </p>
<p> [...] ohne Parallelen bei proprietärer Software, die nützliche Module [...] </p>
<p> bieten und als Bauteile in </p>
<p> [...] </p>
<p> neuer freier Software dienen und sich zu einem großen Vorteil für zukünftige Entwicklung freier Software summieren. </p>
<p> in new free software, and adding up to a major advantage for further free software development. </p>
<p> Jeder Entscheider in einem Unternehmen oder einer Behörde, der plant, von kommerzieller Software auf Betriebssysteme mit offenem Quellcode umzusteigen, sollte sich jedoch der Tatsache </p>
<p> [...] </p>
<p> bewusst sein, dass damit Kosten verbunden und Hürden zu überwinden sein können, </p>
<p> Als Reaktion auf die Entscheidung der Stadt München, ihre Pläne zur Umstellung auf Freie Software erneut zu prüfen, weist die Free </p>
<p> [...] </p>
<p> Software Foundation Europe darauf hin, dass Softwarepatente ein </p>
<p> [...] Problem für Freie Software und für proprietäre Software gleichermaßen sind. </p>
<p> Vielen Dank für Ihre Bewertung! Sie helfen uns sehr dabei, die Qualität des Dienstes zu verbessern. </p>
<p> Der Punkt ist, dass das anfängliche Unrecht proprietärer Software häufig zu weiteren Unrecht führt: schädlichen Funktionalitäten. </p>
<p> Macht verdirbt. Entwickler eines proprietären Programms sind dazu verleitet das Programm so zu entwerfen, dessen Nutzer schlecht zu behandeln (Software, dessen Funktionsweise Nutzer bösartig bzw. schlecht behandelt, wird als Schadsoftware bzw. engl. Malware bezeichnet). Natürlich machen dies Entwickler gewöhnlich nicht aus Bosheit, sondern vielmehr um auf Kosten der Nutzer Profit zu schlagen. Das macht es nicht weniger böse oder gar legitimer. </p>
<p> Dieser Versuchung nachzugeben ist immer häufiger geworden. Heutzutage ist es gängige Praxis. Moderne proprietäre Software ist typischerweise ein Weg um übers Ohr gehauen zu werden … </p>
<p> In den Dokumenten sind ungefähr 300 Fälle böswilliger Funktionalitäten aufgelistet, es gibt aber sicherlich Tausende, über die nichts bekannt sind (Stand 2017-04). </p>
<p> Art der Schadsoftware </p>
<p> Digitale Rechte-Minderung (DRM) oder Digitale Beschränkungsverwaltung ‑ Funktionen, entwickelt um zu beschränken, was Nutzer mit den Daten auf ihren Rechnern tun können. </p>
<p> Gefängnisse ‑ Systeme, die Anwendungsprogrammen Zensur auferlegen. </p>
<p> Tyrannen ‑ Systeme, die jedes nicht vom Hersteller „autorisierte“ Betriebssystem zurückweisen. </p>
<p> Nutzer proprietärer Software sind solchen Formen der schlechten Behandlung schutzlos ausgeliefert. Um diese zu unterbinden, ist auf Freie ‑ Freiheit respektierende ‑ Software zu beharren. Da Freie Software durch deren Nutzer kontrolliert wird, haben sie eine ziemlich gute Verteidigung gegen heimtückische Softwarefunktionen. </p>
<p> Die Free Software Foundation (FSF) ist eine gemeinnützige Organisation mit einer weltweiten Mission die Freiheit von Rechnernutzern zu fördern. Wir verteidigen die Rechte aller Softwarenutzer. </p>
<p> Bei der Übersetzung dieses Werkes wurde mit größter Sorgfalt vorgegangen. Trotzdem können Fehler nicht völlig ausgeschlossen werden. Sollten Sie Fehler bemerken oder Vorschläge, Kommentare oder Fragen zu diesem Dokument haben, wenden Sie sich bitte an unser Übersetzungsteam <web-translators@gnu.org>. </p>
<p> Weitere Informationen über die Koordinierung und Einsendung von Übersetzungen unserer Internetpräsenz finden Sie in der LIESMICH für Übersetzungen. </p>
<p> Bitte beachten Sie: Bei diesem Dokument handelt es sich um eine Übersetzung aus dem Englischen. Die in diesem Dokument enthaltenen Informationen basieren auf der englischsprachigen Artikelfassung. Die Richtigkeit dieser Informationen in Zusammenhang mit der deutschsprachigen Artikelfassung wurde im Rahmen dieser Übersetzung nicht geprüft. Diese Informationen werden ohne Gewähr für Richtigkeit bzw. Funktionalität zur Verfügung gestellt und auch keine Gewähr bezüglich der Vollständigkeit oder Richtigkeit der Übersetzung übernommen. </p>
<p> Languages </p>
<p> In other projects </p>
<p> Proprietäre Software - Proprietary software </p>
<p> Aus Wikipedia, der freien Enzyklopädie </p>
<p> Software veröffentlicht unter einer Lizenz, Rechte an geistigem Eigentum zu beschränken </p>
<p> Proprietäre Software , auch bekannt als Closed-Source - Software ist nicht frei Computer - Software , für die die Software des Verleger oder eine andere Person behält geistiges Eigentum Rechte-Regel Urheberrecht des Quellcodes , aber manchmal Patentrechte. </p>
<p> Erteilt Rechte für nur nicht-kommerzielle Nutzung. Kann mit Copyleft kombiniert werden. </p>
<p> Traditionelle Verwendung von urheberrechtlich ; keine Rechte gewährt werden müssen </p>
<p> Ursprung </p>
<p> Bis in die späten 1960er Jahre Computer-große und teure Mainframe - Computern , Maschinen in speziell klimatisierten Computerräume-wurden vermietet an Kunden und nicht verkauft . Service und Software zur Verfügung , wurden in der Regel von den Herstellern ohne gesonderte Berechnung geliefert bis 1969 - Computer in der Regel den Quellcode für die installierte Software der Kunden zur Verfügung gestellt Anbieter. Kunden , die Software entwickelt oft es anderen unentgeltlich zur Verfügung gestellt. Closed - Source bedeutet , Computerprogramme , deren Quellcode nicht veröffentlicht wird. Es ist nur von der Organisation bearbeitet werden , die es entwickelt. </p>
<p> Bill Gates ‚‚ Offener Brief an Bastler ‘1976 verschrien Computer Bastler‘ grassierenden Urheberrechtsverletzung von Software, insbesondere Microsofts Altair BASIC - Interpreter, und erinnerte seine Zuhörer , dass ihr Diebstahl von Programmierern seine Fähigkeit zu produzieren hochwertige Software behindert. </p>
<p> Ab Februar 1983 IBM nahm einen „ Objekt-Code -nur“ Modell für eine wachsende Liste ihrer Software und gestoppt Quellcode versenden. </p>
<p> Im Jahr 1983 wurde binäre Software urheber in den Vereinigten Staaten als auch von der Apple - gegen Franklin Gesetz Entscheidung, vor der nur Codequelle war urheber. Zusätzlich kann die wachsende Verfügbarkeit von Millionen von Computern auf der gleichen Mikroprozessor - Architektur zum ersten Mal eines nicht fragmentierte und groß genug Markt für binäre verteilen Software erstellt. </p>
<p> Ein Software - Anbieter umreißt die besonderen Nutzungsbedingungen in einem Endbenutzer - Lizenzvertrag (EULA). Der Benutzer kann zu diesem Vertrag schriftlich zustimmen, interaktiv am Bildschirm ( Clickwrap ) oder durch die Box, um die Software zu öffnen ( Wrap - Lizenzierung schrumpfen ). Lizenzverträge sind in der Regel nicht verhandelbar . Software - Patente gewähren Exklusivrechte an Algorithmen, Software - Funktionen oder andere patentierbare Gegenstände , mit einer Deckungssumme von Stand variiert. Vendors manchmal Patentrechte für den Benutzer in der Lizenzvereinbarung gewähren. Der Quellcode für ein Stück Software wird routinemäßig als gehandhabt Geschäftsgeheimnis . Gelegentlich Software mit weniger Beschränkungen für die Lizenzierung oder Source-Code - Zugang zur Verfügung gestellt; solche Software ist bekannt als „ frei “ oder „ Open-Source “ . </p>
<p> Einschränkungen </p>
<p> Da Lizenzvereinbarungen außer Kraft nicht gegen geltendes Urheberrecht oder das Vertragsrecht , Bestimmungen in Konflikt mit geltendem Recht nicht durchsetzbar ist . Einige Software ist speziell lizenziert und nicht verkauft werden , um zu vermeiden , Einschränkungen des Urheberrechts wie die Erstverkaufspreise Lehre . </p>
<p> Exklusive Rechte </p>
<p> Der Besitzer von proprietärer Software übt bestimmte Exklusivrechte an der Software. Der Eigentümer kann Verwendung, Inspektion des Quellcodes, Modifikation des Quellcodes und Umverteilung beschränken. </p>
<p> Verwenden der Software </p>
<p> Anbieter begrenzen normalerweise die Anzahl der Computer , auf denen Software verwendet werden kann, und der Benutzer verbieten , die Software auf zusätzlichen Computern installieren. Eingeschränkte Nutzung wird manchmal durch eine technische Maßnahme, wie erzwungene Produktaktivierung , ein Produktschlüssel oder Seriennummer, ein Hardwareschlüssel oder Kopierschutz . </p>
<p> Anbieter können auch Versionen verteilen, die bestimmten Funktionen oder Versionen entfernen, die nur bestimmte Arbeitsfelder zu ermöglichen, wie nicht-kommerziellen, Bildungs-, oder nicht-kommerziellen Gebrauch. </p>
<p> Nutzungsbeschränkungen ändern sich je nach Lizenz: </p>
<p> Windows Vista Starter beschränkt maximal drei gleichzeitige Anwendungen ausgeführt werden . </p>
<p> Die Verkaufsversion von Microsoft Office Home and Student 2007 beschränkt sich auf die nicht-kommerzielle Nutzung auf bis zu drei Geräte in einem Haushalt. </p>
<p> Windows XP kann auf einem Computer installiert werden, und begrenzt die Anzahl der Netzwerk - File - Sharing - Verbindungen bis 10. Die Home Edition deaktiviert in Windows XP Professional vorhanden verfügt. </p>
<p> Traditionell Adobe sind Lizenzen für einen Benutzer beschränkt, sondern ermöglichen es dem Benutzer , eine zweite Kopie auf einem Heimcomputer oder Laptop zu installieren. Das ist nicht mehr wahr mit dem Umschalten auf Creative Cloud. </p>
<p> iWork '09 , Produktivitäts - Suite von Apple ist in einem Fünf-User - Family Pack zur Verfügung, für den Einsatz auf bis zu fünf Computern in einem Haushalt. </p>
<p> Inspektion und Modifikation des Quellcodes </p>
<p> Vendors typischerweise proprietäre Software in verteilen kompilierten Form, in der Regel die Maschinensprache verstanden von der Computer - Zentraleinheit . Sie behalten typischerweise den Quellcode oder menschenlesbare Version der Software, in einer schriftlichen höheren Programmiersprache . Dieses Schema wird oft als Closed Source. </p>
<p> Während der meist proprietäre Software ohne den Quellcode verteilt ist, zu verbreiten einige Anbieter den Quellcode oder sonst machen es den Kunden zur Verfügung. Zum Beispiel können Benutzer , die eine Lizenz für die Internet - Forum - Software erworben haben vBulletin können die Quelle für ihre eigene Website ändern , aber es nicht weitergeben können. Dies gilt für viele Web - Anwendungen, die in Form von Quellcode sein müssen , wenn sie von einem Webserver ausgeführt werden. Der Quellcode wird durch einen überdachte non-disclosure agreement oder eine Lizenz , die zum Beispiel Studie und Modifikation, aber nicht Umverteilung erlaubt. Der textbasierte E - Mail - Client Pine und bestimmte Implementierungen von Secure Shell ist mit proprietären Lizenzen vertrieben, die den Quellcode zur Verfügung zu stellen. </p>
<p> Einige Regierungen befürchten , dass proprietäre Software können Mängel oder böswillige Funktionen , die vertrauliche Informationen gefährden würde. Im Jahr 2003 Microsoft etablierte Regierungen Government Security Program (GSP) zu ermöglichen , Quellcode und Microsoft Sicherheitsdokumentation zu sehen, von denen die chinesische Regierung ein früher Teilnehmer war. Das Programm ist Teil von Microsofts breiteren Shared - Source - Initiative , die für einige Produkte Zugriff auf den Quellcode zur Verfügung stellt. Die Referenz Source License (Ms-RSL) und Limited - Public License (Ms-LPL) sind proprietäre Softwarelizenzen , wo der Quellcode zur Verfügung gestellt . </p>
<p> Die Regierungen haben auch selbst der Zugabe solcher Malware - Software beschuldigt worden. Nach Unterlagen , veröffentlicht von Edward Snowden , die NSA hat verdeckte Partnerschaften mit Software - Unternehmen verwendet , um kommerzielle Verschlüsselungssoftware ausnutzbar Abhören zu machen, oder zum Einfügen von Backdoors . </p>
<p> Redistribution </p>
<p> Proprietäre Software-Anbieter können die Benutzer verbieten, die Software mit anderen zu teilen. Eine weitere einzigartige Lizenz ist für eine andere Partei erforderlich, um die Software zu nutzen. </p>
<p> Im Fall von proprietärer Software mit Quellcode zur Verfügung, kann der Verkäufer der Kunden auch von der Verteilung von den Modifikationen am Quellcode verbieten. </p>
<p> Shareware ist Closed-Source - Software , deren Eigentümer ermutigt Umverteilung ohne Kosten, aber die der Benutzer manchmal muss zahlt nach einer Probezeit zu verwenden. Die Gebühr erlaubt in der Regel die Verwendung durch einen einzelnen Benutzer oder Computer. In einigen Fällen sind die Software - Funktionen während oder nach der Probezeit beschränkt, eine Praxis , die manchmal als cripple . </p>
<p> Die Interoperabilität mit Software und Hardware </p>
<p> Proprietäre Dateiformate und Protokolle </p>
<p> Proprietäre Software speichert oft einen Teil seiner Daten in Dateiformaten , die mit anderer Software nicht kompatibel sind, und auch kommunizieren über können Protokolle , die nicht kompatibel sind. Solche Formate und Protokolle können als beschränkt werden Geschäftsgeheimnisse oder unterliegen Patente . </p>
<p> proprietärer APIs </p>
<p> Ein proprietäre Anwendungsprogramm - Schnittstelle (API) ist eine Software - Bibliothek - Schnittstelle „spezifisch für ein Gerät oder, wahrscheinlicher zu einer Anzahl von Vorrichtungen innerhalb einer Produktpalette des jeweiligen Herstellers.“ Die Motivation für eine proprietäre API kann Vendor Lock-in oder weil Standard - APIs nicht die Gerätefunktionalität unterstützen. </p>
<p> Die Europäische Kommission in ihrem 24. März 2004 Entscheidung über Microsofts Geschäftspraktiken, zitiert, in Absatz 463, Microsoft General Manager für C ++ Entwicklung Aaron Contorer wie in einem 21. Februar erklärt : 1997 internes Microsoft - Memo erstellt Bill Gates : </p>
<p> Das Windows - API ist so breit, so tief und so funktional , dass die meisten ISVs verrückt wären , es nicht zu benutzen. Und es wird so eingebettet tief in den Quellcode von vielen Windows - Anwendungen , die es gibt eine riesige Schalt Kosten stattdessen ein anderes Betriebssystem zu verwenden. </p>
<p> Frühe Versionen des iPhone SDK wurden durch einen überdachten non-disclosure agreement . Die Vereinbarung verbot unabhängige Entwickler von dem Inhalt der Schnittstellen zu diskutieren. Apple hat die NDA im Oktober 2008 eingestellt. </p>
<p> Vendor Lock-in </p>
<p> Jede Abhängigkeit von den zukünftigen Versionen und Upgrades für ein proprietäres Softwarepaket erstellen kann Vendor Lock-in , verschanzt eine Monopolstellung. </p>
<p> Software auf bestimmte Hardwarekonfigurationen </p>
<p> Proprietäre Software kann auch haben Lizenzbedingungen, die die Nutzung dieser Software auf einen bestimmten Satz von Hardware begrenzen. Apple hat ein solches Lizenzierungsmodell für macOS , ein Betriebssystem , das auf Apple - Hardware beschränkt ist, sowohl durch die Lizenzierung und verschiedene Design - Entscheidungen. Dieses Lizenzmodell wird von der bestätigt worden Vereinigten Staaten Court of Appeals für den Ninth Circuit . </p>
<p> Aufgeben von Privat an Privat </p>
<p> Proprietäre Software , die nicht mehr in Verkehr gebracht wird, unterstützt oder von seinem Besitzer verkauft wird als Abandonware , die digitale Form von verwaisten Werken . Wenn der Inhaber einer Softwarepaket sollte aufhören zu existieren, oder entscheiden sich für ein proprietäres Software - Paket einzustellen oder Begrenzung der Produktion oder Unterstützung, Empfänger und Nutzer der Verpackung können keinen Anspruch haben , wenn Probleme mit der Software zu finden sind. Proprietors kann zu verbessern scheitern und wegen der Geschäftsprobleme unterstützen Software. Unterstützung für ältere oder bestehende Versionen eines Softwarepakets können Anwender beendet werden , um zu erzwingen , für neuere Versionen (Upgrade und Pay Veralterung ). Manchmal ein anderer Hersteller oder eine Gemeinschaft Software kann sich Unterstützung für die Software oder die Benutzer entweder konkurrierenden Systeme mit mehr Unterstützung Lebenszyklen oder migrieren können FOSS -basierte Systeme. </p>
<p> Preise und Ökonomie </p>
<p> Proprietäre Software ist nicht gleichbedeutend mit kommerzieller Software , obwohl die beiden Begriffe manchmal synonym in Artikeln über freie Software verwendet werden. Proprietäre Software kann kostenlos oder gegen eine Gebühr verteilt werden, und freie Software kann kostenlos oder gegen eine Gebühr verteilt werden. Der Unterschied besteht darin , dass , ob oder nicht proprietäre Software verteilt werden kann, und die Gebühr , was wäre, liegt im Ermessen des Inhabers. Mit freier Software, jeder, der eine Kopie hat , kann entscheiden , ob und wie viel, für eine Kopie oder ähnliche Dienstleistungen in Rechnung stellen . </p>
<p> Proprietäre Software , die für keine Kosten kommt heißt Freeware . </p>
<p> Die Befürworter der kommerziellen proprietärer Software argumentieren , dass Anwender erfordern für Software als ein Produkt zunimmt zahlen Finanzierung oder zur Verfügung stehenden Zeit für die Forschung und Entwicklung von Software. Zum Beispiel Microsoft sagt , dass pro Druckkosten die Rentabilität der Software - Entwicklung zu maximieren. </p>
<p> Proprietäre Software schafft im Allgemeinen mehr kommerzielle Aktivität über freie Software, vor allem im Hinblick auf den Markteinkommen. Proprietäre Software wird oft mit einer Lizenz verkauft, die dem Endbenutzer Recht gibt, die Software zu nutzen. </p>
<p> Software - Distributionen gilt als proprietäre kann in der Tat enthalten eine „gemischte Quelle“ -Modell einschließlich sowohl kostenlose als auch unfreie Software in der gleichen Verteilung. Die meisten , wenn nicht all so genannte proprietäre UNIX - Distributionen sind gemischte Source - Software, die Bündelung Open-Source - Komponenten wie BIND , Sendmail , X - Window - System , DHCP und andere zusammen mit einer rein proprietären Kernel und Systemsoftware. </p>
<p> Einige freien Software - Pakete sind auch gleichzeitig unter proprietären Bedingungen. Beispiele hierfür sind MySQL , Sendmail und ssh. Der ursprüngliche Copyright - Inhaber für eine Arbeit von freier Software, auch Copyleft kann freie Software verwendet Dual-Lizenzierung selbst oder andere erlauben proprietäre Versionen neu zu verteilen. Non-Copyleft freie Software (dh Software , die unter einer permissiven lizenzfreien Software vertrieben oder zum Public Domain freigegeben) erlaubt es jedem , proprietäre Umverteilungen zu machen. Freie Software , die auf proprietäre Software abhängt , wird als „gefangene“ von der Free Software Foundation. Dazu gehört Software nur für Microsoft Windows geschrieben, oder Software , die auf nur laufen konnte Java , bevor es zu freier Software wurde. </p>
<p> In Indien, eineinhalb Millionen Laptops wurden mit vorinstalliertem Bildschirmschoner politischen Minister Mulayam Singh Yadav . Der Autor von Software für diese Laptops entwickelt enthalten eine arglistige Eigenschaft das wäre „ Absturz “ das Gerät , wenn der Besitzer des Laptops zu ändern versucht, zu entfernen oder diese Funktion ändern. </p>
<p> Rede von Richard Stallman zum Thema Freie Software </p>
<p> Your browser does not support the video tag. </p>
<p> Transkription </p>
<p> Ich bin Richard Stallman. Vor 25 Jahren gründete ich die Freie-Software-Bewegung [1983]. Freie Software ist Software, die die Freiheit des Nutzers und die soziale Solidarität seiner Gemeinschaft respektiert. Unfreie Programme sind proprietäre Software, d.h. sie nehmen Nutzern die Freiheit, hält sie voneinander getrennt und hilflos. </p>
<p> Getrennt, weil die gemeinsame Nutzung des Programms verboten ist und hilflos, weil Nutzer keinen Quellcode des Programms haben. D.h. sie können es nicht ändern, sie können nicht herausfinden, was das Programm wirklich ausführt, und es kann sehr schlimme Dinge ausführen. </p>
<p> Freie Software bedeutet, dass der Nutzer 4 wesentliche Freiheiten hat: </p>
<p> Freiheit 0 ist die Freiheit, das Programm für jeden Zweck auszuführen. </p>
<p> Freiheit 1 ist die Freiheit, den Quellcode des Programms zu untersuchen und zu ändern, um es Ihren Bedarf anzupassen. </p>
<p> Freiheit 2 ist die Freiheit, Ihrem Nächsten zu helfen; d. h. exakte Vervielfältigungen des Programms anzufertigen und zu verbreiten, wann immer Sie wollen. </p>
<p> Und Freiheit 3 ist die Freiheit, zu Ihrer Gemeinschaft beizutragen; d.h. die Freiheit, Vervielfältigungen Ihrer modifizierten Programmversionen anzufertigen und zu verbreiten. </p>
<p> Mit diesen vier Freiheiten ist ein Programm Freie Software, weil das soziale System für Nutzung und Verbreitung ein ethisches System ist, das jedermanns Freiheit und die der Gemeinschaft von Nutzern respektiert. </p>
<p> Software muss frei sein, weil wir alle Freiheit verdienen, wir verdienen es alle, an einer freien Gemeinschaft teilnehmen zu dürfen. </p>
<p> Deshalb sollten Schulen nur Freie Software lehren. Es gibt vier Gründe, warum das so ist. </p>
<p> Der oberflächlichste Grund ist, Geld zu sparen. Schulen haben nicht genug Geld, also sollten sie ihr Geld nicht verschwenden, um für die Erlaubnis zu bezahlen, proprietäre Software nutzen zu dürfen. Dies ist ein offensichtlicher Grund, aber einige proprietäre Softwareunternehmen beseitigen diesen gewöhnlich mit gespendeten Kopien ihrer proprietären Programme für die Schule, kostenlos oder zu einem geringen Preis. Der Grund, warum sie das machen ist, Schüler abhängig zu machen. Es ist ein hinterhältiger Plan. Es ist ein Plan, Schulen als Instrument zu benutzen, um eine dauerhafte Abhängigkeit von Schülern durchzusetzen. </p>
<p> Wenn eine Schule lehrt ein proprietäres Programm zu verwenden, werden SchülerInnen abhängig sein, und nachdem sie Absolventen sind, werden sie für das Programm bezahlen müssen, um es weiter nutzen zu können. Sie werden wahrscheinlich für ein Unternehmen arbeiten, das Kopien des Programms nicht gratis erhält. Daher benutzen Entwickler proprietärer Software Schulen, um eine dauerhafte Abhängigkeit der gesamten Gesellschaft durchzusetzen. Schulen müssen sich weigern, sich an einem solch hinterhältigen Plan zu beteiligen, da Schulen eine soziale Aufgabe erfüllen, die nächste Generation zu erziehen, gute BürgerInnen einer leistungsfähigen, starken, unabhängigen, zusammenarbeitenden und freien Gesellschaft zu sein. Dies lässt sich nur durch die Lehre freier Software erreichen. Schulen müssen proprietäre Software beseitigen, löschen und Freie Software installieren. </p>
<p> Aber es gibt einen tieferen Grund: gute Programmierer auszubilden, denn um gute Programmierkenntnisse zu erlernen, müssen SchülerInnen nicht nur viel Quellode lesen und schreiben. Um zu erlernen, guten Quellode für große Programme zu schreiben, müssen SchülerInnen kleine Änderungen in den Quellcode der großen Programme schreiben. Das ist alles nur mit Freie Software möglich. </p>
<p> Nur Freie Software ermöglicht Bildung in der Informationstechnologie. </p>
<p> Doch es gibt einen noch tieferen Grund: Gute Staatsbürgerschaft lehren, weil Schulen den Auftrag haben, nicht nur Tatsachen und technische Fertigkeiten zu vermitteln, sondern vor allem den Geist des guten Willens, die Gewohnheit, anderen zu helfen. Deshalb sollte jede Klasse diese Regel haben: Wenn SchülerInnen ein Programm in die Klasse mitbringen, können sie es nicht für sich behalten, sie müssen es mit dem Rest der Klasse teilen. </p>
<p> Die Schule sollte üben, was sie predigt, sie sollte nur Freie Software im Unterricht vorstellen. </p>
<p> Alle Schulen sollten auf Freie Software migrieren und ausschließlich Freie Software lehren, denn jede Schule sollte partizipieren, eine Gesellschaft in Richtung Freiheit und sozialer Solidarität zu führen. </p>
<p> Deutsch </p>
<p> Halte dich über Veranstaltungen, Reden und Konferenzen mit Richard Stallman und den FSF-Mitarbeitern auf dem Laufenden und wähle außerdem "Free Software" -Veranstaltungen aus aller Welt. </p>
<p> "Wenn Firmen sich zusammenschließen um unsere Freiheit zu beschneiden, müssen wir uns zusammenzuschließen und Kämpfen" -- FSF Präsident Richard Stallman </p>
<p> PlayOgg! — erstellt von Matt Lee — zuletzt verändert: 13.03.2018 14:52 </p>
<p> Proprietäre Softwarefirmen wie Microsoft, Apple und Adobe treiben vermehrt Video- und Audioformate voran, die den Zugriff auf die Daten und Softwareentwickler in deren Arbeit einschränken. Es gibt aber eine Alternative, die auf allen Computern ohne Einschränkungen abgespielt werden kann - Ogg. Ogg bietet professionelle Multimedia-Formate. Ogg wird ausgiebig von Freie-Software-Projekten, Künstlern und einer zunehmenden Anzahl von Musik- und Videovertreibern genutzt. </p>
<p> 5 gute Gründe, das i Phone der 3. Generation da zu lassen, wo es ist: beim Händler. (frei übersetzt)... </p>
<p> Debians Entscheidung Mono automatisch mit Gnome zu installieren, um Tomboy entgegenzukommen, welches ein in C# geschriebenes Programm ist, führt die Gemeinschaft in eine riskante Richtung. </p>
<p> Einer der Hauptvorteile freier Software ist, dass die Community die Benutzer vor Schadsoftware schützt. Jetzt ist Ubuntu GNU/Linux zu einem Gegenbeispiel geworden. Was sollen wir tun? </p>
<p> Send your feedback on our translations and new translations of pages to campaigns@fsf.org. </p>
<p> Mir macht das Programmieren wirklich Spaß, aber wenn ich damit kein Geld mehr verdienen kann, nur weil irgendwelche Idioten alles für Lau haben wollen, dann können sie mich auch mal kreuzweise. </p>
<p> Wieder mal das übliche missverständniss, was die FSF mit "freier Software" meint. Es geht nicht darum, dass Software kostenlos sein soll. </p>
<p> Leider ist, weder im deutschen noch im englischen, die bedeutung des Wortes "frei" eindeutig. Zu der von der FSF/GNU gemeinten bedeutung gibt es den schönen Spruch "Free as in Freedome, not as in Beer". </p>
<p> Es geht um Freiheit, nicht um den Preis. </p>
<p> Ich zitiere mal von der Webseite von GNU: </p>
<p> Freie Software bedeutet, dass Softwarenutzer Freiheit haben (es geht also nicht um den Preis). Wir entwickelten das GNU-Betriebssystem, damit Nutzer Freiheit bei ihrer Datenverarbeitung haben können. </p>
<p> Konkret bedeutet Freie Software, Nutzer besitzen vier wesentliche Freiheiten: (0) das Programm ausführen, (1) den Quellcode untersuchen und abändern, (2) exakte Kopien redistribuieren und (3) modifizierte Varianten distribuieren. </p>
<p> Software unterscheidet sich von materiellen Objekten - wie Stühlen, Brötchen oder Benzin - darin, dass sie viel leichter geändert oder vervielfältigt werden kann. Diese Möglichkeiten machen Software so einzigartig. Wir glauben, dass Softwarenutzer in der Lage sein sollten davon Gebrauch zu machen, nicht nur deren Entwickler. </p>
<p> Proprietäre Software </p>
<p> Proprietäre Software bezeichnet eine Software, die das Recht und die Möglichkeiten der Wieder- und Weiterverwendung sowie Änderung und Anpassung durch Nutzer und Dritte stark einschränkt. Ursprünglich war dies durch eine Abhängigkeit der Software von der Hardware bedingt. Die Praxis, Quelltexte von Computerprogrammen unter Verschluss und damit im engeren Sinne „proprietär“ zu halten, kam mit der zunehmenden öffentlichen Verbreitung von Computern mit gleichen Mikroprozessoren in den frühen 1980er Jahren auf.[1] Es gibt zahlreiche Mechanismen, die eine Software „proprietär“ machen und halten können: durch Softwarepatente, das Urheberrecht, Lizenzbedingungen (EULAs), das Aufbauen der Software auf herstellerspezifischen, nicht veröffentlichten Standards und die Behandlung des Quelltextes als Betriebsgeheimnis (englisch closed source).[2] </p>
<p> Inhaltsverzeichnis </p>
<p> Bis in die späten 1960er waren Computer riesige und teure Mainframe-Maschinen, die in speziellen klimatisierten Räumen betrieben und eher vermietet als verkauft wurden.[3][4] Service und die Software waren Zubehör und wurden bis 1969 ohne Extrakosten gestellt. Der Quelltext von Software war üblicherweise verfügbar. Nutzer, die Software entwickelten, machten diesen ebenfalls verfügbar; es existierte eine Kultur des offenen Software- und Quelltextaustausches (ähnlich der Hacker-Kultur).[5] 1969 leitete jedoch IBM, unter dem Druck einer schwebenden Antitrust-Ermittlung, einen Wandel der Entwicklung ein: IBM entbündelte Software und Hardware und machte damit Software zum eigenständigen Produkt.[6][7][8] Ein zweiter Grund war das Auftauchen von Computern auf Basis standardisierter Mikroprozessoren, welche erstmals einen weltweiten Markt für binär vertriebene Software schaffte; davor gab es einen fragmentierten inkompatiblen Computer-Markt, der am ehesten über den Quelltext zu adressieren war.[1] </p>
<p> In den späten 1970er und den frühen 1980er Jahren begannen die meisten Computerhersteller, den Quelltext unter Verschluss zu halten.[9][10] Damit sollte verhindert werden, dass Mitbewerber die Software auf ihren Systemen einsetzen konnten. Diese Proprietarisierung der Software wurde schnell zur Norm. Später beschrieb Brewster Kahle den Wandel der rechtlichen Charakteristik von Software als Konsequenz des erlassenen U.S. Copyright Act of 1976.[11] Robert Landley nennt die Gesetzesänderung des amerikanischen Copyright, welche ab 1983 auch binären Programmen Urheberschutz zusprach, zuvor hatte diesen nur der Programm-Quelltext.[1][12] Die bis dahin blühende „Hackerkultur“ begann nun zu zerfallen. In diesem Umfeld wurde das Unternehmen Microsoft zum erfolgreichen Pionier des proprietären und kommerziellen Entwicklungs- und Vertriebsmodells für Software ohne Hardware, siehe auch Bill Gates „Open Letter to Hobbyists“ von 1976.[13] </p>
<p> Beginnend im Februar 1983 führte IBM das "object-code-only"-Modell, also die Vermarktung einer Software ohne Quelltext, für eine wachsende Liste ihrer Software ein.[9][10] </p>
<p> 1980 war Richard Stallman mit anderen Programmierern am MIT angestellt und stellte fest, dass ihnen erstmals der Zugriff auf den Quelltext eines neuinstallierten Drucker-Gerätetreibers, für den Xerox 9700 Drucker verweigert wurde. Stallman hatte bei bisherigen Druckern (XGP, Xerographic Printer) die Treiber so modifiziert, dass der Nutzer elektronisch benachrichtigt wurde, wenn der Druckauftrag abgeschlossen oder steckengeblieben war. Dass es nun nicht mehr möglich war, diese nützlichen Fähigkeiten zu integrieren, überzeugte Stallman von der Notwendigkeit, Software nicht-proprietär zu halten. Dies führte letztendlich zu der Gründung der Free Software Foundation (FSF) und deren andauernden Kampagnen gegen proprietäre Software.[14] </p>
<p> Die Free Software Foundation (FSF) und Richard Stallman, die den Begriff „proprietäre Software“ geprägt haben und aktiv verbreiten, meinen damit Software, deren Entwickler oder Vertreiber den Endbenutzern explizit Freiheitsrechte entziehen, die laut der FSF hinsichtlich Software immer gegeben sein sollten: </p>
<p> die Freiheit, die Software weiterzugeben (z. B. entzogen durch Kopierverbot via EULA (End User License Agreement; Vertragsregelungen) oder Geheimhaltungsvereinbarungen) </p>
<p> die Freiheit, die Software für beliebige Zwecke auszuführen (z. B. entzogen durch Nutzungseinschränkungen via EULA) </p>
<p> Deswegen bezeichnet die FSF proprietäre Software auch als Unfreie Software, im Sinne fehlender Freiheiten[15][16] oder freiheitsentziehender Software. Die FSF verwendet bewusst nicht den Begriff „Closed Source Software“, der ihr nicht weit genug geht, um das Problem zu beschreiben. </p>
<p> Laut FSF handelt es sich bei proprietärer Software potentiell auch um Schadsoftware, weil diese aufgrund des fehlenden Quelltexts nicht analysierbar ist und ein Nutzer deshalb blind dem Anbieter vertrauen muss.[17] Die FSF pflegt eine Übersicht von proprietären Software-Lizenzen (wie auch nicht-proprietären).[18] </p>
<p> Die FSF sieht als Gegenkonzept zu proprietärer Software die „Freiheitsgewährende Software“ (sogenannte Freie Software), Software also, die einem Nutzer mit Empfang des Computerprogramms die von der FSF als essentiell angesehenen Freiheiten gewährt. </p>
<p> Obwohl Kommerzialität häufig mit Proprietarität vergesellschaftet ist, lehnt die FSF die These ab, dass Programmierer berechtigt seien, Nutzern Freiheiten zu entziehen, um Gewinn zu erzielen.[19] Allerdings ist die FSF nicht gegen kommerzielle Software, sondern unterstützt durchwegs den Verkauf von Software, wenn diese ihren Empfängern Freiheiten gewährt.[20] Obwohl auch die FSF zugibt, dass Kommerzialisierung von Freier Software schwierig ist,[21] sieht sie den Aspekt Kommerzialität als unabhängig von Proprietarität.[22] </p>
<p> Die FSF definiert proprietäre Software derart, dass diese nicht beliebig durch Dritte angepasst und weiterverwendet werden darf,[23] und sieht einen klaren dualistischen Gegensatz zu freier Software unter „freien Lizenzen“.[24] Eine entscheidende Eigenschaft von „freier Software“ laut Definition der FSF ist, dass auch deren „freie Lizenzen“ jedoch nicht „alles-ist-erlaubt“ bedeuten. Beispielsweise kann nicht-proprietäre, freie Software für Dritte die Freiheit ausgenommen haben, eine Software proprietär zu machen (z. B. durch Lizenzänderungen) oder mit proprietärer Software zusammen verwendet zu werden. Jedoch sind auch andere Anforderungen und Einschränkungen üblich; z. B. Copyleft-Lizenzen; die von der FSF empfohlene GPL erzielt dieses Ergebnis. </p>
<p> Die Gruppe der freizügigen Lizenzen, ebenfalls als nicht-proprietär angesehene freie Softwarelizenzen, erlauben dagegen die Relizenzierung, fordern aber die Nennung der Ursprungsautoren. Nur Software die aus dem Urheberschutz in die Public-Domain aktiv entlassen wurde oder durch Auslaufen von Schutzfristen herausgefallen ist (gemeinfreie Software), ist ohne jegliche Einschränkungen und hat somit jegliche Proprietarität verloren und erlaubt „Alles“. </p>
<p> Andere, wie beispielsweise die Open Source Initiative, sehen als Kerneigenschaft der proprietären Software die Nichtverfügbarkeit des Quelltextes, das Gegenmodell wäre dann quelloffene Software (englisch Open Source). </p>
<p> Für Software deren Quelltext verfügbar ist und die für einige, aber nicht beliebige Anwendungsfälle die Weiterverwendung erlaubt (halbfreie Software, manchmal auch „Source available“ oder „Shared Source“), gibt es kontroverse Diskussionen über deren Einordnung. Beispiel für eine solche Software wäre Photoshop 1.0.1, dessen Quelltext 2013 unter einer Lizenz veröffentlicht wurde, welche zwar eine beliebige private Verwendung erlaubt, jedoch eine kommerzielle Weiterverwendung und Weiterverbreitung ausschließt.[25][26] Ein weiteres Beispiel ist das Computerspiel Allegiance dessen Quelltext unter einer nicht-kommerziellen Shared-Source-Lizenz im Jahre 2004 freigegeben wurde und nun von der Spielgemeinde selbst weiterentwickelt wird.[27] </p>
<p> Auch sollte proprietäre Software nicht mit kommerzieller Software gleichgesetzt werden. Kommerzielle Software, die an Kunden verkauft oder lizenziert wird, kann sowohl proprietäre als auch freie Software (meist kombiniert mit Dienstleistungsangeboten)[28] sein; der Unterschied ist, dass bei proprietärer Software Weiterverkauf und Anpassung eingeschränkt oder verboten sein können. Kostenlose proprietäre Software wird als Freeware bezeichnet. </p>
<p> Das Eigenschaftswort „proprietär“ kann auch auf Protokolle (wie z. B. für Netzwerke), APIs und Dateiformate angewandt werden.[29] </p>
<p> ↑ a b c Rob Landley: 23-05-2009. landley.net. 23. Mai 2009. Abgerufen am 2. Dezember 2015: „So if open source used to be the norm back in the 1960's and 70's, how did this _change_? Where did proprietary software come from, and when, and how? How did Richard Stallman’s little utopia at the MIT AI lab crumble and force him out into the wilderness to try to rebuild it? Two things changed in the early 80's: the exponentially growing installed base of microcomputer hardware reached critical mass around 1980, and a legal decision altered copyright law to cover binaries in 1983. Increasing volume: The microprocessor creates millions of identical computers“ </p>
<p> ↑ S. Donovan: Patent, copyright and trade secret protection for software. Potentials, IEEE, 2002, doi:10.1109/45.310923. </p>
<p> ↑ Paul E. Ceruzzi: A history of modern computing. MIT Press, 2003, ISBN 0-262-53203-4, S. 128 (Abgerufen am 12. November 2010): „Although IBM agreed to sell its machines as part of a Consent Decree effective January 1956, leasing continued to be its preferred way of doing business“ </p>
<p> ↑ History of Leasing. leasegenie.com. Archiviert vom Original am 11. April 2008. Abgerufen am 12. November 2010: „In the 1960s, IBM and Xerox recognized that substantial sums could be made from the financing of their equipment. The leasing of computer and office equipment that occurred then was a significant contribution to leasings growth, since many companies were exposed to equipment leasing for the first time when they leased such equipment“ </p>
<p> ↑ Chronological History of IBM – 1960s. IBM. Abgerufen am 12. November 2010: „Rather than offer hardware, services and software exclusively in packages, marketers "unbundled" the components and offered them for sale individually. Unbundling gave birth to the multibillion-dollar software and services industries, of which IBM is today a world leader“ </p>
<p> ↑ Pugh, Emerson W. Origins of Software Bundling. IEEE Annals of the History of Computing, Vol. 24, No. 1 (Jan–Mar 2002): pp. 57–58. </p>
<p> ↑ Hamilton, Thomas W., IBM's unbundling decision: Consequences for users and the industry, Programming Sciences Corporation, 1969. </p>
<p> ↑ Williams, Sam: Free as in Freedom: Richard Stallman’s Crusade for Free Software. O’Reilly Media, 2002, ISBN 0-596-00287-4. Chapter 1. Available under the GFDL in both the initial O’Reilly edition and the updated FAIFzilla edition. Beide abgerufen am 27. Oktober 2006. </p>
<p> Der Text ist unter der Lizenz „Creative Commons Attribution/Share Alike“ verfügbar; Informationen zu den Urhebern und zum Lizenzstatus eingebundener Mediendateien (etwa Bilder oder Videos) können im Regelfall durch Anklicken dieser abgerufen werden. Möglicherweise unterliegen die Inhalte jeweils zusätzlichen Bedingungen. Durch die Nutzung dieser Website erklären Sie sich mit den Nutzungsbedingungen und der Datenschutzrichtlinie einverstanden. Wikipedia® ist eine eingetragene Marke der Wikimedia Foundation Inc. </p>
<p> Was ist freie Software? </p>
<p> Freie-Software-Definition </p>
<p> Diese Freie-Software-Definition soll verdeutlichen, welche Kriterien ein einzelnes Softwareprogramm erfüllen muss, um als Freie Software betrachtet zu werden. Von Zeit zu Zeit wird diese Definition überarbeitet, um dies klarzustellen oder Fragen zu subtilen Problemen zu lösen. Weitere Informationen zu gemachten Änderungen finden Sie unter Historie. </p>
<p> Freie Software ist Software, die die Freiheit und Gemeinschaft der Nutzer respektiert. Ganz allgemein gesagt, haben Nutzer die Freiheit, Software auszuführen, zu kopieren, zu verbreiten, zu untersuchen, zu ändern und zu verbessern. Mit diesen Freiheiten kontrollieren die Nutzer (sowohl einzeln als auch im kollektiv) das Programm und was es für sie ausführt. </p>
<p> Können Nutzer nicht das Programm kontrollieren, kontrolliert das Programm die Nutzer. Der Entwickler kontrolliert das Programm und dadurch die Nutzer. Dieses unfreie oder proprietäre Programm ist deshalb ein Instrument ungerechter Macht. </p>
<p> Freie Software ist eine Frage der Freiheit, nicht des Preises. Um das Konzept von frei zu verstehen, sollte an Redefreiheit gedacht werden ‑ nicht an Freibier. </p>
<p> Ein Programm ist freie Software, wenn Nutzer des Programms die vier wesentlichen Freiheiten haben: </p>
<p> Die Freiheit, das Programm für jeden Zweck auszuführen (Freiheit 0). </p>
<p> Die Freiheit, die Funktionsweise des Programms zu untersuchen und eigenen Bedürfnissen der Datenverarbeitung anzupassen (Freiheit 1). Der Zugang zum Quellcode ist dafür Voraussetzung. </p>
<p> Die Freiheit, das Programm weiterzuverbreiten und damit seinen Mitmenschen zu helfen (Freiheit 2). </p>
<p> Die Freiheit, das Programm zu verbessern und diese Verbesserungen der Öffentlichkeit freizugeben, damit die gesamte Gemeinschaft davon profitiert (Freiheit 3). Der Zugang zum Quellcode ist dafür Voraussetzung. </p>
<p> Ein Programm ist freie Software, wenn Nutzer alle diese Freiheiten haben. Somit sollte man die Freiheit haben, Kopien an jeden und überall weiterzugeben (entweder mit oder ohne Modifikationen, gratis oder gegen eine Gebühr für den Vertrieb). Frei sein bedeutet, diese Dinge (unter anderem) vorzunehmen, ohne zu fragen oder für die Berechtigung zahlen zu müssen. </p>
<p> Außerdem sollte man auch die Freiheit haben, Modifikationen vorzunehmen und privat zum Arbeiten oder zum Vergnüngen, ohne auch nur deren Existenz zu erwähnen. Veröffentlicht man die Änderungen, sollte nicht erforderlich sein, irgendjemand im Besonderen oder auf irgendeine bestimmte Weise zu benachrichtigen. </p>
<p> Die Freiheit, das Programm auszuführen, bedeutet für irgendeine Person oder Organisation die Freiheit zu haben, es auf irgendeinem Rechnersystem für irgendeine allgemeine Aufgabe und Zweck zu verwenden, ohne darüber mit dem Entwickler oder irgendeinem Unternehmen kommunizieren zu müssen. In dieser Freiheit ist der Benutzer das Ziel, nicht der Entwickler! Ihnen als Nutzer steht es frei, das Programm für eigene Zwecke auszuführen und, wenn an jemand anderes weitergegeben, steht dieser Person dann frei, es für eigene Zwecke auszuführen, aber Sie sind nicht berechtigt, ihr eigene Zwecke aufzuerlegen. </p>
<p> Die Freiheit, Kopien weiterzuverbreiten, muss binäre oder ausführbare Formen des Programms als auch Quellcode für modifizierte und unmodifizierte Versionen beinhalten (die Verbreitung von Programmen in ausführbarer Form ist für bequem installierbare freie Betriebssysteme notwendig). Es ist in Ordnung, wenn es für bestimmte Anwendungen keine Möglichkeit gibt, eine Binärdatei oder ausführbare Form zu produzieren (da einige Programmiersprachen diese Funktion nicht unterstützen), aber Sie müssen die Freiheit haben, solche Formen an Dritte weiterzugeben, sollten Sie eine Möglichkeit finden oder entwickeln, sie herzustellen. </p>
<p> Damit Freiheiten 1 und 3 (die Freiheiten, Änderungen zu machen und geänderte Versionen zu veröffentlichen) sinnvoll sind, müssen Nutzer Zugang zum Quellcode des Programms haben. Daher ist die Zugänglichkeit des Quellcodes eine notwendige Bedingung für Freie Software. Verschleierter „Quellcode“ ist nicht wirklich Quellcode und zählt nicht als solcher. </p>
<p> Freiheit 1 umfasst die Freiheit, die eigene geänderte Version anstelle des Originals zu verwenden. Kommt das Programm in einem Produkt zum Einsatz, in dem die modifizierte Version eines Dritten, nicht jedoch die eigene ‑ eine als Tivoisierung oder Sperrung ‚Lockdown‘ oder (in der perversen Terminologie von denen, welche dieses Verfahren anwenden wollen) als Secure Boot bekannte Praxis ‑ ausgeführt wird, wird Freiheit 1 eher zu einer theoretischen Fiktion anstelle einer praktischen Freiheit. Das reicht nicht aus! Mit anderen Worten sind diese Binärdateien keine freie Software, selbst wenn der Quellcode, von dem kompiliert wurde, frei ist. </p>
<p> Die Zusammenführung der verfügbaren freien Unterroutinen und -module ist eine wichtige Möglichkeit, ein Programm zu modifizieren. Wenn die Programmlizenz eines entsprechend lizenzierten vorhandenen Moduls die Zusammenführung untersagt ‑ beispielsweise wenn es verlangt, dass man der Copyrightinhaber des hinzuzufügenden Quellcodes sein muss ‑ dann ist die Lizenz zu restriktiv, um sich als frei zu qualifizieren. </p>
<p> Freiheit 3 umfasst die Freiheit, eigene modifizierte Versionen als Freie Software freizugeben. Eine freie Lizenz kann auch andere Möglichkeiten der Freigabe zulassen; mit anderen Worten muss es sich nicht um eine Copyleft-Lizenz handeln. Allerdings qualifiziert sich eine Lizenz, die es verlangt modifizierte Versionen unfrei zu machen, nicht als frei. </p>
<p> Damit diese Freiheiten wirklich gelten, müssen diese dauerhaft und unwiderruflich sein ‑ solange man nichts Unrechtes anstellt. Sofern Softwareentwickler die Macht haben, die Lizenz zu ihren Bedingungen zu widerrufen oder rückwirkend Beschränkungen hinzuzufügen, ohne dafür Anlass gegeben zu haben, ist die Software unfrei. </p>
<p> Allerdings sind bestimmte Richtlinien über die Art und Weise des Vertriebs freier Software akzeptabel, sofern sie nicht den wesentlichen Freiheiten widersprechen. Copyleft ist beispielsweise (sehr vereinfacht) eine Richtlinie, die verhindert, dass bei einer Weiterverbreitung des Programms keine Beschränkungen hinzugefügt werden können, um Anderen wesentliche Freiheiten zu versagen. Diese Richtlinie widerspricht nicht den wesentlichen Freiheiten ‑ vielmehr schützt sie sie. </p>
<p> Freie Software bedeutet nicht unkommerziell. Ein freies Programm muss für die kommerzielle Nutzung, die kommerzielle Entwicklung und den kommerziellen Vertrieb verfügbar sein. Die kommerzielle Entwicklung von freier Software ist nicht mehr unüblich; solche freie kommerzielle Software ist sehr wichtig. Möglicherweise haben Sie Geld für Kopien von freier Software ausgegeben oder Kopien unentgeltlich erhalten. Aber egal wie Sie die Kopien bekamen, Sie haben immer die Freiheit, die Software zu kopieren und zu ändern, sogar Kopien zu verkaufen. </p>
<p> Ob eine Änderung eine Verbesserung darstellt, ist eine subjektive Angelegenheit. Wenn Ihr Recht, ein Programm zu modifizieren, im Wesentlichen auf Änderungen beschränkt wird, die jemand anderes als Verbesserung betrachtet, ist das Program nicht frei. </p>
<p> Richtlinien, wie man eine modifizierte Version verpacken kann, sind allerdings akzeptabel, sofern sie nicht substantiell die Freiheit einschränken, modifizierte Versionen freizugeben oder modifizierte Versionen privat herzustellen und zu nutzen. Somit ist es akzeptabel, wenn die Lizenz verlangt, den Namen der modifizierten Version zu ändern, ein Logo zu entfernen oder eigene Modifikationen als eigene zu identifizieren. Solange diese Bedingungen nicht so aufwändig sind, dass sie die Freigabe der Änderungen effektiv behindern, sind sie zulässig; Sie nehmen schon andere Programmänderungen vor, ein paar mehr sollten keine Probleme machen. </p>
<p> Ein besonderes Problem ergibt sich, wenn eine Lizenz die Änderung des Namens erfordert, durch den das Programm aus anderen Programmen aufgerufen wird. Das behindert wirksam die Freigabe Ihrer geänderten Version, um das Original, wenn durch jene andere Programmen aufgerufen, zu ersetzen. Diese Art von Anforderung ist nur akzeptabel, wenn es eine geeignete Alias-Funktion gibt, die erlaubt, den Namen des Originalprogramms als Decknamen für die modifizierte Version anzugeben. </p>
<p> Richtlinien wie "wenn Sie Ihre Version auf diese Weise zur Verfügung stellen, müssen Sie sie auch auf diese Weise zur Verfügung stellen", können unter derselben Bedingung ebenfalls akzeptabel sein. Solch eine akzeptable Richtlinie wäre beispielsweise, dem früheren Entwickler auf dessen Bitte eine Kopie der modifizierten und verbreiteten Version zukommen lassen zu müssen (Hinweis: Eine solche Richtlinie lässt Ihnen immer noch die Wahl, ob Sie Ihre Version überhaupt verbreiten möchten). Ebenfalls sind Richtlinien akzeptabel, die die Freigabe des Quellcodes für öffentlich einsetzbare Programmversionen an Nutzer verlangen. </p>
<p> Das GNU-Projekt benutzt Copyleft, um diese Freiheiten rechtlich für jeden zu schützen. Aber es gibt auch Freie Software ohne Copyleft. Wir glauben, es gibt wichtige Gründe, warum es besser ist Copyleft zu verwenden. Aber auch wenn ein Programm freie Software ohne Copyleft ist, ist sie grundsätzlich immer noch ethisch vertretbar (siehe auch Kategorien freier und unfreier Software, wie sich Freie Software, Software mit Copyleft und andere Softwarekategorien aufeinander beziehen). </p>
<p> Mitunter können staatliche Ausfuhrkontrollbestimmungen und Handelssanktionen die Freiheit einschränken, Programmkopien international zu verbreiten. Softwareentwickler haben nicht die Macht, diese Einschränkungen zu beseitigen oder außer Kraft zu setzen, aber sie können und müssen sich widersetzen, sie als Nutzungsbedingungen des Programms aufzuerlegen. Dadurch betreffen die Beschränkungen keine Aktivitäten und Menschen außerhalb der Rechtsordnungen dieser Regierungen. Daher dürfen freie Softwarelizenzen keinen Gehorsam gegenüber allen Ausfuhrbestimmungen als Bedingung für eine der wesentlichen Freiheiten verlangen. </p>
<p> Die meisten freien Softwarelizenzen basieren auf Copyright, und es gibt Beschränkungen auf die Arten von Anforderungen, die durch Copyright auferlegt werden können. Wenn eine copyrightbasierte Lizenz Freiheit auf die oben beschriebene Weise respektiert, ist es unwahrscheinlich, eine andere Art von Problem zu haben, das nicht voraussehbar war (obwohl dies gelegentlich vorkommt). Einige freie Softwarelizenzen basieren allerdings auf Verträgen, und Verträge können eine viel größere Bandbreite möglicher Beschränkungen auferlegen. Das bedeutet viele Möglichkeiten, wie solch eine Lizenz inakzeptabel restriktiv und unfrei sein könnte. </p>
<p> Es ist unmöglich, alle auftretenden Möglichkeiten aufzuführen. Wenn eine vertragsbasierte Lizenz den Nutzer auf eine ungewöhnliche Weise beschränkt, dass auf dem Urheberrecht basierende Lizenzen nicht können und welches hier als nicht legitim erwähnt wird, werden wir darüber nachdenken müssen und wahrscheinlich zu dem Schluss kommen, dass sie unfrei ist. </p>
<p> Spricht man über Freie Software, empfiehlt es sich Begriffe wie verschenken oder kostenlos zu vermeiden, weil diese Begriffe implizieren, es würde um den Preis gehen, nicht um Freiheit. Einige gebräuchliche Begriffe wie Piraterie stellen Meinungen dar, von denen wir hoffen, dass Sie diese nicht unterstützen. Siehe für weitere Informationen auch Verwirrende Worte und Ausdrücke, die vermieden werden sollten sowie Übersetzungen des Begriffs Freie Software in verschiedenen Sprachen. </p>
<p> Abschließend noch der Hinweis, dass die in dieser Freie-Software-Definition angegeben Kriterien sorgfältige Überlegungen bei ihrer Interpretation erfordern. Um zu entscheiden, ob sich eine bestimmte Softwarelizenz als freie Softwarelizenz qualifiziert, beurteilen wir basierend auf diesen Kriterien, ob ihr Geist sowie der genaue Wortlaut passt. Enthält eine Lizenz übertriebene Beschränkungen, wird sie abgelehnt, auch wenn wir das Problem in diesen Kriterien nicht erwarteten. Manchmal spricht eine Lizenzanforderung ein Punkt an, der umfangreiche Überlegungen erfordert, einschließlich Diskussionen mit einem Rechtsanwalt, bevor entschieden werden kann, ob diese Anforderung annehmbar ist. Wird ein Punkt zum Abschluss gebracht, werden diese Kriterien aktualisiert, um verständlicher zu machen, warum sich bestimmte Lizenzen qualifizieren oder nicht. </p>
<p> Wenn Sie daran denken eine neue Lizenz zu schreiben, wenden Sie sich bitte zuerst an die Free Software Foundation. Die starke Zunahme verschiedener freier Softwarelizenzen bedeutet erhöhte Arbeit für Nutzer, um die Lizenzen zu verstehen; wir können Ihnen helfen, eine vorhandene freie Softwarelizenz zu finden, die Ihre Bedürfnisse erfüllt. </p>
<p> Ist das nicht möglich, wenn Sie wirklich eine neue Lizenz benötigen, können Sie mit unserer Hilfe sicherstellen, dass die Lizenz wirklich eine freie Softwarelizenz ist und verschiedene praktische Probleme vermeiden. </p>
<p> Jenseits von Software </p>
<p> Software-Handbücher müssen frei sein, aus den gleichen Gründen, warum Software frei sein muss und weil Handbücher in der Tat Bestandteil der Software sind. </p>
<p> Die gleichen Argumente sind auch für andere Arten von Werken mit praktischem Nutzen sinnvoll ‑ also Werke, die nützliches Wissen verkörpern wie etwa pädagogische Werke und Nachschlagewerke. Wikipedia ist das wohl bekannteste Beispiel. </p>
<p> Jegliches Werk kann frei sein; und die Freie-Software-Definition hat sich als Definition freier kultureller Werke erwiesen, die auf jede Art von Werken anwendbar sind. </p>
<p> Open Source, offener Quellcode? </p>
<p> Eine andere Gruppe begann den Begriff „Open Source“ zu verwenden, um etwas ähnliches (aber nicht identisches) wie freie Software zu meinen. Die Freie-Software-Gemeinschaft bevorzugt den Begriff Freie Software, denn sobald man gehört hat, dass er sich auf die Freiheit statt den Preis bezieht, ruft er den Geist der Freiheit aus. Das Wort offen bezieht sich niemals auf die Freiheit. </p>
<p> Historie </p>
<p> Von Zeit zu Zeit wird die Freie-Software-Definition überarbeitet. Diese Modifikationen sowie Verweise veranschaulichen genau, was geändert wurde. </p>
<p> Version 1.111: Klarstellung von 1.77, dass alle rückwirkenden Beschränkungen inakzeptabel sind. Die Copyrighthalter können jederzeit zusätzliche Berechtigung für die Nutzung des Werks dadurch einräumen, das Werk auf eine andere Weise parallel freizugeben. </p>
<p> Version 1.105: Spiegelt in einer kurzen Darstellung den Punkt von Freiheit 1 wider (bereits in Version 1.80 erwähnt), dass Sie tatsächlich Ihre modifizierte Version in Ihrer Datenverarbeitung nutzen dürfen. </p>
<p> Version 1.92: Klarstellung, dass sich verschleierter Code nicht als Quellcode qualifiziert. </p>
<p> Version 1.90: Klarstellung, dass Freiheit 3 ​​das Recht, Kopien eigener modifizierter oder verbesserter Version zu verbreiten, bedeutet und nicht, sich an einem Entwicklungsprojekt eines Dritten zu beteiligen. </p>
<p> Version 1.89: Freiheit 3 gewährt das Recht, modifizierte Versionen als Freie Software freizugeben. </p>
<p> Version 1.80: Freiheit 1 muss nicht nur theoretisch, sondern praktisch sein; d. h. keine Tivoisierung. </p>
<p> Version 1.77: Klarstellung, dass alle nachträglichen Lizenzänderungen inakzeptabel sind, auch wenn nicht als vollständiger Ersatz beschrieben. </p>
<p> Version 1.74: Vier Klarstellungen von Punkten, die nicht explizit genug oder an einigen Stellen angegebenen sind, aber nicht überall reflektiert werden: </p>
<p> "Verbesserungen" bedeutet nicht, dass die Lizenz substantiell einschränken kann, welche Arten von modifizierten Versionen freigegeben werden können. Freiheit 3 enthält die Verbreitung modifizierter Versionen, nicht nur deren Änderungen. </p>
<p> Das Recht, vorhandene Module zusammenzufügen, bezieht sich auf entsprechend lizenzierte Module. </p>
<p> Ausdrücklich die Schlussfolgerung des Punktes über Exportkontrolle. </p>
<p> Einführung einer Lizenzänderung führt zur Aufhebung der alten Lizenz. </p>
<p> Version 1.57: Kapitel Jenseits von Software hinzugefügt. </p>
<p> Version 1.46: Klärung des für die Freiheit bedeutsamen Ziels, das Programm für jeden Zweck auszuführen. </p>
<p> Version 1.41: Klarstellung zum Wortlaut vertraglich geregelter Lizenzen. </p>
<p> Version 1.40: Erklärung, dass eine freie Lizenz erlauben muss, andere verfügbare Freie Software, um eigene Änderungen zu erstellen. </p>
<p> Version 1.39: Es ist akzeptabel, wenn eine Lizenz erfordert, den Quellcode für von Ihnen für die öffentliche Nutzung bereitgestellte Softwareversionen zur Verfügung zu stellen. </p>
<p> Version 1.31: Es ist akzeptabel, wenn eine Lizenz erfordert, sich als Autor von Modifikationen zu identifizieren sowie weitere geringfügige Klarstellungen. </p>
<p> Version 1.23: Potenzielle Probleme im Zusammenhang mit vertragsbasierten Lizenzen. </p>
<p> Version 1.16: Erklärung, warum der Vertrieb von Binärdateien wichtig ist. </p>
<p> Version 1.11: Eine freie Lizenz kann verlangen, eine Kopie der von Ihnen verbreiteten Versionen an den Autor zu senden. </p>
<p> Die unveränderte Wiedergabe und Verteilung des gesamten Artikels in beliebiger Form ist ohne Lizenzgebühren gestattet, sofern dieser Hinweis erhalten bleibt. </p>
<p> SlideShare verwendet Cookies, um die Funktionalität und Leistungsfähigkeit der Webseite zu verbessern und Ihnen relevante Werbung bereitzustellen. Wenn Sie diese Webseite weiter besuchen, erklären Sie sich mit der Verwendung von Cookies auf dieser Seite einverstanden. Lesen Sie bitte unsere Nutzervereinbarung und die Datenschutzrichtlinie. </p>
<p> SlideShare verwendet Cookies, um die Funktionalität und Leistungsfähigkeit der Webseite zu verbessern und Ihnen relevante Werbung bereitzustellen. Wenn Sie diese Webseite weiter besuchen, erklären Sie sich mit der Verwendung von Cookies auf dieser Seite einverstanden. Lesen Sie bitte unsere unsere Datenschutzrichtlinie und die Nutzervereinbarung. </p>
<p> Open Source Software und Recht </p>
<p> Open Source Software und Recht Kurzvortrag von Timo Schutt am 1. Oktober 2012 beim 11. Webmontag.Talk in Mannheim </p>
<p> Clipboard teilen </p>
<p> Öffentliche Clipboards, die diese Folie enthalten </p>
<p> Anderes Clipboard auswählen </p>
<p> Sie haben diese Folie bereits ins Clipboard „“ geclippt. </p>
<p> Clipboard erstellen </p>
<p> Sie haben Ihre erste Folie geclippt! </p>
<p> Durch Clippen können Sie wichtige Folien sammeln, die Sie später noch einmal ansehen möchten. Passen Sie den Namen des Clipboards an, um Ihre Clips zu speichern. </p>
Wissenstransfer
  …
  leicht
  gemacht!
  

  

  

VERGLEICHSSTUDIE
  

  

  

  

  

  

Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  

  

  

  

  

Open
  Source
  Lizenzmodelle
  

  

  

  

  

  

  

  

  

  

  

  

  

  

Quelle:
  Fotolia.de
  

  
+++
  

  

  

www.research-­‐it.eu
  

+++
  

www.research-­‐it.eu
  

+++
  

www.research-­‐it.eu
  

+++
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  

  

  

  

  
Autoren
  

Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

Dr.
   rer.
   pol.
   Marco
   Becker
   ist
   Direktor
   des
   Instituts
   für
   angewandte
  
Forschung
  und
  Dozent
  für
  Allgemeine
  Betriebswirtschaftslehre
  mit
  den
  
Schwerpunkten
  
Rechnungswesen
  
und
  
Controlling
  
sowie
  
Wirtschaftsinformatik
   an
   der
   NBS
   –
   Northern
   Business
   School
   in
  
Hamburg.
  
Der
   gelernte
   Bankkaufmann
   (Deutsche
   Bank
   AG)
   hat
   nach
   seiner
  
Ausbildung
  ein
  Studium
  der
  Betriebswirtschaftslehre
  an
  der
  Universität
  
Hamburg
   absolviert
   und
   Anfang
   des
   Jahres
   2005
   als
   Diplom-­‐Kaufmann
  
abgeschlossen.
   Im
   Anschluss
   war
   er
   sowohl
   als
   Führungskraft
   in
  
mittelständischen
   Unternehmen
   als
   auch
   als
   angestellter
   und
  
selbstständiger
   Unternehmensberater
   tätig.
   Anfang
   des
   Jahres
   2012
  
wurde
  er
  von
  der
  Fakultät
  für
  Wirtschaftswissenschaften
  der
  Universität
  
Hamburg
   promoviert,
   nachdem
   er
   nebenberuflich
   seine
  
Dissertationsschrift
  erstellt
  hatte.
  

  

Neben
  seinen
  wissenschaftlichen
  Veröffentlichungen
  ist
  er
  Autor
  
mehrerer
  Fachbücher
  und
  anerkannter
  Experte
  auf
  den
  Gebieten
  
Prozess-­‐
  und
  Qualitätsmanagement
  sowie
  betrieblicher
  Datenschutz.
  

  
Franka
   Burmester
   arbeitet
   seit
   dem
   Jahr
   2007
   bei
   der
   Kreissparkasse
  
Herzogtum
   Lauenburg.
   Dort
   wurde
   sie
   nach
   erfolgreicher
   Beendigung
  
ihrer
  Ausbildung
  zur
  Bankkauffrau
  erst
  als
  Serviceberaterin
  und
  dann
  als
  
als
   Privatkundenberaterin
   übernommen.
   Vor
   Kurzem
   wurde
   Ihr
   die
  
Aufgabe
   der
   Geschäftsstellenleiterin
   der
   Service
   Filiale
   Aumühle
  
übertragen.
  
In
   den
   letzten
   Jahren
   hat
   sich
   Frau
   Burmester
   nebenberuflich
   zum
  
Fachwirt
  für
  Anlage-­‐
  und
  Finanzberatung
  an
  der
  Sparkassenakademie
  in
  
Kiel
   weitergebildet
   und
   schließt
   gerade
   ein
   Studium
   der
  
Betriebswirtschaftslehre
   ab,
   das
   sie
   ebenfalls
   nebenberuflich
   an
   der
  
NBS-­‐
  Northern
  Business
  School
  in
  Hamburg
  absolviert
  hat.
  

  

  

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

  

www.research-­‐it.eu
  

1/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
Julia
   Schmidt-­‐Löffler
   hat
   nach
   Ihrem
   Abitur
   eine
   zweijährige
   Ausbildung
  
zur
   Bankkauffrau
   bei
   der
   Hamburger
   Sparkasse
   AG
   absolviert
   und
   im
  
Jahr
   2009
   erfolgreich
   abgeschlossen.
   Nachdem
   sie
   ins
   Angestellten-­‐
verhältnis
   übernommen
   wurde,
   hat
   Frau
   Schmidt-­‐Löffler
   im
   Jahr
   2010
  
den
   Basislehrgang
   an
   der
   Hanseatischen
   Sparkassenakademie
  
bestanden.
  
  

  

Zur
  Zeit
  absolviert
  Frau
  Schmidt-­‐Löffler
  nebenberuflich
  ein
  Studium
  der
  
Betriebswirtschaftslehre
   an
   der
   NBS
   –
   Northern
   Business
   School
   in
  
Hamburg.
  

  

  

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

  

www.research-­‐it.eu
  

2/25
  

Wissenstransfer
  –
  leicht
  gemacht!
  

  

  

  

  

  
Institut
  für
  angewandte
  Forschung
  

  

Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

Dr.
  Marco
  Becker
  
  
Hunnenbarg
  17a
  –
  25421
  Pinneberg
  

  
Tel.:04101
  /
  854
  860
  30
  
  
Fax:04101
  /
  854
  860
  39
  
  

  
E-­‐Mail:
  info@research-­‐it.eu
  

  

Sprechen
  sie
  uns
  einfach
  an!
  
Das
   Institut
   für
   angewandte
   Forschung
   wurde
   gegründet
   um
   den
   Wissenstransfer
   aus
   der
  
Forschung
   in
   die
   Praxis
   zu
   beschleunigen.
   Anfang
   des
   Jahres
   2014
   hat
   das
   Institut
   für
   angewandte
  
Forschung
   seine
   Arbeit
   aufgenommen
   und
   beschäftigt
   sich
   zur
   Zeit
   neben
   eigenen
  
Forschungsprojekten
  im
  Themenbereich
  der
  praktischen
  Wirtschaftsinformatik
  in
  erster
  Linie
  mit
  
Auftragsforschung
  und
  der
  Erbringung
  von
  Beratungsdienstleistungen.
  

  

  

  

  

  

  

  

  

Haftungsausschluss:
  
Die
  Erläuterungen
  sowie
  Interpretationen
  geben
  die
  persönliche
  Einschätzung
  und
  Erfahrung
  der
  
Autoren
   wieder.
   Trotz
   sorgfältiger
   Recherche
   und
   Prüfung
   der
   Inhalte
   kann
   eine
   Garantie
   oder
  
Haftung
  für
  die
  Richtigkeit
  oder
  Vollständigkeit
  nicht
  übernommen
  werden.
  
Copyright:
  
Dieses
   Werk
   ist
   einschließlich
   aller
   seiner
   Teile
   urheberrechtlich
   geschützt.
   Jede
   Verwertung
  
außerhalb
  der
  Grenzen
  des
  Urheberrechtsgesetzes
  ist
  ohne
  schriftliche
  Zustimmung
  des
  Instituts
  
für
  angewandte
  Forschung
  unzulässig
  und
  strafbar.
  Weder
  das
  Werk
  noch
  seine
  Teile
  dürfen
  ohne
  
vorherige
   schriftliche
   Einwilligung
   des
   Instituts
   für
   angewandte
   Forschung
   vervielfältigt
   oder
  
öffentlich
   gemacht
   werden.
   Dieses
   gilt
   auch
   bei
   einer
   entsprechenden
   Nutzung
   für
  
Schulungszwecke.
  
Hinweis:
  
Soweit
   Personen-­‐
   und
   Funktionsbezeichnungen
   nicht
   ausdrücklich
   in
   der
   weiblichen
   und
  
männlichen
   Form
   genannt
   werden,
   gelten
   die
   sprachlichen
   Bezeichnungen
   in
   der
   männlichen
  
Form
  sinngemäß
  auch
  in
  der
  weiblichen
  Form.
  

  

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

  

www.research-­‐it.eu
  

3/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  

  

  

  

  
Zusammenfassung
  

Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

Bereits
  seit
  dem
  Ende
  der
  1990er
  Jahre
  steigt
  das
  Interesse
  an
  Open
  Source
  Software1
  stetig
  an.
  
Obwohl
  die
  Lizenzen
  ungewöhnliche
  Eigentümerrechte
  umfassen,
  wird
  OSS
  von
  einigen
  Experten
  
sogar
  als
  Überlegen
  gegenüber
  der
  proprietären
  Software
  eingeordnet.2
  Die
  führenden
  Anbieter
  
für
   Betriebssysteme,
   wie
   Microsoft,
   sowie
   für
   Softwareanwendungen,
   wie
   z.
   B.
   Office,
  
beherrschen
   den
   Markt.
   Diese
   denken
   aufgrund
   von
   Wirtschaftlichkeit
   immer
   wieder
   über
   neue
  
Einnahmequellen
   nach,
   so
   dass
   kostengünstige
   Alternativen
   auch
   in
   Form
   von
   OSS
   immer
  
attraktiver
  für
  die
  Bevölkerung
  werden.
  Mittlerweile
  nutzen
  sogar
  der
  Bund
  und
  die
  Länder
  OSS.3
  
In
  dieser
  Vergleichsstudie
  werden
  die
  grundlegenden
  Open
  Source-­‐Lizenzmodelle
  untersucht.
  

  

  
Inhaltsverzeichnis
  
1
   Grundlagen
  ...................................................................................................................................
  5
  
1.1
   Open
  Source
  Software
  .....................................................................................................................
  5
  
1.2
   Open
  Source
  Initiative
  .....................................................................................................................
  8
  
1.3
   Free
  Software
  Foundation
  ...............................................................................................................
  9
  
1.4
   Copyrigt
  (Urheberrecht)
  und
  Copyleft
  ..........................................................................................
  10
  
1.5
   Open
  Source
  Softwarelizenzen
  ......................................................................................................
  11
  
2
   Unterteilung
  von
  Lizenzmodellen
  ...............................................................................................
  13
  
3
   Ausgewählte
  Open
  Source
  Lizenzen
  ...........................................................................................
  14
  
3.1
   GNU
  General
  Public
  License
  ..........................................................................................................
  14
  
3.2
   GNU
  Lesser
  General
  Public
  License
  ...............................................................................................
  16
  
3.3
   Berkeley
  Software
  Distrubution
  License
  .......................................................................................
  17
  
3.4
   Mozilla
  Public
  License
  ....................................................................................................................
  18
  
3.5
   Artistic
  License
  ...............................................................................................................................
  19
  
4
   Fazit
  ............................................................................................................................................
  20
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
1

  
   Wird
  im
  Weiteren
  mit
  OSS
  abgekürzt.
  

  
   Vgl.
  Brügge
  et
  al.
  (2004),
  S.
  1.
  
3

  
   Vgl.
  RECO
  (Regionalcentrum
  für
  Electronic
  Commerce
  Anwendungen
  Osnabrück)
  (Hrgs.)
  (2010),
  S.
  8.
  
2

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

  

www.research-­‐it.eu
  

4/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  

  

  

  

  
1

Grundlagen
  

1.1

Open
  Source
  Software
  

Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

Wann
   genau
   die
   Geschichte
   der
   OSS
   beginnt,
   lässt
   sich
   nicht
   exakt
  
bestimmen.
   Die
   Entwicklung
   von
   UNIX
   im
   Jahr
   1969
   sowie
   der
  
Zusammenschluss
  von
  Richard
  Stallmann
  und
  anderen
  Programmierern
  
zu
   einer
   Gemeinschaft,
   hieraus
   entstand
   später
   das
   GNU-­‐Projekt
   und
  
damit
  auch
  die
  FSF4,
  werden
  als
  wichtige
  Ereignisse
  zur
  Entstehung
  der
  
OSS
   gesehen.5
   Bei
   OSS
   handelt
   es
   sich
   um
   Software,
   deren
   Quellcode
  
offen
   ist
   und
   somit
   von
   jedem
   sowohl
   eingesehen,
   als
   auch
   verändert
  
werden
   kann.6
   Dabei
   kann
   die
   Software
   weiterentwickelt
   und
   an
   die
  
eigenen
   Bedürfnisse
   angepasst
   werden.
   Diese
   eigenen
   Änderungen
  
können
   anschließend
   veröffentlicht
   und
   weitergegeben
   werden.7
   Die
  
grundlegenden
   Freiheiten
   von
   OSS
   sind
   die
   Möglichkeit
   der
   Anpassung
  
an
   die
   eigenen
   Bedürfnisse,
   das
   Studieren
   der
   Arbeitsweise,
   die
  
kostenlose
   Weitergabe
   sowie
   die
   nicht
   an
   einen
   Zweck
   gebundene
  
Nutzung.
   Im
   deutschen
   wird
   häufig
   auch
   der
   Begriff
   Freie
   Software
  
verwendet.8
  

Entstehung
  
  
von
  OSS
  

Die
   FSF
   sieht
   allerdings
   einen
   deutlichen
   Unterschied
   zwischen
   Open
  
Source9
   und
   freier
   Software,
   da
   die
   Namen
   unterschiedliche
  
Vorstellungen
   bei
   den
   Menschen
   hervorrufen.10
   Hierbei
   ist
   allerdings
  
darauf
   zu
   achten,
   dass
   freie
   Software
   nicht
   bedeutet,
   dass
   diese
  
kostenlos
  erhältlich
  ist,
  sondern
  der
  Nutzer
  lediglich
  frei
  ist
  in
  u.
  a.
  der
  
Vervielfältigung
   sowie
   Veränderung
   der
   Software.11
   „Open
   Source
   ist
  

Open
  Source
  
  
vs.
  freie
  Software
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
4

  
   FSF
  steht
  für
  Free
  Software
  Foundation.
  

  
   Vgl.
  Ploch
  et
  al.
  (2002),
  S.
  5f.
  
6

  
   Vgl.
  Gabler
  Wirtschaftslexikon
  (Hrgs.)
  (2014).
  
7

  
   Vgl.
  Groll
  (2012),
  S.
  23,
  366.
  
8

  
   Vgl.
  Groll
  (2012),
  S.
  23.
  
9

  
   Wird
  im
  Weiteren
  mit
  OS
  abgekürzt.
  
10

  
   Vgl.
  Free
  Software
  Foundation
  (Hrgs.)
  (2014
  a).
  
11

  
   Vgl.
  RECO
  (Regionalcentrum
  für
  Electronic
  Commerce
  Anwendungen
  Osnabrück)
  (Hrgs.)
  (2010),
  S.
  9.
  
5

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

  

www.research-­‐it.eu
  

5/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
eine
  Entwicklungsmethodik,
  Freie
  Software
  ist
  eine
  soziale
  Bewegung“12
  
Diese
  wird
  von
  der
  FSF
  gefördert.
  

  

Freeware
  ist
  komplett
  kostenlos
  erhältlich,
  umfasst
  allerdings
  nicht
  das
  
Recht
   Änderungen
   und
   Anpassungen
   an
   der
   Software
   vorzunehmen.13
  
Die
  Veröffentlichung
  erfolgt
  also
  ohne
  Quellcode
  und
  häufig
  auch
  ohne
  
Lizenz.14
  
  

Freeware
  

Shareware
   ist
   ein
   Vermarktungsmodell
   von
   Software,
   wobei
   der
   volle
  
Funktionsumfang
   zumeist
   nur
   über
   einen
   kurzen
   Zeitraum
   vollständig
  
genutzt
   werden
   kann.
   Anschließend
   ist
   es
   notwendig
   Lizenzgebühren
   zu
  
bezahlen.
   Die
   Shareware
   kann
   dabei
   kopiert
   und
   auch
   verbreitet
  
werden.
   Viele
   Softwareentwickler
   nutzen
   diese
   Versionen
   als
  
Testversionen,
  um
  so
  die
  Software
  schnell
  auf
  dem
  Markt
  zu
  verbreiten
  
und
  Aufmerksamkeit
  zu
  erhalten.15
  
  

Shareware
  

Neben
  OSS
  existiert
  noch
  die
  proprietäre
  Software,
  als
  Gegenbegriff
  zur
  
OSS.
  Unter
  proprietärer
  Software
  wird
  herkömmlich
  lizenzierte
  Software
  
verstanden.16
  Der
  Urheber
  kann
  bei
  proprietärer
  Software
  eigenständig
  
entscheiden,
   wer,
   ob
   und
   auf
   welche
   Art
   und
   Weise
   diese
   Software
  
verwerten
   darf.
   Der
   Quelltext
   ist
   bei
   dieser
   Art
   der
   Software
   nicht
   frei
  
zugänglich,
   außerdem
   sind
   Veränderungen
   und
   die
   Weiterverbreitung
  
nicht
   erlaubt.
   Häufig
   wird
   bei
   proprietärer
   Software
   der
   Grund
   für
   das
  
nicht
   Veröffentlichen
   des
   Quellcodes
   bei
   der
   Wahrung
   des
  
Geschäftsgeheimnisses
  genannt.17
  

proprietäre
  
Software
  

  

  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
12

  
   Free
  Software
  Foundation
  (Hrgs.)
  (2014
  a).
  

  
   Vgl.
  Groll
  (2012),
  S.
  23.
  
14

  
   Vgl.
  Grassmuck
  (2004),
  S.
  412.
  
15

  
   Vgl.
   Schaaf
   (2013),
   S.
   22.
   (zitiert
   nach:
   Groll
   (2012),
   S.
   22;
   Hennig
   (2009),
   S.
   8;
   Renner
  et
  al.
   (2005),
   S.
   14-­‐15;
   Saleck
  
(2005),
  S.
  8f).
  
16

  
   Vgl.
  Institut
  für
  Rechtsfragen
  der
  Freien
  und
  Open
  Source
  Software
  (Hrgs.)
  (2014
  a).
  
17

  
   Vgl.
   Schaaf
   (2013),
   S.
   21.
   (zitiert
   nach:
   Ellmer
   (2008),
   S.
   3;
   Groll
   (2012),
   S.
   21;
   Hennig
   (2009),
   S.
   7;
   Jaeger
   /
   Metzger
  
(2011),
  S.
  3;
  Maaß
  (2008),
  S.
  48).
  
13

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

  

www.research-­‐it.eu
  

6/25
  

Wissenstransfer
  –
  leicht
  gemacht!
  

  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
Die
   OSS
   kann
   weiter
   nach
   der
   Stärke
   des
   vorhandenen
   Copylefts
  
unterteilt
  werden.
  
  

  

Übersicht
  

So#ware

Open%Source

Proprietär

Public%Domain

Freie*So#ware
Kommerzielle%
Vollversionen

Copyle6

Strenges%
Copyle6

Nur%Binär

Beschränktes%
Copyle6

Binär%&%Quellcode

Non=Copyle6

Shareware

Freeware

kostenlos%verfügbar

  

Darstellung
  1:
  Einteilung
  Software18
  
Es
   gibt
   zahlreiche
   Vorteile
   von
   OSS,
   die
   sich
   in
   die
   Gruppen
   Freiheit,
  
offene
  Quellen,
  Qualität
  und
  Pragmatismus
  klassifizieren
  lassen:
  
Freiheit
  
•

offene
  Standards
  

•

Herstellerunabhängigkeit
  

•

Open-­‐Source-­‐Philosophie
  

offene
  Quellen
  
•

Flexibilität
  durch
  eigene
  
Anpassungen
  

•

Zugang
  zum
  Quellcode
  

•

Bugs
  selbst
  fixen
  

Qualität
  

Vorteile
  von
  OSS
  

Pragmatismus
  

•

Leistungsfähigkeit
  

•

keine
  Lizenzkosten
  

•

Zuverlässigkeit
  

•

vorheriges
  Testen
  möglich
  

•

Sicherheit
  

•

Support
  durch
  Community
  

•

Intensives
  Know-­‐How
  

Darstellung
  2:
  Vorteile
  von
  OSS19
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
18

  
   Eigene
  Darstellung
  in
  Anlehnung
  an:
  Bundesverwaltungsamt
  (Hrgs.)
  (2014
  a).
  

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

  

www.research-­‐it.eu
  

7/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
Allerdings
   gibt
   es
   auch
   folgende
   Nachteile,
   die
   vorrangig
   von
   den
  
Nutzern
  wahrgenommen
  werden:20
  

  

•
•
•
•
•
•
•

Nachteile
  von
  OSS
  

Fehlende
  Treiberunterstützung
  
Uneinheitliche
  Bedienoberfläche
  
Schwierigkeiten
  bei
  Installation/Konfiguration
  
Geringe
  Bekanntheit
  
Mangelnde
  Kompatibilität
  mit
  anderer
  Software
  
Fehlender
  Support
  
Mangelnde
  Sicherheit
  

Die
   Wertigkeit
   dieser
   Vor-­‐
   und
   Nachteile
   muss
   von
   jedem
   Nutzer
  
individuell
  beurteilt
  werden.
  

Bewertung
  

  
1.2

Open
  Source
  Initiative
  

Die
   OSI21
   wurde
   1998
   als
   Non-­‐Profit-­‐Organisation
   in
   Kalifornien
  
gegründet.
   Der
   Zweck
   dieser
   Initiative
   ist
   die
   Organisation
   und
   die
  
Verbreitung
  frei
  verfügbarer
  Software
  zum
  Nutzen
  der
  Gemeinschaft.22
  
Anhand
  von
  zehn
  Kriterien
  wird
  über
  die
  Lizenzierung
  der
  Software
  als
  
OSS
  entschieden,
  anschließend
  darf
  diese
  Software
  das
  OSI-­‐Logo
  tragen.
  

  

Die
  zehn
  Kriterien
  sind:
  
„1.
   Freie
  Weitergabe
  der
  Software
  ohne
  Lizenzgebühr
  
2.
   Offenlegung
  und
  Weitergabe
  des
  Quellcodes
  
3.
   Zulassung
  von
  Weiterentwicklungen
  und
  Ableitung
  unter
  
derselben
  Lizenz
  wie
  die
  Basissoftware
  
4.
   Garantie
  der
  Unversehrtheit
  des
  originären
  Quellcodes
  
5.
   Keine
  Diskriminierung
  von
  Personen
  oder
  Gruppen
  

  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
19

  
   Vgl.
  Bundesverwaltungsamt
  (Hrsg.)
  (2014a),
  Bundesverwaltungsamt
  (Hrsg.)
  (2014b),
  Dietrich
  (2009
  a).
  

  
   Vgl.
  Bundesverwaltungsamt
  (Hrsg.)
  (2014
  c),
  Dietrich
  (2009
  b),
  Dietrich
  (2009
  c).
  
21

  
   OSI
  steht
  für
  open
  source
  initative.
  
22

  
   Vgl.
  Ronneburg
  (2014).
  
20

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

  

www.research-­‐it.eu
  

8/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  

  

  

  

  

Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

6.
   Keine
  Nutzungseinschränkung
  für
  bestimmte
  
Anwendungsgebiete
  
7.
   Unmittelbare
  Lizenzerteilung
  für
  alle,
  die
  die
  Software
  
erhalten,
  ohne
  zusätzliche
  Lizenz
  
8.
   Produktneutralität
  der
  Lizenz
  
9.
   Keine
  Einschränkung
  anderer
  Software
  
10.
   Neutralität
  der
  Weitergabe
  bezüglich
  
Technologien/Standards“23
  

  
Die
  Definition
  der
  OSI
  umfasst
  somit
  neben
  dem
  freien
  Quellcode
  noch
  
weitere
   Kriterien,
   wie
   z.
   B.
   die
   Nicht-­‐Akzeptanz
   von
   Diskriminierung.24
  
Während
   im
   November
   2003
   insgesamt
   47
   Lizenzen
   mit
   dem
   OSI-­‐Logo
  
ausgezeichnet
  waren25,
  sind
  es
  2014
  bereits
  60
  verschiedene
  Lizenzen.26
  

Verbreitung
  

  
1.3

Free
  Software
  Foundation
  

Die
   FSF
   wurde
   von
   Richard
   Stallmann27
   1985
   gegründet,
   um
   freie
  
Software28
   zu
   planen
   und
   zu
   entwickeln.29
   Die
   Entwicklungen
   in
   den
  
Anfängen
  der
  Computerwelt
  gingen
  schnell
  voran.
  Dies
  hing
  auch
  damit
  
zusammen,
  dass
  damals
  fast
  die
  komplette
  Software
  frei
  erhältlich
  und
  
zu
   verwenden
   war.
   In
   den
   1980er
   Jahren
   wurde
   die
   proprietäre
  
Software
  jedoch
  immer
  beliebter,
  woraufhin
  die
  FSF
  gegründet
  wurde.30
  
Laut
  der
  FSF
  muss
  eine
  OSS
  vier
  wesentliche
  Freiheiten
  erfüllen: 31
  

  

  

  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
23

  
   Strahringer
  (2012),
  S.
  116f
  (zitiert
  nach:
  Open
  Source
  Initivative
  (Hrgs.)
  (2014
  b)).
  

  
   Vgl.
  Steinbring
  /
  Hampel
  (2008):
  S.
  77.
  
25

  
   Vgl.
  Brügge
  et
  al.
  (2004),
  S.
  22.
  
26

  
   Vgl.
  Open
  Source
  Initivative
  (Hrgs.)
  (2014
  a).
  
27

  
   Vgl.
  Brügge
  et
  al.
  (2004),
  S.
  31.
  
28

  
   Vgl.
  Jaeger
  et
  al.
  (2005),
  S.
  2.
  
29

  
   Vgl.
  Brügge
  et
  al.
  (2004),
  S.
  31.
  
30

  
   Vgl.
  Silberfeld
  (2014),
  S.
  1.
  
31

  
   Vgl.
  Free
  Software
  Foundation
  (Hrgs.)
  (2014
  c).
  
24

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

  

www.research-­‐it.eu
  

9/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  

  

  

  

  
1.
2.
3.
4.

Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

Zu
  jedem
  Zweck
  ausführbar
  
An
  eigene
  Bedürfnisse
  anpassbar
  
Durch
  die
  Verbreitung
  soll
  anderen
  geholfen
  werden
  
Soll
  durch
  Weiterentwicklung
  und
  Verbreitung
  zum
  Gemeinwohl
  
beitragen
  

„Unsere
   Mission
   ist
   die
   Freiheit
   zu
   bewahren,
   zu
   schützen
   und
   zu
  
fördern,
   um
   Rechnersoftware
   nutzen,
   untersuchen,
   kopieren,
  
modifizieren
  und
  weiterverbreiten
  zu
  können
  und
  die
  Rechte
  von
  Freie-­‐
Software-­‐Nutzern
  zu
  verteidigen.“32
  
  

Mission
  

  
1.4

Copyrigt
  (Urheberrecht)
  und
  Copyleft
  

Das
  deutsche
  Urheberrecht,
  auch
  Copyright
  genannt,
  schützt
  Werke
  und
  
somit
  geistiges
  Eigentum.
  Das
  Urheberrecht
  an
  einem
  Werk
  –
  dazu
  zählt
  
neben
   Literatur
   auch
   Software
   –
   beginnt
   bei
   Entstehung
   des
   Werkes.
  
Eine
  explizite
  Registrierung,
  wie
  früher
  in
  den
  USA,
  ist
  nicht
  notwendig.
  
Nach
  dem
  deutschen
  Recht
  können
  nur
  natürliche
  Personen
  als
  Urheber
  
auftreten,
   da
   die
   Rechte
   aus
   dem
   Urheberrechtsgesetz
   nicht
   abgetreten
  
werden
   können.
   Allerdings
   ist
   es
   möglich
   die
   Nutzungsrechte
  
abzutreten,
  hierbei
  spielen
  Lizenzen
  eine
  wichtige
  Rolle.33
  

Copyright

Copyleft
   bezeichnet
   die
   Umkehrung
   des
   Copyrights.
   Während
   beim
  
Copyright
   das
   Kopieren
   und
   Weiterentwickeln
   ausgeschlossen
   ist,
  
vergibt
   der
   Urheber
   beim
   Copyleft
   Dritten
   das
   Recht
   zur
   Bearbeitung
  
und
   Verbreitung.
   Hieraus
   ergibt
   sich
   anschließend
   allerdings
   für
   den
  
Dritten
   die
   Pflicht,
   seine
   Weiterentwicklung
   ebenfalls
   anderen
  
zugänglich
   zu
   machen
   und
   Veränderungen
   und
   weitere
   Entwicklungen
  
zuzulassen.
   Somit
   wird
   sichergestellt,
   dass
   einmal
   frei
   verfügbare
   OSS
  
auch
   weiterhin
   frei
   bleiben.34
   Richard
   Stallmann,
   der
   Gründer
   der
   FSF,
  
bezeichnet
  das
  Copyleft
  als
  ein
  Mittel
  um
  die
  Software
  freizuhalten
  und
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

Copyleft

  

  

32

  
   Free
  Software
  Foundation
  (Hrgs.)
  (2014
  b).
  

  
   Vgl.
  Schaaf
  (2013),
  S.
  18.
  (zitiert
  nach:
  Gläßer
  (2004),
  S.
  26,
  43f;
  Hennig
  (2009),
  S.
  17;
  Jaeger
  et
  al.
  (2005),
  S.
  162;
  
Krumbein
  (2004),
  S.
  40f;
  §§
  29,
  31
  UrhG;
  BITKOM
  (Hrgs.)
  (2005),
  S.
  6f;
  BITKOM
  (Hrgs.)
  (2008),
  S.
  29).
  
34

  
   Vgl.
  Strahringer
  (2012),
  S.
  115.
  
33

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

10/25
  

Wissenstransfer
  –
  leicht
  gemacht!
  

  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
somit
  Software
  zu
  privatisieren.
   35
  Allerdings
  gibt
  es
  verschieden
  starke
  
Interpretationen
  des
  Copylefts.
  
  

  

Als
   Kritikpunkt
   an
   Copyleft
   wird
   die
   Untergrabung
   des
   Copyrights
  
gesehen,
   da
   der
   Urheber
   eines
   Copylefts
   die
   Möglichkeit
   verliert
   aus
  
seinem
  Eigentum
  einen
  finanziellen
  Verdienst
  zu
  erhalten.36
  

Kritik
  

  
1.5

Open
  Source
  Softwarelizenzen
  

In
  Lizenzverträgen
  werden
  die
  Nutzungsrechte
  festgehalten.
  Dabei
  geht
  
es
   vor
   allen
   Dingen
   um
   die
   Rechte
   und
   Pflichten,
   die
   dem
   Lizenznehmer
  
eingeräumt
   werden.37
   Durch
   Lizenzen
   wird
   festgesetzt,
   welcher
  
Personenkreis
   was
   genau
   mit
   der
   Software
   machen
   darf.38
   Gesetzlich
  
festgehalten
  ist
  dies
  in
  den
  §
  2
  Abs.
  1
  Satz
  1
  des
  UrhG.
  Dadurch
  kann
  der
  
Urheber
  entscheiden,
  ob
  und
  wie
  seine
  Software
  genutzt
  werden
  darf.39
  
Durch
   OS-­‐Lizenzen
   wird
   ein
   einheitlicher
   Rahmen
   bei
   der
   rechtlichen
  
Regelung
  geschaffen.
  Hierdurch
  wird
  es
  dem
  Urheber
  erleichtert,
  seine
  
Rechte
  rechtswirksam
  auf
  Dritte
  zu
  übertragen.40
  
  

Nutzungsrechte
  

Alle
  OS-­‐Lizenzen
  haben
  gemeinsam,
  dass
  es
  Dritten
  ermöglicht
  wird
  den
  
Quellcode
  zu
  nutzen,
  zu
  verändern,
  weiterzugeben
  und
  zu
  lesen.
  
Unterscheiden
  lassen
  sich
  die
  unterschiedlichen
  Lizenzen
  vor
  allen
  
Dingen
  bei
  den
  Bestimmungen
  zur
  Offenlegung
  der
  Modifikationen
  im
  
Distributionsfall,
  bei
  den
  Möglichkeiten
  der
  Integration
  auch
  in
  
proprietärer
  Software
  sowie
  bei
  der
  Einräumung
  von
  Rechten
  des
  
ursprünglichen
  Entwicklers.41
  Die
  bereits
  beschriebenen
  Organisationen
  

Nutzung
  des
  
Quellcode
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
35

  
   Vgl.
  Brügge
  et
  al.
  (2004),
  S.
  31.
  

  
   Vgl.
  Silberfeld
  (2014),
  S.
  9.
  
37

  
   Vgl.
  Schaaf
  (2013),
  S.
  29.
  (zitiert
  nach:
  Gläßer
  (2004),
  S.
  25;
  Groll
  (2012),
  S.
  20,
  35;
  Jaeger
  /
  Metzger
  (2011),
  S.
  95;
  
Jaeger
  et
  al.
  (2005),
  S.
  6f).
  
38

  
   Vgl.
  Evers
  (2008),
  S.
  19.
  
39

  
   Vgl.
  Bundesverwaltungsamt
  (Hrgs.)
  (2014
  a).
  
40

  
   Vgl.
  Helmreich
  /
  Riehle
  (2012),
  S.
  20.
  
41

  
   Vgl.
  Brügge
  et
  al.
  (2004),
  S.
  22.
  
36

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

11/25
  

Wissenstransfer
  –
  leicht
  gemacht!
  

  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
FSF
  und
  OSI
  erkennen
  nach
  ihren
  jeweiligen
  Bedingungen
  Lizenzen
  als
  
OS-­‐Lizenzen
  an
  und
  garantieren
  damit
  auch
  die
  freie
  Nutzung.42
  
  

  

Es
   existieren
   über
   200
   OS-­‐Lizenzen43,
   davon
   sind
   jedoch
   nicht
   alle
   von
  
der
  FSF
  oder
  OSI
  anerkannt,
  da
  diese
  Anerkennung
  kein
  Pflichtmerkmal
  
ist.44
  Es
  gibt
  eine
  Vielzahl
  verschiedener
  OS-­‐Lizenzen,
  allerdings
  wird
  in
  
über
   90%
   auf
   vier
   Lizenzmodelle
   zurückgegriffen.
   Die
   vier
   am
   meist
  
genutzten
   Lizenzen
   sind
   die
   GNU
   General
   Public
   License45,
   GNU
   Lesser
  
Public
   License46,
   Mozilla
   Public
   License47
   und
   die
   Berkley
   Software
  
Distribution
  License48.
  
  

Verbreitung
  
  
von
  OSS
  

GPL&(70%)&

LGPL&(13%)&

BSD&(8%)&
MPL&(2%)
Andere&(7%)&

  

Darstellung
  3:
  Verteilung
  Open
  Source-­‐Lizenzen
  bei
  sourceforge49
  

  

  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
42

  
   Vgl.
  Bundesverwaltungsamt
  (Hrgs.)
  (2014
  a).
  

  
   Vgl.
   Schaaf
   (2013),
   S.
   33.
   (zitiert
   nach:
   Hennig
   (2009),
   S.
   19,
   21;
   Institut
   für
   Rechtsfragen
   der
   Freien
   und
   Open
  
Source
  Software
  (Hrgs.)
  (2014
  b);
  Jaeger
  et
  al.
  (2005),
  S.
  15;
  Renner
  et
  al.
  (2005),
  S.
  22).
  
44

  
   Vgl.
  Schaaf
  (2013),
  S.
  27.
  
45

  
   Wird
  im
  Weiteren
  mit
  GPL
  abgekürzt.
  
46

  
   Wird
  im
  Weiteren
  mit
  LGPL
  abgekürzt.
  
47

  
   Wird
  im
  Weiteren
  mit
  MPL
  abgekürzt.
  
48

  
   Wird
  im
  Weiteren
  mit
  BSD
  abgekürzt.
  
49

  
   Eigene
  Darstellung
  in
  Anlehnung
  an:
  Kleijn
  (2006).
  
43

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

12/25
  

Wissenstransfer
  –
  leicht
  gemacht!
  

  

  

  

  

  

  
2

Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

Unterteilung
  von
  Lizenzmodellen
  

Bei
  Software,
  die
  unter
  strengem
  bzw.
  starkem
  Copyleft
  steht,
  darf
  die
  
modifizierte
   Software
   nur
   unter
   der
   gleichen
   Lizenz,
   wie
   die
  
ursprüngliche
  Software,
  weitergegeben
  werden.50
  Diese
  Software
  kann
  
in
   keiner
   Weise
   mit
   proprietärer
   Software
   verbunden
   werden.
   Selbst
  
eine
  Verlinkung
  ist
  nicht
  möglich.
  Der
  Grundgedanke,
  der
  hinter
  diesem
  
Copyleft
   steht
   ist,
   dass
   einmal
   offene
   Software
   auch
   weiterhin
   offen
  
bleibt
  und
  nicht
  in
  proprietäre
  Projekte
  mit
  eingebunden
  werden
  kann.
  
Bei
   Verstößen
   gegen
   dieses
   Copyleft
   gehen
   die
   gewährten
   Rechte
  
verloren
  und
  es
  verstößt
  somit
  auch
  gegen
  das
  Urheberrecht.51
  
  

strenges
  Copyleft
  

Bei
  Lizenzen
  ohne
  Copyleft,
  sogenannte
  Non-­‐Copyleft-­‐Lizenzen,
  werden
  
dem
   Nutzer
   der
   Software
   alle
   Nutzungsfreihalten
   eingeräumt.
   Alle
  
Änderungen
   und
   Weiterentwicklungen
   können
   unter
   einer
   beliebigen,
  
anderen
  Lizenz
  weiterverbreitet
  werden.
  Dadurch
  kann
  eine
  OSS
  durch
  
Weiterentwicklungen
   auch
   als
   proprietäre
   Software
   vertrieben
  
werden52,
   wodurch
   es
   möglich
   ist,
   dass
   der
   offene
   Quellcode
   der
  
Ursprungssoftware
  durch
  Änderungen
  unfrei
  wird.53
  

Non-­‐Copyleft
  

Bei
  dem
  eingeschränkten
  bzw.
  schwachen
  Copyleft
  wird
  die
  Verlinkung
  
und
   Kombination
   von
   OSS
   und
   proprietärer
   Software
   gestattet.
   So
  
können
  unabhängige
  Erweiterungen
  oder
  Neuentwicklungen
  auch
  unter
  
anderen
   Lizenzen
   oder
   sogar
   als
   proprietäre
   Lizenz
   weitergegeben
  
werden.54
   Hiermit
   ist
   es
   möglich,
   Software
   mit
   unterschiedlichen
  
Lizenzen
  zu
  verknüpfen.55
  Es
  ist
  allerdings
  darauf
  zu
  achten,
  dass
  diese
  
Modifikationen
  in
  einer
  eigenen
  Datei
  zu
  speichern
  sind,
  da
  die
  restliche
  
Software
   unter
   der
   bisherigen
   Lizenz
   weitergeführt
   werden
   muss.
   Nur
  

eingeschränktes
  
Copyleft
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
50

  
   Vgl.
  Institut
  für
  Rechtsfragen
  der
  Freien
  und
  Open
  Source
  Software
  (Hrgs.)
  (2014
  b).
  

  
   Vgl.
  Kleijn
  (2006).
  
52

  
   Vgl.
  Teupen
  (2007),
  S.
  167f.
  
53

  
   Vgl.
  Jaeger
  et
  al.
  (2005),
  S.
  3.
  
54

  
   Vgl.
  Kleijn
  (2006).
  
55

  
   Vgl.
  Institut
  für
  Rechtsfragen
  der
  Freien
  und
  Open
  Source
  Software
  (Hrgs.)
  (2014
  b).
  
51

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

13/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
die
   modifizierte
   Datei
   darf
   unter
   einer
   anderen
   Lizenz
   veröffentlicht
  
werden.56
  
  

  

  
3

Ausgewählte
  Open
  Source
  Lizenzen
  

3.1

GNU
  General
  Public
  License
  

Die
   GPL
   ist
   mit
   70%
   die
   –
   mit
   großem
   Abstand
   –
   am
   meist
   genutzte
  
Lizenz57,
   dessen
   Historie
   bis
   ins
   Jahr
   1989
   zurück
   zu
   verfolgen
   ist.
  
Besondere
   Popularität
   hat
   die
   GPL
   dadurch
   erhalten,
   dass
   große
   Teile
  
des
   Linux-­‐Betriebssystemkerns
   auf
   diese
   Lizenz
   zurückgreifen.58
   Die
   GPL
  
zählt
  zu
  den
  Lizenzen
  mit
  strengem
  Copyleft.59
  Diese
  umfasst
  die
  Rechte
  
die
   Software
   lizenzgebührenfrei
   zu
   verbreiten,
   zu
   vervielfältigen,
   zu
  
verändern
   sowie
   zu
   veröffentlichen.
   Neben
   diesen
   Rechten,
   beinhaltet
  
die
   GPL
   allerdings
   auch
   Pflichten.
   Die
   wichtigste
   Pflicht
   betrifft
   das
  
Copyleft
  und
  die
  Verpflichtung
  bei
  Änderungen
  an
  unter
  GPL
  gestellter
  
Software,
   diese
   ebenfalls
   unter
   die
   GPL
   zu
   stellen
   und
   somit
   den
  
Quellcode
  offen
  zu
  legen.60
  Im
  Rahmen
  von
  Gesetzen
  wird
  bei
  der
  GPL
  
die
  Haftung
  von
  Softwareentwicklern
  ausgeschlossen.61
  
Die
   lizenzgebührenfreie
   Verbreitung,
   welche
   seit
   der
   GPL
   V3
   sogar
  
explizit
  benannt
  wird62,
  bedeutet
  allerdings
  nicht,
  dass
  überhaupt
  keine
  
Kosten
   bei
   Software
   unter
   der
   GPL
   anfallen.
   Beispielsweise
   können
  
Unternehmen
   Gebühren
   für
   den
   Vertreib
   ansetzten.63
   Im
   Jahr
   2007
  
wurde
   die
   3.
   Version
   der
   GPL,
   die
   GPL
   V3,
   von
   der
   FSF
   veröffentlicht.
   Im
  
Vergleich
   zur
   2.
   Version
   wurden
   sowohl
   rechtliche
   als
   auch
   technische
  

  

  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
56

  
   Vgl.
  Schaaf
  (2013),
  S.
  17.
  (zitiert
  nach:
  BITKOM
  (Hrgs.)
  (2014),
  S.
  11f;
  Bundesverwaltungsamt
  (Hrgs.)
  (2011),
  S.
  55;
  
Gläßer
  (2004),
  S.
  26).
  
57

  
   Vgl.
  Kleijn
  (2006).
  
58

  
   Vgl.
  Jaeger
  et
  al.
  (2005),
  S.
  1.
  
59

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  24.
  
60

  
   Vgl.
  Jaeger
  et
  al.
  (2005),
  S.
  1.
  
61

  
   Vgl.
   Schaaf
   (2013),
   S.
   35.
   (zitiert
   nach:
   Hennig
   (2009),
   S.
   20;
   Jaeger
  et
  al.
   (2005),
   S.
   15;
   Jaeger
   /
   Metzger
   (2011),
  
  
S.
  25-­‐27).
  
62

  
   Vgl.
  Schaaf
  (2013),
  S.
  57.
  (zitiert
  nach:
  Free
  Software
  Foundation
  (Hrgs.)
  (2007)).
  
63

  
   Vgl.
  Jaeger
  et
  al.
  (2005),
  S.
  15.
  

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

14/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
Neuerungen
   umgesetzt,
   ebenso
   wie
   eine
   bessere
   internationale
  
Anwendung.
  Bisher
  wird
  diese
  Version
  jedoch
  weniger
  häufig
  genutzt
  als
  
die
   Version
   2.64
   Ein
   Unterschied
   zwischen
   GPL
   V2
   und
   GPL
   V3
   liegt
   auch
  
in
   der
   Begriffsbestimmung.
   Während
   in
   V2
   keine
   Definitionen
   geliefert
  
wurden,
  sind
  in
  der
  GPL
  V3
  in
  Ziffer
  0
  Begriffsdefinitionen
  enthalten.
  Es
  
wird
   beispielsweise
   zwischen
   propagate
   und
   convey
   unterschieden.
  
Während
   propagate
   die
   Nutzung,
   also
   das
   einfache
   Ausführen
   der
  
Software
   ohne
   Lizenzpflichten
   beschreibt,
   wird
   unter
   convey
   auch
   die
  
Übertragung
  an
  weitere
  Personen
  verstanden,
  hierbei
  entstehen
  für
  den
  
Nutzer
  allerdings
  weitere
  Pflichten.65
  

  

Bei
   genauerer
   Beleuchtung
   der
   GPL
   ist
   festzustellen,
   dass
   in
   Ziffer
   1
  
bereits
   dem
   Nutzer
   das
   Recht
   eingeräumt
   wird
   unveränderte
   Kopien
  
herzustellen
   und
   zu
   vertreiben.
   In
   Ziffer
   2
   wird
   anschießend
   auch
   das
  
Recht
  auf
  Änderung
  des
  Quelltextes
  eingeräumt66,
  in
  GPL
  V3
  wird
  dieses
  
Recht
   sogar
   unwiderruflich
   eingeräumt.
   Durch
   Ziffer
   7
   ist
   es
   bei
   der
   GPL
  
V3
   möglich
   weitere
   Bedingungen
   zum
   Vertrieb
   zu
   ergänzen.67
   Es
   wird
  
deutlich,
  dass
  die
  GPL
  für
  den
  internationalen
  und
  nicht
  explizit
  für
  den
  
deutschen
   Markt
   entwickelt
   wurde,
   da
   auch
   auf
   die
   Übernahme
   der
  
Rechte
   bei
   der
   Unternehmensnachfolge
   eingegangen
   wird.
   In
  
Deutschland
   ist
   dieses
   durch
   §34
   Abs.
   3
   Satz
   1
   UrhG
   bereits
   geregelt,
  
und
  müsste
  so
  nicht
  in
  der
  GPL
  erwähnt
  werden.68
  

Rechte
  

Zu
  den
  Pflichten
  gehört,
  dass
  der
  Lizenztext
  immer
  mitgeliefert
  werden
  
muss.
   Dieses
   ist
   entweder
   als
   gedruckte
   Form
   oder
   als
   Datei
   möglich,
  
ein
  Verweis
  auf
  eine
  Website
  ist
  allerdings
  nicht
  ausreichend.69
  Ebenfalls
  
muss
   der
   Erwerber
   immer
   an
   den
   Quelltext
   gelangen.
   Seit
   der
   GPL
   V3
  
muss
   dieser
   nicht
   mehr
   mitgeliefert
   werden
   oder
   ein
   Angebot
   zur
  
Lieferung
   gegeben
   werden,
   sondern
   es
   reicht
   die
   Möglichkeit
   des
  
kostenlosen
   Downloads
   aus.70
   Der
   Copyright-­‐
   bzw.
   Urhebervermerk
  

Pflichten
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
64

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  50.
  

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  52f.
  
66

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  25.
  
67

  
   Vgl.
  Schaaf
  (2013),
  S.
  51.
  (zitiert
  nach:
  Free
  Software
  Foundation
  (Hrgs.)
  (2007);
  Jaeger
  /
  Metzger
  (2011),
  S.
  53f).
  
68

  
   Vgl.
  Schaaf
  (2013),
  S.
  51.
  (zitiert
  nach:
  Jaeger
  /
  Metzger
  (2011),
  S.
  54;
  §34
  UrhG).
  
69

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  30.
  
70

  
   Vgl.
  Jaeger
  et
  al.
  (2005),
  S.
  16f.
  
65

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

15/25
  

Wissenstransfer
  –
  leicht
  gemacht!
  

  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
muss
   bei
   der
   Verbreitung
   von
   Software
   mit
   veröffentlicht
   werden,
  
wobei
   vorhandene
   Vermerke
   nicht
   verändert
   werden
   dürfen.71
   Bei
  
Veränderungen
   muss
   immer
   ein
   Hinweis
   auf
   diese
   Modifikation
   mit
  
Änderungsdatum
   gegeben
   werden.
   Hierbei
   muss
   die
   genaue
  
Veränderung
   ersichtlich
   sein.
   Der
   Urheber
   muss
   seinen
   Namen
   dabei
  
aber
   nicht
   veröffentlichen,
   sodass
   es
   auch
   möglich
   ist
   anonym
   zu
  
bleiben.72
   Eine
   weitere
   Pflicht
   besteht
   darin,
   dass
   der
   unveränderte
  
Haftungsausschluss
   erkennbar
   angebracht
   werden
   muss.
   Diese
   Klausel
  
ist
  in
  Deutschland
  allerdings
  nicht
  wirksam.73
  Seit
  der
  GPL
  V3
  können
  in
  
Ziffer
   7
   weitere
   Pflichten
   ergänzt
   werden74,
   in
   GPL
   V2
   war
   es
  
unterdessen
   noch
   untersagt
   zusätzliche
   Beschränkungen
   zu
   erteilen.75
  
Ebenfalls
   kann
   der
   Lizenzgeber
   von
   Pflichten
   befreien
   und
   eine
   Liste
   mit
  
Beschränkungen
  ergänzen.76
  

  

  
3.2

GNU
  Lesser
  General
  Public
  License
  

Nach
   der
   GPL
   ist
   die
   am
   zweit
   häufigsten
   genutzte
   Lizenz
   die
   LGPL
   mit
  
12,5%
   Anteil
   an
   den
   über
   80.000
   Projekten
   des
   OS
   Hosters
  
sourceforce.77
   Die
   LGPL
   wurde
   speziell
   für
   Bibliotheksprogramme
  
entwickelt
   und
   stellt
   eine
   abgeschwächte
   Form
   der
   GPL
   dar,
   um
  
Programme
  auch
  mit
  proprietären
  Programmen
  verknüpfen
  zu
  können.
  
Aus
   diesem
   Grunde
   wurde
   die
   LGPL
   auch
   zunächst
   unter
   dem
   Namen
  
Libary
   General
   Public
   License
   geführt.
   Da
   von
   der
   FSF
   seit
   einiger
   Zeit
  
allerdings
  auch
  für
  Bibliotheken
  die
  GPL
  empfohlen
  wird,
  wurde
  diese
  in
  
Lesser
  General
  Public
  License
  geändert.78
  
  

  

  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
71

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  32f.
  

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  36.
  
73

  
   Vgl.
  Jaeger
  et
  al.
  (2005),
  S.
  16.
  
74

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  54f.
  
75

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  35.
  
76

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  58f.
  
77

  
   Vgl.
  Kleijn
  (2006).
  
78

  
   Vgl.
  Jaeger
  et
  al.
  (2005),
  S.
  3f.
  
72

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

16/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
Im
  Zuge
  der
  Veröffentlichung
  der
  aktuellen
  Version
  GPL
  V3
  wurde
  auch
  
die
   LGPL
   Version
   angepasst.
   2007
   wurde
   die
   LGPL
   V3
   herausgebracht
  
und
  ist
  als
  Eingrenzung
  der
  GPL
  V3
  zu
  verstehen.
  Es
  werden
  explizit
  nur
  
die
   Ausnahmen
   zur
   GPL
   V3
   beleuchtet,
   nicht
   aber
   die
  
Gemeinsamkeiten.79
  In
  Anlehnung
  an
  die
  GPL
  V2
  sind
  auch
  in
  der
  LGPL
  
V2.1
   ähnliche
   Rechte
   verbunden.
   Während
   in
   Ziffer
   1
   die
   Verbreitung
  
und
   Herstellung
   der
   Software
   festgehalten
   wird,
   befasst
   sich
   Ziffer
   2
  
konkret
   mit
   dem
   Kopieren
   und
   Verändern
   der
   Bibliotheken.
   In
   Ziffer
   3
  
wird
  noch
  auf
  die
  Kompatibilität
  zur
  GPL
  eingegangen
  und
  in
  Ziffer
  4
  auf
  
die
   Verbreitung
   vom
   Objektcode.80
   Bei
   der
   LGPL
   wird
   unterschieden
  
zwischen
   Änderungen
   an
   der
   Bibliothek
   sowie
   Änderungen
   an
   auf
   die
  
Bibliothek
   zugreifende
   Software.
   Während
   bei
   Änderungen
   an
   der
  
Bibliothek
   quasi
   das
   strenge
   Copyleft
   greift,
   findet
   bei
   Änderungen
   an
  
Software
  die
  auf
  die
  Bibliothek
  zugreift
  nur
  das
  eingeschränkte
  Copyleft
  
Anwendung.81
   Insgesamt
   ist
   festzuhalten,
   dass
   die
   LGPL
   V3
   die
   Pflichten
  
im
   Vergleich
   zur
   GPL
   V3
   reduziert,
   sodass
   die
   Softwarebibliothek
   auch
  
mit
   Software
   verwendet
   werden
   kann,
   die
   als
   proprietäre
   Software
  
gilt.82
  

  

  

  
3.3

Berkeley
  Software
  Distrubution
  License
  

Die
  Universität
  von
  Kalifornien
  in
  Berkeley
  hat
  eine
  Lizenz
  definiert
  und
  
diese
   zunächst
   für
   die
   Distribution
   eines
   UNIX-­‐basierten
  
Betriebssystems
   verwendet.
   Mittlerweile
   wird
   dieser
   Lizenztyp
  
allgemein
   genutzt.
   Zurzeit
   sind
   nur
   acht
   Prozent
   der
   OSS-­‐Projekte
   mit
  
einer
   BSD
   veröffentlicht83,
   obwohl
   der
   Vorteil
   besonders
   für
   private
  
Entwickler
  in
  dem
  kurzen
  und
  verständlichen
  Lizenztext
  liegt.84
  
  

  

  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
79

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  78,
  82.
  

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  78f.
  
81

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  80f.
  
82

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  83.
  
83

  
   Vgl.
  Kleijn
  (2006).
  
84

  
   Vgl.
  Schaaf
  (2013),
  S
  61.
  
80

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

17/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
Die
   BSD
   genehmigt
   einem
   Dritten
   das
   Programm
   zu
   kopieren
   und
   zu
  
verändern.
   Hierbei
   muss
   allerdings
   der
   Copyright-­‐Vermerk
   des
  
ursprünglichen
  Programms
  beibehalten
  werden85,
  die
  weiterentwickelte
  
Software
  kann
  allerdings
  auch
  kommerziell
  vertrieben
  werden.86
  

  

Auch
   bei
   der
   BSD
   gibt
   es
   Pflichten
   des
   Lizenznehmers.
   Es
   muss
  
beispielsweise
   bei
   Weitergabe
   der
   Lizenztext
   mitgeliefert
   werden,
  
allerdings
   ist
   dieses
   beim
   Quellcode
   nicht
   zwangsläufig
   notwendig.
  
Ebenfalls
   muss
   es
   einen
   Hinweis
   auf
   alle
   am
   Programm
   beteiligten
  
Entwickler
   geben.87
   Auch
   wird
   bei
   der
   BSD
   deutlich,
   dass
   auch
   diese
  
Lizenz
   nicht
   explizit
   für
   Deutschland
   geschrieben
   ist,
   da
   z.
   B.
   auch
   das
  
Ausführen
  der
  Software
  in
  der
  BSD
  geregelt
  ist.
  Aufgrund
  des
  §69d
  UrhG
  
wäre
  dieses
  in
  Deutschland
  allerdings
  notwendig.88
  In
  der
  Urfassung
  der
  
BSD
   war
   die
   Pflicht
   verankert,
   dass
   ein
   Hinweis
   auf
   die
   Universität
  
Berkeley
   gegeben
   werden
   musste.
   Aufgrund
   von
   Schwierigkeiten
   wurde
  
diese
   Pflicht
   allerdings
   in
   aktuellen
   Fassungen
   der
   BSD
   nicht
   mehr
   mit
  
aufgenommen.
   Ziffer
   1
   besagt,
   dass
   sowohl
   der
   Urhebervermerk,
   die
  
Lizenzbestimmungen
  
sowie
  
der
  
Haftungs-­‐
  
und
  
89
Gewährleistungsausschluss
  jeweils
  mit
  verbreitet
  werden
  müssen.
  

Rechte
  

Pflichten
  

  
3.4

Mozilla
  Public
  License
  

Die
   MPL
   zählt
   zu
   den
   Lizenzen
   mit
   eingeschränktem
   Copyleft.
   Hierbei
  
müssen
   Änderungen
   in
   der
   bestehenden
   Software
   weiterhin
   mit
   der
  
MPL
   lizenziert
   werden,
   während
   bei
   neu
   hinzugefügten
   Dateien
   keine
  
Vorgabe
   für
   die
   verwendete
   Lizenz
   gemacht
   wird.
   Durch
   dieses
  
eingeschränkte
   Copyleft
   ist
   es
   möglich
   Softwarebestandteile
   mit
  
verschiedenen
  Lizenzen
  zu
  kombinieren.90
  Die
  MPL
  ist
  sowohl
  eine
  OSS,
  

  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
85

  
   Vgl.
  Wind
  (2012),
  S.
  43.
  

  
   Vgl.
  Hüttenegger
  (2006),
  S.
  266.
  
87

  
   Vgl.
   Schaaf
   (2013),
   S.
   38.
   (zitiert
   nach:
   Gläßer
   (2004),
   S.
   30;
   Jaeger
  et
  al.
   (2005),
   S.
   2;
   Krumbein
   (2004),
   S.
   43;
  
Laurent
  (2004),
  S.
  14,
  16;
  Wichmann
  (2005),
  S.
  6).
  
88

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  83.
  
89

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  84f.
  
90

  
   Vgl.
  Jaeger
  et
  al.
  (2005),
  S.
  3.
  
86

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

18/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
als
   auch
   eine
   Freeware.91
   Rechtlich
   ist
   die
   MPL
   der
   LGPL
   sehr
   ähnlich,
  
unterscheidet
   aber
   z.
   B.
   zwischen
   Werk-­‐
   und
   Dateiderivaten.
   Während
  
Werkderivate
   Funktionen
   aufrufen,
   sind
   Dateiderivate
   Änderungen
   an
  
Dateien.
   Bei
   Dateiderivaten
   schreibt
   die
   MPL
   vor,
   dass
   Änderungen
  
weiterhin
   unter
   der
   MPL
   lizenziert
   werden.
   Änderungen
   an
  
Werkderivaten
  können
  auch
  unter
  einer
  anderen
  Lizenz
  stehen.92
  

  

  
3.5

Artistic
  License
  

Sowohl
   die
   OSI
   als
   auch
   die
   FSF
   haben
   die
   Artistic
   License93
   als
   OS
  
anerkannt
   und
   lizenziert.94
   Die
   AL
   gibt
   dem
   Nutzer
   das
   Recht
   zur
  
Vervielfältigung
   sowie
   Verbreitung
   in
   jeglicher
   Vertriebsform.
   Die
  
Möglichkeiten
   und
   Rechte
   beim
   Vertrieb
   sowie
   bei
   Modifikationen
  
werden
  in
  Ziffer
  2
  und
  3
  beleuchtet.
  Das
  Verbreiten
  des
  Binärcodes
  wird
  
in
   Ziffer
   4
   und
   8
   geregelt.
   Besondere
   Bedeutung
   der
   AL
   hat
   Ziffer
   5.
  
Hierbei
   wird
   festgelegt,
   dass
   eine
   angemessene
   Gebühr
   sowohl
   für
  
Dienstleistungen
   als
   auch
   für
   das
   alleinige
   Kopieren
   verlangt
   werden
  
kann.
  Ebenfalls
  ist
  es
  möglich
  Software
  mit
  der
  AL
  auch
  mit
  Software
  zu
  
verkaufen,
  die
  unter
  einer
  anderen
  Lizenz
  geführt
  wird.
  Hierfür
  wird
  in
  
Ziffer
   6
   und
   7
   die
   proprietäre
   Verwendung
   und
   dessen
   Einbindung
  
erläutert.
  Die
  AL
  unterscheidet
  die
  Pflichten
  nach
  Umfang
  der
  jeweiligen
  
Modifikationen,
   z.
   B.
   bei
   einer
   geringen
   Modifikation
   besteht
   nur
   die
  
Pflicht
   der
   Fehlerbeseitigung.
   In
   Ziffer
   1
   und
   2
   wird
   auch
   hier
   auf
   den
  
Urhebervermerk
   und
   den
   Haftungsausschluss
   eingegangen.
   Im
  
Unterschied
   zu
   einigen
   anderen
   Lizenzarten
   muss
   bei
   der
   AL
   der
  
Lizenztext
   nicht
   mitgeliefert
   werden.95
   Zu
   beachten
   ist,
   dass
   bei
  
veränderten
   Versionen
   ein
   neuer
   Name
   für
   die
   Software
   vergeben
  
werden
  muss.
  Allerdings
  muss
  das
  ursprüngliche
  Programm
  samt
  einer
  

Rechte
  
  
und
  Pflichten
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
91

   Vgl.
  Hüttenegger
  (2006),
  S.
  270.
  

  
   Vgl.
  Schaaf
  (2013),
  S.
  38.
  (zitiert
  nach:
  Gläßer
  (2004),
  S.
  31;
  Spindler
  (2004),
  S.
  15).
  
93

  
   Wird
  im
  Weiteren
  mit
  AL
  abgekürzt.
  
94

  
   Vgl.
  Schaaf
  (2013),
  S.
  40.
  (zitiert
  nach:
  Gläßer
  (2004),
  S.
  30;
  Jaeger
  /
  Metzger
  (2011)
  S.
  93).
  
95

  
   Vgl.
  Jaeger
  /
  Metzger
  (2011),
  S.
  90.
  
92

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

19/25
  

Wissenstransfer
  –
  leicht
  gemacht!
  

  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
Beschreibung
   der
   gemachten
   Änderungen
   mit
   zur
   Verfügung
   gestellt
  
werden.96
  

  

  
4

Fazit
  

Es
  gibt
  eine
  Vielzahl
  von
  OS-­‐Lizenzen,
  wovon
  allerdings
  lange
  nicht
  alle
  
von
   der
   FSF
   oder
   OSI
   anerkannt
   sind.97
   In
   über
   90%
   wird
   auf
   die
   vier
  
größten
  Lizenzen
  zurückgegriffen.
  Dazu
  gehört
  die
  GPL,
  LGPL,
  MPL
  sowie
  
die
  BSD.98
  
  

Zusammenfassung
  

Die
   folgende
   Übersicht
   soll
   einmal
   die
   Unterschiede
   dieser
   fünf
  
Lizenzmodelle
  verdeutlichen:
  

Vergleich
  

Kriterium
  

GPL
  

LGPL
  

BSD
  

MPL
  

AL
  

Offener
  Quellcode
  

✓
  

✓
  

✓
  

✓
  

✓
  

Verbindung
  mit
  proprietärer
  Software
  

  

✓
  

✓
  

✓
  

✓
  

Weiter-­‐entwicklung
  als
  proprietäre
  Software
  

  

  

✓
  

  

✓
  

Spezielle
  Privilegien
  für
  den
  ursprünglichen
  Copyrightinhaber
  

  

  

  

✓
  

  

Darstellung
  4:
  Vergleich
  Open
  Source-­‐Lizenzen99
  
Welches
   die
   vorteilhafteste
   Lizenz
   ist,
   kann
   nicht
   eindeutig
   bestimmt
  
werden.
   Es
   kommt
   auf
   die
   Wünsche,
   Pläne
   und
   Ziele
   des
   jeweiligen
  
Unternehmens
  an.
  Für
  die
  reine
  Ausführung
  der
  einzelnen
  Software
  ist
  
die
   Wahl
   der
   Lizenz
   irrelevant.
   Sind
   allerdings
   Anpassungen
   an
  
Unternehmensbedürfnisse
   vorgesehen,
   sollte
   sich
   das
   Unternehmen
  
genauer
  mit
  der
  jeweiligen
  Lizenz
  beschäftigten.
  Auch
  strategische
  Ziele
  

Ergebnis
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
96

  
   Vgl.
  Schaaf
  (2013),
  S.
  62.
  (zitiert
  nach:
  Jaeger
  et
  al.
  (2005),
  S.
  91f;
  Perl
  Foundation
  (Hrgs.)
  (o.J.)).
  

  
   Vgl.
  Schaaf
  (2013),
  S.
  27.
  
98

  
   Vgl.
  Kleijn
  (2006).
  
99

  
   Modifiziert
  entnommen
  aus:
  Brügge
  et
  al.
  (2004),
  S.
  23
  (in
  Anlehnung
  an:
  Perens
  (1999)).
  
97

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

20/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
sollten
  bei
  der
  Entscheidung
  mit
  berücksichtigt
  werden,
  damit
  z.
  B.
  eine
  
Verbindung
  mit
  proprietärer
  Software
  bei
  Bedarf
  möglich
  ist.
  

  

Bereits
   seit
   den
   1990er
   Jahren
   nutzen
   immer
   mehr
   Unternehmen
   die
  
Vorteile
   von
   OSS,
   wobei
   diese
   auf
   mehr
   als
   200
   verschiedene
   OS-­‐
Lizenzen
   zurückgreifen.
   U.
   a.
   lässt
   sich
   die
   schnelle
   Zunahme
   von
   OSS
  
auf
   die
   Verbreitung
   von
   Linux
   zurückführen.
   Allerdings
   ist
   die
   künftige
  
Entwicklung
   des
   Software-­‐Marktes
   offen
   und
   ungewiss.
   Sollte
   sich
   Linux
  
gegen
  Betriebssysteme
  wie
  z.
  B.
  Apple
  und
  Windows
  durchsetzen,
  kann
  
dieses
   auch
   zu
   einer
   noch
   höheren
   Akzeptanz
   von
   OSS
   in
   der
  
Unternehmenspraxis
  führen.
  Auch
  der
  weitere
  technische
  Fortschritt
  ist
  
nicht
   abzusehen
   und
   lässt
   damit
   die
   Entwicklung
   ungewiss
   erscheinen.
  
Aus
  diesen
  Gründen
  wäre
  es
  interessant
  zu
  untersuchen,
  ob
  sich
  die
  OSS
  
gegen
   die
   proprietärer
   Software
   durchsetzen
   und
   diese
   verdrängen
  
kann.
  Ebenfalls
  könnte
  herausgearbeitet
  werden,
  in
  welchen
  Bereichen
  
des
  Marktes
  sich
  die
  OSS
  besonders
  behaupten
  kann,
  was
  wiederum
  das
  
Potenzial
   von
   OSS
   wiederspiegelt.
   Ob
   der
   Software-­‐Markt
   ausschließlich
  
mit
  OSS
  denkbar
  wäre
  ist
  eine
  weitere
  interessante
  Frage,
  welcher
  auf
  
den
  Grund
  gegangen
  werden
  könnte.
  

Ausblick
  

  

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

21/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  

  

  

  

  
Literaturverzeichnis
  

Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

BITKOM
  (Hrgs.)
  (2005):
  Leitfaden
  zur
  Patentierung
  computer-­‐implementierter
  Erfindungen,
  Berlin.
  
BITKOM
  (Hrgs.)
  (2008):
  Der
  richtige
  Umgang
  mit
  dem
  Urheberrecht,
  Berlin.
  
BITKOM
  (Hrgs.)
  (2014):
  Open
  Source
  Software:
  Rechtsliche
  Grundlagen
  und
  Hinweise,
  Berlin.
  
Brügge,
   B.
   /
   Harhoff,
   D.
   /
   Picot,
   A.
   /
   Creighton,
   O.
   /
   Fiedler,
   M.
   /
   Henkel,
   J.
   (2004):
   Open-­‐Source-­‐
Software
  -­‐
  Eine
  ökonomische
  und
  technische
  Analyse,
  Berlin
  Heidelberg.
  
Bundesverwaltungsamt
   (Hrgs.)
   (2011):
   Rechtliche
   Aspekte
   der
   Nutzung,
   Verbreitung
   und
  
Weiterentwicklung
  von
  Open-­‐Source-­‐Software,
  o.O..
  
Bundesverwaltungsamt
  (Hrgs.)
  (2014
  a):
  Homepage
  des
  Bundesverwaltungsamtes,
  Online-­‐Quelle:
  
http://www.bva.bund.de/DE/
  
Organisation/Abteilungen/Abteilung_BIT/Leistungen/IT_Beratungsleistungen/CCOSS/02_OSS/03_
Open-­‐Source-­‐Lizenzen/node.html,
  Abruf
  am
  26.04.2014.
  
Bundesverwaltungsamt
   (Hrgs.)
   (2014
   b):
   Homepages
   des
   Bundesverwaltungsamtes,
   Online-­‐
Quelle:
  
http://www.bva.bund.de/DE/Organisation/Abteilungen/Abteilung_BIT/Leistungen/
  
IT_Beratungsleistungen/CCOSS/02_OSS/01_Vorteile/node.html,
  Abruf
  am
  19.05.2014.
  
Bundesverwaltungsamt
  (Hrgs.)
  (2014
  c):
  Homepage
  des
  Bundesverwaltungsamtes,
  Online-­‐Quelle:
  
http://www.bva.bund.de/DE/Organisation/Abteilungen/Abteilung_BIT/Leistungen/IT_Beratungsle
istungen/CCOSS/02_OSS/02_Nachteile/node.html;jsessionid=FF79701824ADF,
  
Abruf
  
am
  
19.05.2014.
  
Diedrich,
   O.
   (2009
   a):
   Homepages
   des
   Heise
   Zeitschriften
   Verlages,
   Online-­‐Quelle:
  
http://www.heise.de/open/artikel/Trendstudie-­‐Open-­‐Source-­‐221696.html,
  Abruf
  am
  19.05.2014.
  
Diedrich,
   O.
   (2009
   b):
   Homepages
   des
   Heise
   Zeitschriften
   Verlages,
   Online-­‐Quelle:
  
http://www.heise.de/open/artikel/Gruende-­‐fuer-­‐den-­‐Open-­‐Source-­‐Einsatz-­‐
224508.html?view=zoom;zoom=12,
  Abruf
  am
  22.05.2014.
  
Diedrich,
   O.
   (2009
   c):
   Homepages
   des
   Heise
   Zeitschriften
   Verlages,
   Online-­‐Quelle:
  
http://www.heise.de/open/artikel/Hindernisse-­‐224510.html,
  Abruf
  am
  19.05.2014.
  

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

22/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
Ellmer,
  B.
  (2008):
  Die
  Entwicklung
  von
  Open
  Source
  Software
  (OSS),
  Norderstedt.
  

  

Evers,
  S.
  (2008):
  Ein
  Modell
  der
  Open-­‐Source-­‐Entwicklung,
  Berlin.
  
Free
   Software
   Foundation
   (Hrgs.)
   (2007):
   Homepage
   der
   Free
   Software
   Foundation,
   Online-­‐
Quelle:
  https://www.gnu.org/licenses/gpl-­‐3.0,
  Abruf
  am
  12.06.2012.
  
Free
   Software
   Foundation
   (Hrgs.)
   (2014
   a):
   Homepage
   der
   GNU,
   Online-­‐Quelle:
  
https://www.gnu.org/philosophy/free-­‐software-­‐for-­‐freedom.de.html
   #relation
   ship,
   Abruf
   am
  
29.04.2014.
  
Free
   Software
   Foundation
   (Hrgs.)
   (2014
   b):
   Homepage
   der
   GNU,
   Online-­‐Quelle:
  
http://www.gnu.org,
  Abruf
  am
  12.05.2014.
  
Free
   Software
   Foundation
   (Hrgs.)
   (2014
   c):
   Homepage
   der
   GNU,
   Online-­‐Quelle:
  
http://www.gnu.org/philosophy/free-­‐sw.html,
  Abruf
  am
  12.05.2014.
  
Gabler
   Wirtschaftslexikon
   (Hrgs.)
   (2014):
   Wirtschaftslexikon
   Gabler,
   Online-­‐Quelle:
  
http://wirtschaftslexikon.gabler.de/Definition/open-­‐source.
  html,
  Abruf
  am
  26.04.2014.
  
Gläßer,
  L.
  (2004):
  Open-­‐Source-­‐Software,
  Erlangen.
  
Grassmuck,
  V.
  (2004):
  Freie
  Software
  -­‐
  Zwischen
  Privat-­‐
  und
  Gemeineigentum,
  Bonn.
  
Groll,
  T.
  (2012):
  1x1
  des
  Lizenzmanagements:
  Praxisleitfaden
  für
  Lizenzmanager,
  München.
  
Helmreich,
   M.
   /
   Riehle,
   D.
   (2012):
   Geschäftsrisiken
   und
   Governance
   von
   Open
   Source
   in
  
Softwareprodukten,
   in:
   Strahringer,
   S.
   (Hrgs.),
   Open
   Source
   -­‐
   Konzepte,
   Risiken,
   Trends,
  
Heidelberg,
  S.
  17-­‐25.
  
Hennig,
  S.
  (2009):
  Open
  Source-­‐Software
  für
  mittelständische
  Unternehmen,
  Hamburg.
  
Hüttenegger,
  G.
  (2006):
  Open
  Source
  Knowledge
  Management,
  Berlin
  Heidelberg.
  
Institut
  für
  Rechtsfragen
  der
  Freien
  und
  Open
  Source
  Software
  (Hrgs.)
  (2014
  a):
  Homepage
  des
  
Institut
   für
   Rechtsfragen
   der
   Freien
   und
   Open
   Source
   Software
   (ifrOSS),
   Online-­‐Quelle:
  
http://www.ifross.org/was-­‐proprietaere-­‐software-­‐bzw-­‐closed-­‐source-­‐software,
  
Abruf
  
am
  
11.05.2014.
  

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

23/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
Institut
  für
  Rechtsfragen
  der
  Freien
  und
  Open
  Source
  Software
  (Hrgs.)
  (2014
  b):
  Homepage
  des
  
Institut
   für
   Rechtsfragen
   der
   Freien
   und
   Open
   Source
   Software
   (ifrOSS),
   Online-­‐Quelle:
  
http://ifross.org/lizenz-­‐center,
  Abruf
  am
  19
  05
  2014.
  

  

Jaeger,
  T.
  /
  Koglin,
  O.
  /
  Kreutzer,
  T.
  /
  Metzger,
  A.
  /
  Schulz,
  C.
  (2005):
  Die
  GPL
  kommentiert
  und
  
erklärt,
  Köln.
  
Jaeger,
  T.
  /
  Metzger,
  A.
  (2011):
  Open
  Source
  Software,
  München.
  
Kleijn,
   A.
   (2006):
   Homepages
   des
   Heise
   Zeitschriften
   Verlages,
   Online-­‐Quelle:
  
http://www.heise.de/open/artikel/Open-­‐Source-­‐Lizenzen-­‐224724.
  html,
  Abruf
  am
  11.05.2014.
  
Krumbein,
  T.
  (2004):
  Open
  Source
  einsetzen
  und
  integrieren,
  Bonn.
  
Laurent,
  A.
  (2004):
  Understanding
  Open
  Source
  and
  Free
  Software
  Licensing,
  Sebastopol.
  
Maaß,
   C.
   (2008):
   Zur
   Bedeutung
   des
   Urheber-­‐
   und
   Patentrechts
   in
   der
   quelloffenen
  
Softwareentwicklung,
   in:
   Asche,
   M.
   /
   Bauhus,
   W.
   /
   Mitschke,
   E.
   /
   Seel,
   B.
   (Hrgs.):
   Open
   Source
   -­‐
  
Kommerzialisierungsmöglichkeiten
   und
   Chancen
   für
   die
   Zusammenarbeit
   von
   Hochschulen
   und
  
Universitäten,
  Münster
  2008,
  S.
  41-­‐54.
  
Open
   Source
   Initivative
   (Hrgs.)
   (2014
   a):
   Homepage
   der
   Open
   Source
   Initivative,
   Online-­‐Quelle:
  
http://opensource.org/licenses/alphabetical,
  Abruf
  am
  11.05.2014.
  
Open
   Source
   Initivative
   (Hrgs.)
   (2014
   b):
   Homepage
   der
   Open
   Source
   Initivative,
   Online-­‐Quelle:
  
http://opensource.org/docs/osd,
  Abruf
  am
  26.04.2014.
  
Perens,
   B.
   (1999):
   The
   open
   source
   definition,
   in:
   DiBona,
   C.
   /
   Ockman,
   S.
   /
   Stone,
   M.
   (Hrgs.):
  
Opensources:
  Voices
  from
  the
  open
  source
  revolution,
  O'Reilly
  1999,
  S.
  171-­‐182.
  
Perl
   Foundation
   (Hrgs.)
   (2014):
   Homepage
   der
   Perl
   Foundation,
  
http://www.perlfoundation.org/artistic_license_1_0,
  Abruf
  am
  12.06.2012.
  

Online-­‐Quelle:
  

Ploch,
  D.
  /
  Stewin,
  P.
  /
  Koch,
  R.
  (2002):
  Einführung
  in
  Open
  Source
  Software
  -­‐
  Skript
  im
  Rahmen
  
der
  Lehrveranstaltung
  Information
  Rules
  1
  

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

24/25
  

  

Wissenstransfer
  –
  leicht
  gemacht!
  

  
Marco
  Becker
  |
  Franka
  Burmester
  |
  Julia
  Schmidt-­‐Löffler
  
  
Open
  Source
  Lizenzmodelle
  

  

  

  
RECO
   (Regionalcentrum
   für
   Electronic
   Commerce
   Anwendungen
   Osnabrück)
   (Hrgs.)
   (2010):
  
Leitfaden
   ERP-­‐Lösungen
   auf
   Basis
   Freier
   Software
   -­‐
   Für
   kleine
   und
   mittlere
   Unternehmen
   und
  
Handwerksbetriebe
  -­‐
  Teil
  1
  Marktübersicht
  und
  Testberichte
  Lx-­‐Office
  und
  openERP,
  Osnabrück.
  

  

Renner,
  T.
  /
  Vetter,
  M.
  /
  Rex,
  S.
  /
  Kett,
  H.
  (2005):
  Open
  Source
  Software:
  Einsatzpotenziale
  und
  
Wirtschaftlichkeit,
  Stuttgart.
  
Ronneburg,
   F.
   (2014):
   Debian
   GNU/
   Linux
   Anwenderhandbuch,
   Online-­‐Quelle:
  
http://debiananwenderhandbuch.de/freiesoftware.html#historyosi,
  Abruf
  am
  20.05.2014.
  
Saleck,
   T.
   (2005):
   Chefsache
   Open
   Source
   -­‐
   Kostenvorteile
   und
   Unabhängigkeit
   durch
   Open
  
Source,
  Wiesbaden.
  
Schaaf,
  A.
  (2013):
  Open-­‐Source-­‐Lizenzen
  -­‐
  Untersuchung
  der
  GPL,
  LGPL,
  BSD
  und
  Artistic
  License,
  
Hamburg.
  
Silberfeld,
   S.
   (2014):
   Homepage
   von
   Priv.
   Doz.
   Dr.
   Stefan
   Weber,
   Online-­‐Quelle:
  
http://plagiatsgutachten.de/wordpress/wp-­‐content/uploads/2011/06/
  
Silberfeld_Free_Software.pdf
  ,
  Abruf
  am
  19.05.2014.
  
Spindler,
  G.
  (2004):
  Rechtsfragen
  bei
  Open
  Source,
  Köln.
  
Steinbring,
  M.
  /
  Hampel,
  T.
  (2008):
  Connecting
  Babbling
  Bazaars
  -­‐
  Der
  Open-­‐Source-­‐Gedanke
  im
  
Wandel
   zum
   offenen
   Service,
   in:
   Asche,
   M.;
   Bauhus,
   W.
   /
   Mitschke,
   E.
   /
   Seel,
   B.
   (Hrgs.)
   Open
  
Source
   -­‐
   Kommerzialisierungsmöglichkeiten
   und
   Chancen
   für
   die
   Zusammenarbeit
   von
  
Hochschulen
  und
  Unternehmen,
  Münster
  2008,
  S.
  73-­‐98.
  
Strahringer,
  S.
  (Hrgs.)
  (2012):
  Open
  Source
  -­‐
  Konzepte,
  Risiken,
  Trends,
  Heidelberg.
  
Teupen,
  C.
  (2007):
  "Copyleft"
  im
  deutschen
  Urheberrecht,
  Berlin.
  
Urhebergesetz
  (UrhG):
  in
  der
  Fassung
  vom
  9.
  September
  1965
  (BGBI.
  I
  S.
  1273),
  das
  zuletzt
  durch
  
Artikel
  2
  Absatz
  53
  des
  Gesetzes
  vom
  22.
  Dezember
  2011
  (BGBI.
  I
  S.
  3044)
  geändert
  worden
  ist.
  
Wichmann,
  T.
  (2005):
  Linux-­‐
  und
  Open-­‐Source-­‐Strategien,
  Berlin.
  
Wind,
  S.
  (2012):
  Cloud
  Management
  mit
  Open-­‐Source-­‐Plattformen,
  in:
  Stahringer,
  S.
  (Hrgs.),
  Open
  
Source
  -­‐
  Konzepte,
  Risiken,
  Trends,
  Heidelberg,
  S.
  38-­‐48.
  
  

  
©
  Copyright
  by
  Institut
  für
  angewandte
  Forschung
  –
  2014
  

  

www.research-­‐it.eu
  

25/25
  
